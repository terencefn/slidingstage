"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
exports.getPosFromBoundingBox = exports.getBoundingBox = exports.getCoordsFromCoordsMap = exports.calcCentroid = exports.isPosWithinRect = exports.euclideanDistance = exports.manhattanDistance = exports.deserializePosition = exports.indexToPosition = exports.coordinatesToIndex = exports.positionToIndex = exports.serializePositionCoordinates = exports.serializePosition = exports.isPosEqual = void 0;
var isPosEqual = function (a, b) {
    return a.x === b.x && a.y === b.y;
};
exports.isPosEqual = isPosEqual;
function serializePosition(p) {
    return serializePositionCoordinates(p.x, p.y);
}
exports.serializePosition = serializePosition;
function serializePositionCoordinates(x, y) {
    return "".concat(x, " ").concat(y);
}
exports.serializePositionCoordinates = serializePositionCoordinates;
function positionToIndex(pos, width) {
    return coordinatesToIndex(pos.x, pos.y, width);
}
exports.positionToIndex = positionToIndex;
function coordinatesToIndex(x, y, width) {
    return y * width + x;
}
exports.coordinatesToIndex = coordinatesToIndex;
var _x, _y;
function indexToPosition(index, width) {
    _y = (index / width) | 0;
    _x = index - _y * width;
    return { x: _x, y: _y };
}
exports.indexToPosition = indexToPosition;
function deserializePosition(s) {
    var parts = s.split(" ");
    return { x: parseFloat(parts[0]), y: parseFloat(parts[1]) };
}
exports.deserializePosition = deserializePosition;
function manhattanDistance(a, b) {
    return Math.abs(a.x - b.x) + Math.abs(a.y - b.y);
}
exports.manhattanDistance = manhattanDistance;
function euclideanDistance(a, b) {
    return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
}
exports.euclideanDistance = euclideanDistance;
function isPosWithinRect(position, rectBounds) {
    return (position.x >= rectBounds.x &&
        position.y >= rectBounds.y &&
        position.x < rectBounds.x + rectBounds.width &&
        position.y < rectBounds.y + rectBounds.height);
}
exports.isPosWithinRect = isPosWithinRect;
function calcCentroid(coords) {
    var e_1, _a;
    var x_mean = 0;
    var y_mean = 0;
    try {
        for (var coords_1 = __values(coords), coords_1_1 = coords_1.next(); !coords_1_1.done; coords_1_1 = coords_1.next()) {
            var _b = coords_1_1.value, x = _b.x, y = _b.y;
            x_mean += x;
            y_mean += y;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (coords_1_1 && !coords_1_1.done && (_a = coords_1["return"])) _a.call(coords_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return { x: x_mean / coords.length, y: y_mean / coords.length };
}
exports.calcCentroid = calcCentroid;
function getCoordsFromCoordsMap(coordsMap) {
    return coordsMap.reduce(function (prev, curr, y) {
        var validCoords = curr
            .map(function (val, x) { return (val ? { x: x, y: y } : null); })
            .filter(function (val) { return !!val; });
        return __spreadArray(__spreadArray([], __read(prev), false), __read(validCoords), false);
    }, []);
}
exports.getCoordsFromCoordsMap = getCoordsFromCoordsMap;
function getBoundingBox(coords) {
    var e_2, _a;
    var bound = { x1: Infinity, y1: Infinity, x2: 0, y2: 0 };
    try {
        for (var coords_2 = __values(coords), coords_2_1 = coords_2.next(); !coords_2_1.done; coords_2_1 = coords_2.next()) {
            var _b = coords_2_1.value, x = _b.x, y = _b.y;
            if (x < bound.x1) {
                bound.x1 = x;
            }
            if (y < bound.y1) {
                bound.y1 = y;
            }
            if (x > bound.x2) {
                bound.x2 = x;
            }
            if (y > bound.y2) {
                bound.y2 = y;
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (coords_2_1 && !coords_2_1.done && (_a = coords_2["return"])) _a.call(coords_2);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return {
        x: bound.x1,
        y: bound.y1,
        width: bound.x2 - bound.x1 + 1,
        height: bound.y2 - bound.y1 + 1
    };
}
exports.getBoundingBox = getBoundingBox;
function getPosFromBoundingBox(bbox, width, height) {
    if (width === void 0) { width = Infinity; }
    if (height === void 0) { height = Infinity; }
    var x1 = bbox.x1, y1 = bbox.y1, x2 = bbox.x2, y2 = bbox.y2;
    var minX = Math.max(0, Math.min(x1, x2));
    var maxX = Math.min(width - 1, Math.max(x1, x2));
    var minY = Math.max(0, Math.min(y1, y2));
    var maxY = Math.min(height - 1, Math.max(y1, y2));
    var coords = [];
    for (var y = minY; y <= maxY; y++) {
        for (var x = minX; x <= maxX; x++) {
            coords.push({ x: x, y: y });
        }
    }
    return coords;
}
exports.getPosFromBoundingBox = getPosFromBoundingBox;
//# sourceMappingURL=Position.js.map