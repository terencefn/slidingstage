import { Position } from "./Position";
import { DBOutfit, DeskInfoV2, Inventory, MoveDirectionEnum_ENUM as MoveDirection, SpriteDirectionEnum_ENUM as SpriteDirection } from "./generated_DO_NOT_TOUCH/events";
import * as zod from "zod";
export { SpriteDirection, MoveDirection };
export declare const ZodDBOutfit: zod.ZodObject<{
    skin: zod.ZodString;
    hair: zod.ZodString;
    facial_hair: zod.ZodString;
    top: zod.ZodString;
    bottom: zod.ZodString;
    shoes: zod.ZodString;
    hat: zod.ZodString;
    glasses: zod.ZodString;
    other: zod.ZodString;
    costume: zod.ZodOptional<zod.ZodString>;
    mobility: zod.ZodOptional<zod.ZodString>;
    jacket: zod.ZodOptional<zod.ZodString>;
}, "strip", zod.ZodTypeAny, {
    costume?: string | undefined;
    mobility?: string | undefined;
    jacket?: string | undefined;
    skin: string;
    hair: string;
    facial_hair: string;
    top: string;
    bottom: string;
    shoes: string;
    hat: string;
    glasses: string;
    other: string;
}, {
    costume?: string | undefined;
    mobility?: string | undefined;
    jacket?: string | undefined;
    skin: string;
    hair: string;
    facial_hair: string;
    top: string;
    bottom: string;
    shoes: string;
    hat: string;
    glasses: string;
    other: string;
}>;
export interface BaseRoomUserDB {
    allowScreenPointer?: boolean;
    currentlyEquippedWearables?: DBOutfit;
    deskInfo?: DeskInfoV2;
    inventory?: Inventory;
    name?: string;
}
export interface PlayerDB extends BaseRoomUserDB {
    affiliation?: string;
    allowScreenPointer?: boolean;
    busy?: boolean;
    connected?: boolean;
    currentDesk?: string;
    description?: string;
    deskInfo?: DeskInfoV2;
    emojiStatus?: string;
    focusModeEndTime?: string;
    inventory?: Inventory;
    isNpc?: boolean;
    itemString?: string;
    map?: string;
    name?: string;
    personalImageUrl?: string;
    phone?: string;
    profileImageUrl?: string;
    pronouns?: string;
    textStatus?: string;
    timezone?: string;
    title?: string;
    x?: number;
    y?: number;
}
export declare type PlayerDBPartial = Partial<PlayerDB>;
export declare class PlayerDBFields implements PlayerDB {
    affiliation: string;
    allowScreenPointer: boolean;
    busy: boolean;
    connected: boolean;
    currentDesk: string;
    currentlyEquippedWearables?: DBOutfit;
    description: string;
    deskInfo: DeskInfoV2;
    emojiStatus: string;
    focusModeEndTime: string;
    inventory: Inventory;
    isNpc: boolean;
    itemString: string;
    map: string;
    name: string;
    personalImageUrl: string;
    phone: string;
    profileImageUrl: string;
    pronouns: string;
    textStatus: string;
    timezone: string;
    title: string;
    x: number;
    y: number;
}
export declare class Player extends PlayerDBFields {
    currentlyEquippedWearables?: undefined;
    direction: SpriteDirection;
    ghost: number;
    spotlighted: number;
    emote: string | undefined;
    workCondition: number;
    away: boolean;
    activelySpeaking: number;
    lastActive: string;
    lastInputId: number;
    whisperId: string;
    isSignedIn: boolean;
    outfitString: string;
    eventStatus: string;
    inConversation: boolean;
    currentArea: string;
    vehicleId: string;
    speedModifier: number;
    isAlone: boolean;
    isMobile: boolean;
    followTarget: string;
    manualVideoSrc: string;
    manualDefaultVideoImageSrc: string;
    manualScreenSrc: string;
    subtitle: string;
    constructor();
}
export declare const generateDefaultPlayer: () => Player;
export declare enum Emote {
    None = 0,
    Wave = 1,
    Heart = 2,
    PartyPopper = 3,
    RaisedHand = 4
}
export declare const EMOTE_EMOJIS: {
    1: string;
    2: string;
    3: string;
    4: string;
};
export declare const EMOTE_RESET_SHORTCUT = "0";
export declare const EMOTE_SHORTCUTS: string[];
export declare const DEFAULT_TEMP_EMOTES: string[];
export declare function getMoveDirFromSpriteDir(direction: SpriteDirection): MoveDirection | null;
export declare function oppositeMoveDirection(direction: MoveDirection): MoveDirection | null;
export declare const positionAfterMove: (start: Position, dir: MoveDirection | null, dist?: number) => Position;
export declare function nextSpriteDirection(current: SpriteDirection, direction: MoveDirection): SpriteDirection;
export declare function directionToFacePlayer(player: Player, target: Player): MoveDirection | null;
export declare function whisperIdToColor(id: string): string;
export declare const CONSTANT_PERMANENT_EMOTES: string[];
export declare const keyPressedToEmote: (keycode: number, emotesArray: string[]) => string | undefined;
export declare const getAllEmotes: (tempEmotes: string[]) => string[];
export declare enum VehicleAction {
    Mount = "mount",
    Dismount = "dismount"
}
