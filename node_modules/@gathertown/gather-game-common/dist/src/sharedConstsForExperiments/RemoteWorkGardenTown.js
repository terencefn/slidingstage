"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNextGardeningTime = exports.getIsGardeningTime = exports.getPlantData = exports.happenedToday = exports.getPlayersAllowedHarvest = exports.MIN_NUM_PLAYERS_HARVEST = exports.getSeedUnplacedObj = exports.getAllCraftingRewardItems = exports.getCraftingRewardItem = exports.getAllPlantRewardItems = exports.getPlantRewardItem = exports.getAllSeedItems = exports.getSeedItem = exports.getPlantNameFromTemplateId = exports.isGardenTownPlanter = exports.isGardenTownPlant = exports.getCraftedRewardImage = exports.getHarvestImage = exports.getSeedImage = exports.getPlantImage = exports.PLANT_INFO_MAP = exports.GARDENTOWN_REWARD_TO_PLANT = exports.GARDENTOWN_SEED_TO_PLANT = exports.PlantName = exports.RewardName = exports.CraftingRewardName = exports.CraftingAbilityRewardName = exports.CraftingRewardObjectName = exports.PlantRewardName = exports.SeedName = exports.PlantHealth = exports.DEFAULT_PLANT_STAGES = exports.PlantStage = exports.PlantDifficulty = exports.GARDENTOWN_PLANTER_PREFIX = void 0;
const gameMap_1 = require("../public/gameMap");
const utils_1 = require("../public/utils");
const GARDENTOWN_OBJ_TEMPLATE_PREFIX = "GARDENTOWN_";
exports.GARDENTOWN_PLANTER_PREFIX = "GardenTownRaisedBed_";
var PlantDifficulty;
(function (PlantDifficulty) {
    PlantDifficulty["EASY"] = "Easy";
    PlantDifficulty["MEDIUM"] = "Medium";
    PlantDifficulty["HARD"] = "Hard";
    PlantDifficulty["VERY_HARD"] = "Very Hard";
})(PlantDifficulty = exports.PlantDifficulty || (exports.PlantDifficulty = {}));
var PlantStage;
(function (PlantStage) {
    PlantStage["DIRT"] = "DIRT";
    PlantStage["SEEDLING"] = "SEEDLING";
    PlantStage["SPROUT"] = "SPROUT";
    PlantStage["BUDDING"] = "BUDDING";
    PlantStage["FLOWERING"] = "FLOWERING";
    PlantStage["HARVESTABLE"] = "HARVESTABLE";
})(PlantStage = exports.PlantStage || (exports.PlantStage = {}));
exports.DEFAULT_PLANT_STAGES = [
    PlantStage.DIRT,
    PlantStage.SEEDLING,
    PlantStage.SPROUT,
    PlantStage.BUDDING,
    PlantStage.FLOWERING,
    PlantStage.HARVESTABLE,
];
var PlantHealth;
(function (PlantHealth) {
    PlantHealth["HEALTHY"] = "HEALTHY";
    PlantHealth["WILTING"] = "WILTING";
    PlantHealth["DEAD"] = "DEAD";
})(PlantHealth = exports.PlantHealth || (exports.PlantHealth = {}));
var SeedName;
(function (SeedName) {
    SeedName["GRASS_SEED"] = "Grass Seed";
    SeedName["ROSE_SEED"] = "Rose Seed";
    SeedName["MUM_SEED"] = "Mum Seed";
    SeedName["POPPY_SEED"] = "Poppy Seed";
    SeedName["ORCHID_SEED"] = "Orchid Seed";
    SeedName["RASPBERRY_SEED"] = "Raspberry Seed";
    SeedName["BROCCOLI_SEED"] = "Broccoli Seed";
    SeedName["POTATO_SEED"] = "Potato Seed";
    SeedName["SWEETPOTATO_SEED"] = "Sweet Potato Seed";
    SeedName["PINEAPPLE_SEED"] = "Pineapple Seed";
    SeedName["TULIP_SEED"] = "Tulip Seed";
    SeedName["WATERMELON_SEED"] = "Watermelon Seed";
})(SeedName = exports.SeedName || (exports.SeedName = {}));
var PlantRewardName;
(function (PlantRewardName) {
    PlantRewardName["GRASS_HARVEST"] = "Grass";
    PlantRewardName["ROSE_HARVEST"] = "Rose";
    PlantRewardName["MUM_HARVEST"] = "Mum";
    PlantRewardName["POPPY_HARVEST"] = "Poppy";
    PlantRewardName["ORCHID_HARVEST"] = "Orchid";
    PlantRewardName["RASPBERRY_HARVEST"] = "Raspberry";
    PlantRewardName["BROCCOLI_HARVEST"] = "Broccoli";
    PlantRewardName["POTATO_HARVEST"] = "Potato";
    PlantRewardName["SWEETPOTATO_HARVEST"] = "Sweet Potato";
    PlantRewardName["PINEAPPLE_HARVEST"] = "Pineapple";
    PlantRewardName["TULIP_HARVEST"] = "Tulip";
    PlantRewardName["WATERMELON_HARVEST"] = "Watermelon";
})(PlantRewardName = exports.PlantRewardName || (exports.PlantRewardName = {}));
var CraftingRewardObjectName;
(function (CraftingRewardObjectName) {
    CraftingRewardObjectName["GRASS_PATCH"] = "Grass Patch";
    CraftingRewardObjectName["BROCCOLI_BENCH"] = "Broccoli Bench";
    CraftingRewardObjectName["PINEAPPLE_HEAD_SCARECROW"] = "Pineapple Head Scarecrow";
    CraftingRewardObjectName["DANCING_FLOWER_POT"] = "Dancing Flower Pot";
})(CraftingRewardObjectName = exports.CraftingRewardObjectName || (exports.CraftingRewardObjectName = {}));
var CraftingAbilityRewardName;
(function (CraftingAbilityRewardName) {
    CraftingAbilityRewardName["FROG_GUN"] = "Frog Gun";
    CraftingAbilityRewardName["DANCE_BOMB"] = "Dance Bomb";
    CraftingAbilityRewardName["SPEED_POTION"] = "Speed Potion";
})(CraftingAbilityRewardName = exports.CraftingAbilityRewardName || (exports.CraftingAbilityRewardName = {}));
exports.CraftingRewardName = Object.assign(Object.assign({}, CraftingRewardObjectName), CraftingAbilityRewardName);
exports.RewardName = Object.assign(Object.assign({}, PlantRewardName), exports.CraftingRewardName);
var PlantName;
(function (PlantName) {
    PlantName["GRASS"] = "GRASS";
    PlantName["ROSE"] = "ROSE";
    PlantName["MUM"] = "MUM";
    PlantName["POPPY"] = "POPPY";
    PlantName["ORCHID"] = "ORCHID";
    PlantName["RASPBERRY"] = "RASPBERRY";
    PlantName["POTATO"] = "POTATO";
    PlantName["BROCCOLI"] = "BROCCOLI";
    PlantName["SWEETPOTATO"] = "SWEETPOTATO";
    PlantName["PINEAPPLE"] = "PINEAPPLE";
    PlantName["TULIP"] = "TULIP";
    PlantName["WATERMELON"] = "WATERMELON";
})(PlantName = exports.PlantName || (exports.PlantName = {}));
exports.GARDENTOWN_SEED_TO_PLANT = {
    [SeedName.GRASS_SEED]: PlantName.GRASS,
    [SeedName.ROSE_SEED]: PlantName.ROSE,
    [SeedName.MUM_SEED]: PlantName.MUM,
    [SeedName.POPPY_SEED]: PlantName.POPPY,
    [SeedName.ORCHID_SEED]: PlantName.ORCHID,
    [SeedName.RASPBERRY_SEED]: PlantName.RASPBERRY,
    [SeedName.BROCCOLI_SEED]: PlantName.BROCCOLI,
    [SeedName.POTATO_SEED]: PlantName.POTATO,
    [SeedName.SWEETPOTATO_SEED]: PlantName.SWEETPOTATO,
    [SeedName.PINEAPPLE_SEED]: PlantName.PINEAPPLE,
    [SeedName.TULIP_SEED]: PlantName.TULIP,
    [SeedName.WATERMELON_SEED]: PlantName.WATERMELON,
};
exports.GARDENTOWN_REWARD_TO_PLANT = {
    [exports.RewardName.GRASS_HARVEST]: PlantName.GRASS,
    [exports.RewardName.ROSE_HARVEST]: PlantName.ROSE,
    [exports.RewardName.MUM_HARVEST]: PlantName.MUM,
    [exports.RewardName.POPPY_HARVEST]: PlantName.POPPY,
    [exports.RewardName.ORCHID_HARVEST]: PlantName.ORCHID,
    [exports.RewardName.RASPBERRY_HARVEST]: PlantName.RASPBERRY,
    [exports.RewardName.BROCCOLI_HARVEST]: PlantName.BROCCOLI,
    [exports.RewardName.POTATO_HARVEST]: PlantName.POTATO,
    [exports.RewardName.SWEETPOTATO_HARVEST]: PlantName.SWEETPOTATO,
    [exports.RewardName.PINEAPPLE_HARVEST]: PlantName.PINEAPPLE,
    [exports.RewardName.TULIP_HARVEST]: PlantName.TULIP,
    [exports.RewardName.WATERMELON_HARVEST]: PlantName.WATERMELON,
};
exports.PLANT_INFO_MAP = {
    [PlantName.GRASS]: {
        displayName: "Grass",
        difficulty: PlantDifficulty.EASY,
        growTime: 1,
        numDailyWaters: 2,
        reward: exports.RewardName.GRASS_HARVEST,
    },
    [PlantName.ROSE]: {
        displayName: "Rose",
        difficulty: PlantDifficulty.EASY,
        growTime: 1,
        numDailyWaters: 2,
        reward: exports.RewardName.ROSE_HARVEST,
    },
    [PlantName.MUM]: {
        displayName: "Mum",
        difficulty: PlantDifficulty.EASY,
        growTime: 1,
        numDailyWaters: 2,
        reward: exports.RewardName.MUM_HARVEST,
    },
    [PlantName.POPPY]: {
        displayName: "Poppy",
        difficulty: PlantDifficulty.EASY,
        growTime: 1,
        numDailyWaters: 2,
        reward: exports.RewardName.POPPY_HARVEST,
    },
    [PlantName.ORCHID]: {
        displayName: "Orchid",
        difficulty: PlantDifficulty.EASY,
        growTime: 1,
        numDailyWaters: 2,
        reward: exports.RewardName.ORCHID_HARVEST,
    },
    [PlantName.RASPBERRY]: {
        displayName: "Raspberry",
        difficulty: PlantDifficulty.EASY,
        growTime: 2,
        numDailyWaters: 2,
        reward: exports.RewardName.RASPBERRY_HARVEST,
    },
    [PlantName.POTATO]: {
        displayName: "Potato",
        difficulty: PlantDifficulty.EASY,
        growTime: 2,
        numDailyWaters: 2,
        reward: exports.RewardName.POTATO_HARVEST,
    },
    [PlantName.BROCCOLI]: {
        displayName: "Broccoli",
        difficulty: PlantDifficulty.MEDIUM,
        growTime: 7,
        numDailyWaters: 4,
        reward: exports.RewardName.BROCCOLI_HARVEST,
    },
    [PlantName.TULIP]: {
        displayName: "Tulip",
        difficulty: PlantDifficulty.MEDIUM,
        growTime: 7,
        numDailyWaters: 4,
        reward: exports.RewardName.TULIP_HARVEST,
    },
    [PlantName.SWEETPOTATO]: {
        displayName: "Sweet Potato",
        difficulty: PlantDifficulty.MEDIUM,
        growTime: 7,
        numDailyWaters: 4,
        reward: exports.RewardName.SWEETPOTATO_HARVEST,
    },
    [PlantName.PINEAPPLE]: {
        displayName: "Pineapple",
        difficulty: PlantDifficulty.VERY_HARD,
        growTime: 21,
        numDailyWaters: 10,
        reward: exports.RewardName.PINEAPPLE_HARVEST,
    },
    [PlantName.WATERMELON]: {
        displayName: "Watermelon",
        difficulty: PlantDifficulty.VERY_HARD,
        growTime: 21,
        numDailyWaters: 10,
        reward: exports.RewardName.WATERMELON_HARVEST,
    },
};
const getPlantImage = (plant) => {
    if (plant.stage === PlantStage.DIRT)
        return `https://cdn.gather.town/v0/b/gather-town.appspot.com/o/manually-uploaded%2Fgardentown_new%2FDIRT_MOUND.png?alt=media`;
    if (plant.health === PlantHealth.DEAD)
        return "https://cdn.gather.town/v0/b/gather-town.appspot.com/o/manually-uploaded%2Fgardentown_new%2FBROCCOLI_BUDDING_DEAD.png?alt=media&token=b3d75aa9-318c-4f4c-939f-3f692acda074";
    return `https://cdn.gather.town/v0/b/gather-town.appspot.com/o/manually-uploaded%2Fgardentown_new%2F${plant.name}_${plant.stage}_${plant.health}.png?alt=media`;
};
exports.getPlantImage = getPlantImage;
const getSeedImage = (seedName) => {
    const plantName = exports.GARDENTOWN_SEED_TO_PLANT[seedName];
    return `https://cdn.gather.town/v0/b/gather-town.appspot.com/o/manually-uploaded%2Fgardentown_new%2F${plantName}_SEED.png?alt=media`;
};
exports.getSeedImage = getSeedImage;
const getHarvestImage = (rewardName) => {
    const plantName = exports.GARDENTOWN_REWARD_TO_PLANT[rewardName];
    return `https://cdn.gather.town/v0/b/gather-town.appspot.com/o/manually-uploaded%2Fgardentown_new%2F${plantName}_HARVEST.png?alt=media`;
};
exports.getHarvestImage = getHarvestImage;
const getCraftedRewardImage = (rewardName) => `https://cdn.gather.town/v0/b/gather-town.appspot.com/o/manually-uploaded%2Fgardentown_new%2F${rewardName}_CRAFTED.png?alt=media`;
exports.getCraftedRewardImage = getCraftedRewardImage;
const isGardenTownPlant = (templateId) => templateId.startsWith(GARDENTOWN_OBJ_TEMPLATE_PREFIX);
exports.isGardenTownPlant = isGardenTownPlant;
const isGardenTownPlanter = (templateId) => templateId.startsWith(exports.GARDENTOWN_PLANTER_PREFIX);
exports.isGardenTownPlanter = isGardenTownPlanter;
const getPlantNameFromTemplateId = (templateId) => {
    if ((0, exports.isGardenTownPlant)(templateId)) {
        const suffix = templateId.slice(11);
        if (Object.values(PlantName).includes(suffix))
            return suffix;
    }
    return null;
};
exports.getPlantNameFromTemplateId = getPlantNameFromTemplateId;
const getSeedItem = (seedName) => {
    const plant = exports.GARDENTOWN_SEED_TO_PLANT[seedName];
    const previewUrl = (0, exports.getSeedImage)(seedName);
    const item = {
        name: seedName,
        category: "Gardentown Seeds",
        previewUrl,
        meta: { plant },
        abilities: {},
    };
    return item;
};
exports.getSeedItem = getSeedItem;
const getAllSeedItems = () => Object.values(SeedName).reduce((prev, seedName) => (Object.assign(Object.assign({}, prev), { [seedName]: (0, exports.getSeedItem)(seedName) })), {});
exports.getAllSeedItems = getAllSeedItems;
const getPlantRewardItem = (rewardName) => {
    const plant = exports.GARDENTOWN_REWARD_TO_PLANT[rewardName];
    const previewUrl = (0, exports.getHarvestImage)(rewardName);
    const item = {
        name: rewardName,
        category: "Gardentown Rewards",
        previewUrl,
        meta: { plant },
        abilities: {},
    };
    return item;
};
exports.getPlantRewardItem = getPlantRewardItem;
const getAllPlantRewardItems = () => Object.values(PlantRewardName).reduce((prev, rewardName) => (Object.assign(Object.assign({}, prev), { [rewardName]: (0, exports.getPlantRewardItem)(rewardName) })), {});
exports.getAllPlantRewardItems = getAllPlantRewardItems;
const getCraftingRewardItem = (rewardName) => {
    const previewUrl = (0, exports.getCraftedRewardImage)(rewardName);
    const item = {
        name: rewardName,
        category: "Gardentown Rewards",
        previewUrl,
        meta: {},
        abilities: {},
    };
    return item;
};
exports.getCraftingRewardItem = getCraftingRewardItem;
const getAllCraftingRewardItems = () => Object.values(exports.CraftingRewardName).reduce((prev, rewardName) => (Object.assign(Object.assign({}, prev), { [rewardName]: (0, exports.getCraftingRewardItem)(rewardName) })), {});
exports.getAllCraftingRewardItems = getAllCraftingRewardItems;
const getSeedUnplacedObj = (seedName) => {
    const plantName = exports.GARDENTOWN_SEED_TO_PLANT[seedName];
    const seedImg = (0, exports.getSeedImage)(seedName);
    const unplacedObj = {
        _name: `Gardentown ${plantName}`,
        templateId: `${GARDENTOWN_OBJ_TEMPLATE_PREFIX}${plantName}`,
        type: gameMap_1.Interaction.COMPONENT_MODAL,
        distThreshold: 1,
        highlighted: seedImg,
        normal: seedImg,
        orientation: 0,
        width: 1,
        height: 1,
        properties: {
            componentModal: "plantInfo",
        },
    };
    return unplacedObj;
};
exports.getSeedUnplacedObj = getSeedUnplacedObj;
exports.MIN_NUM_PLAYERS_HARVEST = 3;
const getPlayersAllowedHarvest = (plant) => {
    var _a;
    const players = Object.entries(plant.wateredBy).sort((a, b) => b[1].count - a[1].count);
    let topPlayers = players.slice(0, exports.MIN_NUM_PLAYERS_HARVEST);
    if (topPlayers.length === exports.MIN_NUM_PLAYERS_HARVEST) {
        const lastPlace = (_a = topPlayers[exports.MIN_NUM_PLAYERS_HARVEST - 1]) === null || _a === void 0 ? void 0 : _a[1].count;
        const tiedForLast = players
            .slice(exports.MIN_NUM_PLAYERS_HARVEST)
            .filter((player) => player[1].count === lastPlace);
        topPlayers = [...topPlayers, ...tiedForLast];
    }
    return topPlayers.map((p) => p[0]);
};
exports.getPlayersAllowedHarvest = getPlayersAllowedHarvest;
const TIMEZONE = "America/Los_Angeles";
const happenedToday = (epochTime) => {
    const convertedTime = convertToTZ(new Date(epochTime));
    const today = convertToTZ(new Date(Date.now()));
    return (convertedTime.getFullYear() === today.getFullYear() &&
        convertedTime.getMonth() === today.getMonth() &&
        convertedTime.getDate() === today.getDate());
};
exports.happenedToday = happenedToday;
const getPlantData = (plantObj) => (0, utils_1.parseObjCustomState)(plantObj);
exports.getPlantData = getPlantData;
const convertToTZ = (date) => new Date(date.toLocaleString("en-US", { timeZone: TIMEZONE }));
const GARDENING_TIMES = [
    { from: { hour: 16, minute: 55 }, to: { hour: 17, minute: 5 } },
    { from: { hour: 19, minute: 55 }, to: { hour: 20, minute: 5 } },
    { from: { hour: 4, minute: 55 }, to: { hour: 5, minute: 5 } },
];
const getIsGardeningTime = () => {
    const now = new Date();
    return GARDENING_TIMES.some((time) => {
        const fromTime = new Date().setUTCHours(time.from.hour, time.from.minute, 0, 0);
        const toTime = new Date().setUTCHours(time.to.hour, time.to.minute, 0, 0);
        if (now.getTime() > fromTime && now.getTime() < toTime)
            return true;
        return false;
    });
};
exports.getIsGardeningTime = getIsGardeningTime;
const getNextGardeningTime = () => {
    const now = new Date();
    let nextGardenTime = new Date();
    nextGardenTime.setUTCDate(now.getUTCDate() + 7);
    let nextGardenEndTime = new Date();
    nextGardenEndTime.setUTCDate(now.getUTCDate() + 7);
    GARDENING_TIMES.forEach((time) => {
        const newTime = new Date();
        newTime.setUTCHours(time.from.hour, time.from.minute, 0);
        if (newTime < now) {
            newTime.setUTCDate(newTime.getUTCDate() + 1);
        }
        if (newTime < nextGardenTime) {
            nextGardenTime = newTime;
            nextGardenEndTime = new Date();
            nextGardenEndTime.setUTCHours(time.to.hour, time.to.minute, 0);
        }
    });
    return {
        timeDiffMS: nextGardenTime.getTime() - now.getTime(),
        endTimeDiffMS: nextGardenEndTime.getTime() - now.getTime(),
        nextGardenTime,
        nextGardenEndTime,
    };
};
exports.getNextGardeningTime = getNextGardeningTime;
//# sourceMappingURL=RemoteWorkGardenTown.js.map