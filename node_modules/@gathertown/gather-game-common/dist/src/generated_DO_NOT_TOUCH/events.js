"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.MapSetAreas_AreasEntry = exports.MapSetAreas = exports.MapSetFloors_FloorsEntry = exports.MapSetFloors = exports.MapSetWalls_WallsEntry = exports.MapSetWalls = exports.MapSetUseDrawnBG = exports.MapSetMuteOnEntry = exports.MapSetName = exports.MapSetObjects_ObjectsEntry = exports.MapSetObjects = exports.MapSetAssets = exports.MapSetAnnouncer = exports.MapSetPortals = exports.MapSetSpawns = exports.MapSetSpawn = exports.MapSetSpaces = exports.MapSetSprites = exports.MapSetForegroundImagePath = exports.MapSetBackgroundImagePath = exports.MapSetCollisions = exports.MapSetDimensions = exports.DBDesk = exports.WireArea = exports.AreaPosition = exports.Asset = exports.Announcer = exports.Portal = exports.SpawnPoint = exports.Point = exports.Space = exports.ObjectTime = exports.Sound = exports.DeskInfo = exports.SpaceMemberInfo_RolesEntry = exports.SpaceMemberInfo = exports.WireObject = exports.WireObjectSpritesheet_AnimationsEntry = exports.WireObjectSpritesheet = exports.WireObjectSpriteAnimConfig = exports.WireObjectSpritesheetFraming = exports.DBOutfit = exports.SpaceUserInfo = exports.InteractionEnum = exports.MoveDirectionEnum = exports.SpriteDirectionEnum = exports.InteractionEnum_ENUM = exports.MoveDirectionEnum_ENUM = exports.SpriteDirectionEnum_ENUM = exports.protobufPackage = void 0;
exports.PlayerSetsAffiliation = exports.PlayerSetsEmojiStatus = exports.PlayerSetsIsMobile = exports.PlayerSetsTextStatus = exports.PlayerSetsName = exports.PlayerSetsLastActive = exports.PlayerSetsWorkCondition = exports.PlayerSetsNonVerbalCue = exports.PlayerSetsEmoteV2 = exports.PlayerActivelySpeaks = exports.PlayerLeavesWhisper = exports.PlayerEntersWhisperV2 = exports.PlayerEntersWhisper = exports.PlayerGhosts = exports.PlayerInteracts = exports.Timestamp = exports.PlayerChats = exports.SetScreenPointerServer = exports.PlayerSetsImagePointer = exports.PlayerRings = exports.PlayerSpotlights = exports.PlayerSetsStatus = exports.PlayerMoves = exports.PlayerJoins = exports.TransactionStatus = exports.Ready = exports.ErrorEvent = exports.Warn = exports.Info = exports.ServerHeartbeat = exports.ServerClientEvent = exports.ServerClientBatch = exports.SpaceItem_MetaEntry = exports.SpaceItem = exports.InventoryItem = exports.Inventory_OrderEntry = exports.Inventory_ItemsEntry = exports.Inventory = exports.MapSetScript = exports.TutorialTaskMapArea = exports.WireTutorialTasks = exports.MapSetDesks_DesksEntry = exports.MapSetDesks = exports.MapSetTutorialTasks = exports.MapSetDecoration = exports.MapSetDescription = exports.MapSetEnabledChats = exports.MapSetMiniMapImagePath = exports.MapDeleteObjectById = exports.MapDeleteObject = void 0;
exports.UpdateSubscriptions = exports.ClientBackupHeartbeat = exports.ClientHeartbeat = exports.ClientServerAction = exports.ClientServerBatch = exports.SpaceUpdatesItems_ItemsEntry = exports.SpaceUpdatesItems = exports.PlayerUpdatesInventory_OrderEntry = exports.PlayerUpdatesInventory_ItemsEntry = exports.PlayerUpdatesInventory = exports.SpaceRegistersCommand = exports.PlayerSendsCommand = exports.PlayerHighFives = exports.FXShakeCamera = exports.FXShakeObject = exports.PlayerEditsChatMessage = exports.MapMoveObject = exports.PlayerSetsSubtitle = exports.PlayerSetsIsNpc = exports.PlayerSetsManualVideoSrc = exports.PlayerRequestsToLead = exports.PlayerSetsFollowTarget = exports.PlayerNotifies = exports.PlayerTriggersItem = exports.PlayerSetsItemString = exports.PlayerUpdatesFocusModeStatus = exports.CustomEvent = exports.PlayerBlocks = exports.PlayerSetsFocusModeEndTime = exports.SpacePlaysSound = exports.PlayerSetsIsAlone = exports.PlayerSetsSpeedModifier = exports.PlayerSetsVehicleId = exports.PlayerSetsGoKartId = exports.PlayerSetsCurrentArea = exports.PlayerSetsCurrentDesk = exports.PlayerSetsInConversation = exports.PlayerSetsEventStatus = exports.PlayerShootsConfetti = exports.SpaceSetsIdMapping = exports.CookieFound = exports.PlayerEntersPortal = exports.SpaceIsClosed = exports.SpaceSetsSpaceMembers_MembersEntry = exports.SpaceSetsSpaceMembers = exports.SpaceOverwrites = exports.RespawnComplete = exports.PlayerSetsIsSignedIn = exports.PlayerSetsOutfitString = exports.PlayerExits = void 0;
exports.SetFollowTarget = exports.CustomAction = exports.TriggerItem = exports.SetItemString = exports.SetFocusModeEndTime = exports.PlaySound = exports.SetIsMobile = exports.SetIsAlone = exports.SetSpeedModifier = exports.SetVehicleId = exports.SetGoKartId = exports.SetCurrentArea = exports.SetCurrentDesk = exports.SetInConversation = exports.SetEventStatus = exports.ShootConfetti = exports.MapAddObject = exports.Init = exports.Respawn = exports.Spawn = exports.SetWorkCondition = exports.Teleport = exports.SetEmojiStatus = exports.Enter = exports.Exit = exports.SetTextStatus = exports.SetName = exports.SetNonVerbalCue = exports.SetEmoteV2 = exports.Ghost = exports.LeaveWhisper = exports.EnterWhisper = exports.ActivelySpeaking = exports.Interact = exports.Notify = exports.Chat = exports.SetImpassable = exports.Block = exports.Kick = exports.Ban = exports.SetScreenPointer = exports.SetImagePointer = exports.Ring = exports.Spotlight = exports.SetOutfitString = exports.SetStatus = exports.SetAffiliation = exports.Move = exports.UpdateSubscriptions_MapUpdateIdsEntry = exports.UpdateSubscriptions_SubscriptionsEntry = void 0;
exports.protobufWriterLibrary = exports.RemoveInventoryItem = exports.AddInventoryItem = exports.HighFive = exports.SetArbitraryMapData = exports.RegisterCommand = exports.SendCommand = exports.ChatMessageUpdated = exports.ChatReply = exports.SpeakerUpdatesSession = exports.PlayerUpdatesSession = exports.MapCommitsChanges = exports.SetSubtitle = exports.SetManualVideoSrc = exports.EnterPortal = exports.RequestToLead = void 0;
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "";
var SpriteDirectionEnum_ENUM;
(function (SpriteDirectionEnum_ENUM) {
    SpriteDirectionEnum_ENUM[SpriteDirectionEnum_ENUM["Stand"] = 0] = "Stand";
    SpriteDirectionEnum_ENUM[SpriteDirectionEnum_ENUM["Down"] = 1] = "Down";
    SpriteDirectionEnum_ENUM[SpriteDirectionEnum_ENUM["DownAlt"] = 2] = "DownAlt";
    SpriteDirectionEnum_ENUM[SpriteDirectionEnum_ENUM["Up"] = 3] = "Up";
    SpriteDirectionEnum_ENUM[SpriteDirectionEnum_ENUM["UpAlt"] = 4] = "UpAlt";
    SpriteDirectionEnum_ENUM[SpriteDirectionEnum_ENUM["Left"] = 5] = "Left";
    SpriteDirectionEnum_ENUM[SpriteDirectionEnum_ENUM["LeftAlt"] = 6] = "LeftAlt";
    SpriteDirectionEnum_ENUM[SpriteDirectionEnum_ENUM["Right"] = 7] = "Right";
    SpriteDirectionEnum_ENUM[SpriteDirectionEnum_ENUM["RightAlt"] = 8] = "RightAlt";
    SpriteDirectionEnum_ENUM[SpriteDirectionEnum_ENUM["Dance1"] = 9] = "Dance1";
    SpriteDirectionEnum_ENUM[SpriteDirectionEnum_ENUM["Dance2"] = 10] = "Dance2";
    SpriteDirectionEnum_ENUM[SpriteDirectionEnum_ENUM["Dance3"] = 11] = "Dance3";
    SpriteDirectionEnum_ENUM[SpriteDirectionEnum_ENUM["Dance4"] = 12] = "Dance4";
})(SpriteDirectionEnum_ENUM = exports.SpriteDirectionEnum_ENUM || (exports.SpriteDirectionEnum_ENUM = {}));
var MoveDirectionEnum_ENUM;
(function (MoveDirectionEnum_ENUM) {
    MoveDirectionEnum_ENUM[MoveDirectionEnum_ENUM["Left"] = 0] = "Left";
    MoveDirectionEnum_ENUM[MoveDirectionEnum_ENUM["Right"] = 1] = "Right";
    MoveDirectionEnum_ENUM[MoveDirectionEnum_ENUM["Up"] = 2] = "Up";
    MoveDirectionEnum_ENUM[MoveDirectionEnum_ENUM["Down"] = 3] = "Down";
    MoveDirectionEnum_ENUM[MoveDirectionEnum_ENUM["Dance"] = 4] = "Dance";
})(MoveDirectionEnum_ENUM = exports.MoveDirectionEnum_ENUM || (exports.MoveDirectionEnum_ENUM = {}));
var InteractionEnum_ENUM;
(function (InteractionEnum_ENUM) {
    InteractionEnum_ENUM[InteractionEnum_ENUM["NONE"] = 0] = "NONE";
    InteractionEnum_ENUM[InteractionEnum_ENUM["EMBEDDED_WEBSITE"] = 1] = "EMBEDDED_WEBSITE";
    InteractionEnum_ENUM[InteractionEnum_ENUM["POSTER"] = 2] = "POSTER";
    InteractionEnum_ENUM[InteractionEnum_ENUM["VIDEO"] = 3] = "VIDEO";
    InteractionEnum_ENUM[InteractionEnum_ENUM["EXTERNAL_CALL"] = 4] = "EXTERNAL_CALL";
    InteractionEnum_ENUM[InteractionEnum_ENUM["EXTENSION"] = 5] = "EXTENSION";
    InteractionEnum_ENUM[InteractionEnum_ENUM["NOTE"] = 6] = "NOTE";
    InteractionEnum_ENUM[InteractionEnum_ENUM["MODAL_EXTENSION"] = 7] = "MODAL_EXTENSION";
    InteractionEnum_ENUM[InteractionEnum_ENUM["COMPONENT_MODAL"] = 8] = "COMPONENT_MODAL";
})(InteractionEnum_ENUM = exports.InteractionEnum_ENUM || (exports.InteractionEnum_ENUM = {}));
var baseSpriteDirectionEnum = {};
exports.SpriteDirectionEnum = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpriteDirectionEnum);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMoveDirectionEnum = {};
exports.MoveDirectionEnum = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMoveDirectionEnum);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseInteractionEnum = {};
exports.InteractionEnum = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseInteractionEnum);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSpaceUserInfo = {};
exports.SpaceUserInfo = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.name !== undefined) {
            writer.uint32(10).string(message.name);
        }
        if (message.avatar !== undefined) {
            writer.uint32(16).uint32(message.avatar);
        }
        if (message.x !== undefined) {
            writer.uint32(24).uint32(message.x);
        }
        if (message.y !== undefined) {
            writer.uint32(32).uint32(message.y);
        }
        if (message.map !== undefined) {
            writer.uint32(42).string(message.map);
        }
        if (message.affiliation !== undefined) {
            writer.uint32(50).string(message.affiliation);
        }
        if (message.busy !== undefined) {
            writer.uint32(56).bool(message.busy);
        }
        if (message.textStatus !== undefined) {
            writer.uint32(66).string(message.textStatus);
        }
        if (message.emojiStatus !== undefined) {
            writer.uint32(74).string(message.emojiStatus);
        }
        if (message.currentlyEquippedWearables !== undefined) {
            exports.DBOutfit.encode(message.currentlyEquippedWearables, writer.uint32(82).fork()).ldelim();
        }
        if (message.focusModeEndTime !== undefined) {
            writer.uint32(90).string(message.focusModeEndTime);
        }
        if (message.currentDesk !== undefined) {
            writer.uint32(106).string(message.currentDesk);
        }
        if (message.itemString !== undefined) {
            writer.uint32(114).string(message.itemString);
        }
        if (message.isNpc !== undefined) {
            writer.uint32(120).bool(message.isNpc);
        }
        if (message.inventory !== undefined) {
            exports.Inventory.encode(message.inventory, writer.uint32(130).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpaceUserInfo);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.avatar = reader.uint32();
                    break;
                case 3:
                    message.x = reader.uint32();
                    break;
                case 4:
                    message.y = reader.uint32();
                    break;
                case 5:
                    message.map = reader.string();
                    break;
                case 6:
                    message.affiliation = reader.string();
                    break;
                case 7:
                    message.busy = reader.bool();
                    break;
                case 8:
                    message.textStatus = reader.string();
                    break;
                case 9:
                    message.emojiStatus = reader.string();
                    break;
                case 10:
                    message.currentlyEquippedWearables = exports.DBOutfit.decode(reader, reader.uint32());
                    break;
                case 11:
                    message.focusModeEndTime = reader.string();
                    break;
                case 13:
                    message.currentDesk = reader.string();
                    break;
                case 14:
                    message.itemString = reader.string();
                    break;
                case 15:
                    message.isNpc = reader.bool();
                    break;
                case 16:
                    message.inventory = exports.Inventory.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseDBOutfit = {
    skin: "",
    hair: "",
    facial_hair: "",
    top: "",
    bottom: "",
    shoes: "",
    hat: "",
    glasses: "",
    other: ""
};
exports.DBOutfit = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.skin !== "") {
            writer.uint32(10).string(message.skin);
        }
        if (message.hair !== "") {
            writer.uint32(18).string(message.hair);
        }
        if (message.facial_hair !== "") {
            writer.uint32(26).string(message.facial_hair);
        }
        if (message.top !== "") {
            writer.uint32(34).string(message.top);
        }
        if (message.bottom !== "") {
            writer.uint32(42).string(message.bottom);
        }
        if (message.shoes !== "") {
            writer.uint32(50).string(message.shoes);
        }
        if (message.hat !== "") {
            writer.uint32(58).string(message.hat);
        }
        if (message.glasses !== "") {
            writer.uint32(66).string(message.glasses);
        }
        if (message.other !== "") {
            writer.uint32(74).string(message.other);
        }
        if (message.costume !== undefined) {
            writer.uint32(82).string(message.costume);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseDBOutfit);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.skin = reader.string();
                    break;
                case 2:
                    message.hair = reader.string();
                    break;
                case 3:
                    message.facial_hair = reader.string();
                    break;
                case 4:
                    message.top = reader.string();
                    break;
                case 5:
                    message.bottom = reader.string();
                    break;
                case 6:
                    message.shoes = reader.string();
                    break;
                case 7:
                    message.hat = reader.string();
                    break;
                case 8:
                    message.glasses = reader.string();
                    break;
                case 9:
                    message.other = reader.string();
                    break;
                case 10:
                    message.costume = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseWireObjectSpritesheetFraming = { frameWidth: 0, frameHeight: 0 };
exports.WireObjectSpritesheetFraming = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.frameWidth !== 0) {
            writer.uint32(8).int32(message.frameWidth);
        }
        if (message.frameHeight !== 0) {
            writer.uint32(16).int32(message.frameHeight);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseWireObjectSpritesheetFraming);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.frameWidth = reader.int32();
                    break;
                case 2:
                    message.frameHeight = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseWireObjectSpriteAnimConfig = { sequence: 0, frameRate: 0 };
exports.WireObjectSpriteAnimConfig = {
    encode: function (message, writer) {
        var e_1, _a;
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.useSequenceAsRange !== undefined) {
            writer.uint32(8).bool(message.useSequenceAsRange);
        }
        writer.uint32(18).fork();
        try {
            for (var _b = __values(message.sequence), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                writer.uint32(v);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        writer.ldelim();
        if (message.loop !== undefined) {
            writer.uint32(24).bool(message.loop);
        }
        if (message.frameRate !== 0) {
            writer.uint32(32).uint32(message.frameRate);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseWireObjectSpriteAnimConfig);
        message.sequence = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.useSequenceAsRange = reader.bool();
                    break;
                case 2:
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.sequence.push(reader.uint32());
                        }
                    }
                    else {
                        message.sequence.push(reader.uint32());
                    }
                    break;
                case 3:
                    message.loop = reader.bool();
                    break;
                case 4:
                    message.frameRate = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseWireObjectSpritesheet = { spritesheetUrl: "" };
exports.WireObjectSpritesheet = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.spritesheetUrl !== "") {
            writer.uint32(10).string(message.spritesheetUrl);
        }
        if (message.framing !== undefined) {
            exports.WireObjectSpritesheetFraming.encode(message.framing, writer.uint32(18).fork()).ldelim();
        }
        Object.entries(message.animations).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            exports.WireObjectSpritesheet_AnimationsEntry.encode({ key: key, value: value }, writer.uint32(26).fork()).ldelim();
        });
        if (message.currentAnim !== undefined) {
            writer.uint32(34).string(message.currentAnim);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseWireObjectSpritesheet);
        message.animations = {};
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.spritesheetUrl = reader.string();
                    break;
                case 2:
                    message.framing = exports.WireObjectSpritesheetFraming.decode(reader, reader.uint32());
                    break;
                case 3:
                    var entry3 = exports.WireObjectSpritesheet_AnimationsEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.animations[entry3.key] = entry3.value;
                    }
                    break;
                case 4:
                    message.currentAnim = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseWireObjectSpritesheet_AnimationsEntry = { key: "" };
exports.WireObjectSpritesheet_AnimationsEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.WireObjectSpriteAnimConfig.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseWireObjectSpritesheet_AnimationsEntry);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = exports.WireObjectSpriteAnimConfig.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseWireObject = { _tags: "" };
exports.WireObject = {
    encode: function (message, writer) {
        var e_2, _a;
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.templateId !== undefined) {
            writer.uint32(10).string(message.templateId);
        }
        if (message._name !== undefined) {
            writer.uint32(18).string(message._name);
        }
        try {
            for (var _b = __values(message._tags), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                writer.uint32(26).string(v);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (message.x !== undefined) {
            writer.uint32(32).uint32(message.x);
        }
        if (message.y !== undefined) {
            writer.uint32(40).uint32(message.y);
        }
        if (message.offsetX !== undefined) {
            writer.uint32(53).float(message.offsetX);
        }
        if (message.offsetY !== undefined) {
            writer.uint32(61).float(message.offsetY);
        }
        if (message.color !== undefined) {
            writer.uint32(66).string(message.color);
        }
        if (message.orientation !== undefined) {
            writer.uint32(72).uint32(message.orientation);
        }
        if (message.normal !== undefined) {
            writer.uint32(82).string(message.normal);
        }
        if (message.highlighted !== undefined) {
            writer.uint32(90).string(message.highlighted);
        }
        if (message.type !== undefined) {
            writer.uint32(96).int32(message.type);
        }
        if (message.width !== undefined) {
            writer.uint32(104).uint32(message.width);
        }
        if (message.height !== undefined) {
            writer.uint32(112).uint32(message.height);
        }
        if (message.extensionClass !== undefined) {
            writer.uint32(122).string(message.extensionClass);
        }
        if (message.previewMessage !== undefined) {
            writer.uint32(130).string(message.previewMessage);
        }
        if (message.distThreshold !== undefined) {
            writer.uint32(136).uint32(message.distThreshold);
        }
        if (message.propertiesJson !== undefined) {
            writer.uint32(146).string(message.propertiesJson);
        }
        if (message.sound !== undefined) {
            exports.Sound.encode(message.sound, writer.uint32(154).fork()).ldelim();
        }
        if (message.objectStartTime !== undefined) {
            exports.ObjectTime.encode(message.objectStartTime, writer.uint32(162).fork()).ldelim();
        }
        if (message.objectExpireTime !== undefined) {
            exports.ObjectTime.encode(message.objectExpireTime, writer.uint32(170).fork()).ldelim();
        }
        if (message.id !== undefined) {
            writer.uint32(178).string(message.id);
        }
        if (message.customState !== undefined) {
            writer.uint32(186).string(message.customState);
        }
        if (message.objectPlacerId !== undefined) {
            writer.uint32(194).string(message.objectPlacerId);
        }
        if (message.numGoKarts !== undefined) {
            writer.uint32(200).uint32(message.numGoKarts);
        }
        if (message.spritesheet !== undefined) {
            exports.WireObjectSpritesheet.encode(message.spritesheet, writer.uint32(210).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseWireObject);
        message._tags = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.templateId = reader.string();
                    break;
                case 2:
                    message._name = reader.string();
                    break;
                case 3:
                    message._tags.push(reader.string());
                    break;
                case 4:
                    message.x = reader.uint32();
                    break;
                case 5:
                    message.y = reader.uint32();
                    break;
                case 6:
                    message.offsetX = reader.float();
                    break;
                case 7:
                    message.offsetY = reader.float();
                    break;
                case 8:
                    message.color = reader.string();
                    break;
                case 9:
                    message.orientation = reader.uint32();
                    break;
                case 10:
                    message.normal = reader.string();
                    break;
                case 11:
                    message.highlighted = reader.string();
                    break;
                case 12:
                    message.type = reader.int32();
                    break;
                case 13:
                    message.width = reader.uint32();
                    break;
                case 14:
                    message.height = reader.uint32();
                    break;
                case 15:
                    message.extensionClass = reader.string();
                    break;
                case 16:
                    message.previewMessage = reader.string();
                    break;
                case 17:
                    message.distThreshold = reader.uint32();
                    break;
                case 18:
                    message.propertiesJson = reader.string();
                    break;
                case 19:
                    message.sound = exports.Sound.decode(reader, reader.uint32());
                    break;
                case 20:
                    message.objectStartTime = exports.ObjectTime.decode(reader, reader.uint32());
                    break;
                case 21:
                    message.objectExpireTime = exports.ObjectTime.decode(reader, reader.uint32());
                    break;
                case 22:
                    message.id = reader.string();
                    break;
                case 23:
                    message.customState = reader.string();
                    break;
                case 24:
                    message.objectPlacerId = reader.string();
                    break;
                case 25:
                    message.numGoKarts = reader.uint32();
                    break;
                case 26:
                    message.spritesheet = exports.WireObjectSpritesheet.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSpaceMemberInfo = {};
exports.SpaceMemberInfo = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        Object.entries(message.roles).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            exports.SpaceMemberInfo_RolesEntry.encode({ key: key, value: value }, writer.uint32(10).fork()).ldelim();
        });
        if (message.name !== undefined) {
            writer.uint32(18).string(message.name);
        }
        if (message.avatar !== undefined) {
            writer.uint32(24).uint32(message.avatar);
        }
        if (message.currentlyEquippedWearables !== undefined) {
            exports.DBOutfit.encode(message.currentlyEquippedWearables, writer.uint32(34).fork()).ldelim();
        }
        if (message.deskInfo !== undefined) {
            exports.DeskInfo.encode(message.deskInfo, writer.uint32(42).fork()).ldelim();
        }
        if (message.allowScreenPointer !== undefined) {
            writer.uint32(48).bool(message.allowScreenPointer);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpaceMemberInfo);
        message.roles = {};
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    var entry1 = exports.SpaceMemberInfo_RolesEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.roles[entry1.key] = entry1.value;
                    }
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.avatar = reader.uint32();
                    break;
                case 4:
                    message.currentlyEquippedWearables = exports.DBOutfit.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.deskInfo = exports.DeskInfo.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.allowScreenPointer = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSpaceMemberInfo_RolesEntry = { key: "", value: false };
exports.SpaceMemberInfo_RolesEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value === true) {
            writer.uint32(16).bool(message.value);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpaceMemberInfo_RolesEntry);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseDeskInfo = { deskId: "" };
exports.DeskInfo = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.deskId !== "") {
            writer.uint32(10).string(message.deskId);
        }
        if (message.description !== undefined) {
            writer.uint32(18).string(message.description);
        }
        if (message.locked !== undefined) {
            writer.uint32(24).bool(message.locked);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseDeskInfo);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.deskId = reader.string();
                    break;
                case 2:
                    message.description = reader.string();
                    break;
                case 3:
                    message.locked = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSound = { src: "", volume: 0, loop: false, maxDistance: 0 };
exports.Sound = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.src !== "") {
            writer.uint32(10).string(message.src);
        }
        if (message.volume !== 0) {
            writer.uint32(21).float(message.volume);
        }
        if (message.loop === true) {
            writer.uint32(24).bool(message.loop);
        }
        if (message.maxDistance !== 0) {
            writer.uint32(32).uint32(message.maxDistance);
        }
        if (message.isPositional !== undefined) {
            writer.uint32(40).bool(message.isPositional);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSound);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.src = reader.string();
                    break;
                case 2:
                    message.volume = reader.float();
                    break;
                case 3:
                    message.loop = reader.bool();
                    break;
                case 4:
                    message.maxDistance = reader.uint32();
                    break;
                case 5:
                    message.isPositional = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseObjectTime = { _seconds: 0 };
exports.ObjectTime = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message._seconds !== 0) {
            writer.uint32(8).uint32(message._seconds);
        }
        if (message._timezone !== undefined) {
            writer.uint32(18).string(message._timezone);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseObjectTime);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message._seconds = reader.uint32();
                    break;
                case 2:
                    message._timezone = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSpace = { spaceId: "", x: 0, y: 0 };
exports.Space = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.spaceId !== "") {
            writer.uint32(10).string(message.spaceId);
        }
        if (message.x !== 0) {
            writer.uint32(16).uint32(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(24).uint32(message.y);
        }
        if (message.colored !== undefined) {
            writer.uint32(32).bool(message.colored);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpace);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.spaceId = reader.string();
                    break;
                case 2:
                    message.x = reader.uint32();
                    break;
                case 3:
                    message.y = reader.uint32();
                    break;
                case 4:
                    message.colored = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePoint = { x: 0, y: 0 };
exports.Point = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.x !== 0) {
            writer.uint32(8).uint32(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(16).uint32(message.y);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePoint);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.x = reader.uint32();
                    break;
                case 2:
                    message.y = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSpawnPoint = { x: 0, y: 0 };
exports.SpawnPoint = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.x !== 0) {
            writer.uint32(8).uint32(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(16).uint32(message.y);
        }
        if (message.spawnId !== undefined) {
            writer.uint32(26).string(message.spawnId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpawnPoint);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.x = reader.uint32();
                    break;
                case 2:
                    message.y = reader.uint32();
                    break;
                case 3:
                    message.spawnId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePortal = { x: 0, y: 0 };
exports.Portal = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.x !== 0) {
            writer.uint32(8).uint32(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(16).uint32(message.y);
        }
        if (message.targetMap !== undefined) {
            writer.uint32(26).string(message.targetMap);
        }
        if (message.targetUrl !== undefined) {
            writer.uint32(34).string(message.targetUrl);
        }
        if (message.targetX !== undefined) {
            writer.uint32(40).uint32(message.targetX);
        }
        if (message.targetY !== undefined) {
            writer.uint32(48).uint32(message.targetY);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePortal);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.x = reader.uint32();
                    break;
                case 2:
                    message.y = reader.uint32();
                    break;
                case 3:
                    message.targetMap = reader.string();
                    break;
                case 4:
                    message.targetUrl = reader.string();
                    break;
                case 5:
                    message.targetX = reader.uint32();
                    break;
                case 6:
                    message.targetY = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseAnnouncer = { x: 0, y: 0 };
exports.Announcer = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.x !== 0) {
            writer.uint32(8).uint32(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(16).uint32(message.y);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseAnnouncer);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.x = reader.uint32();
                    break;
                case 2:
                    message.y = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseAsset = { x: 0, y: 0, src: "" };
exports.Asset = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.x !== 0) {
            writer.uint32(13).float(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(21).float(message.y);
        }
        if (message.src !== "") {
            writer.uint32(26).string(message.src);
        }
        if (message.width !== undefined) {
            writer.uint32(32).uint32(message.width);
        }
        if (message.height !== undefined) {
            writer.uint32(40).uint32(message.height);
        }
        if (message.inFront !== undefined) {
            writer.uint32(48).bool(message.inFront);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseAsset);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.x = reader.float();
                    break;
                case 2:
                    message.y = reader.float();
                    break;
                case 3:
                    message.src = reader.string();
                    break;
                case 4:
                    message.width = reader.uint32();
                    break;
                case 5:
                    message.height = reader.uint32();
                    break;
                case 6:
                    message.inFront = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseAreaPosition = { x1: 0, y1: 0, x2: 0, y2: 0 };
exports.AreaPosition = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.x1 !== 0) {
            writer.uint32(8).uint32(message.x1);
        }
        if (message.y1 !== 0) {
            writer.uint32(16).uint32(message.y1);
        }
        if (message.x2 !== 0) {
            writer.uint32(24).uint32(message.x2);
        }
        if (message.y2 !== 0) {
            writer.uint32(32).uint32(message.y2);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseAreaPosition);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.x1 = reader.uint32();
                    break;
                case 2:
                    message.y1 = reader.uint32();
                    break;
                case 3:
                    message.x2 = reader.uint32();
                    break;
                case 4:
                    message.y2 = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseWireArea = {};
exports.WireArea = {
    encode: function (message, writer) {
        var e_3, _a;
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.category !== undefined) {
            writer.uint32(10).string(message.category);
        }
        try {
            for (var _b = __values(message.coords), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.AreaPosition.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseWireArea);
        message.coords = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.category = reader.string();
                    break;
                case 2:
                    message.coords.push(exports.AreaPosition.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseDBDesk = {};
exports.DBDesk = {
    encode: function (message, writer) {
        var e_4, _a;
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        try {
            for (var _b = __values(message.coords), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.AreaPosition.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseDBDesk);
        message.coords = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.coords.push(exports.AreaPosition.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetDimensions = { mapId: "", width: 0, height: 0 };
exports.MapSetDimensions = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.width !== 0) {
            writer.uint32(16).uint32(message.width);
        }
        if (message.height !== 0) {
            writer.uint32(24).uint32(message.height);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetDimensions);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.width = reader.uint32();
                    break;
                case 3:
                    message.height = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetCollisions = { mapId: "", x: 0, y: 0, w: 0, h: 0, mask: "" };
exports.MapSetCollisions = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.x !== 0) {
            writer.uint32(16).uint32(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(24).uint32(message.y);
        }
        if (message.w !== 0) {
            writer.uint32(32).uint32(message.w);
        }
        if (message.h !== 0) {
            writer.uint32(40).uint32(message.h);
        }
        if (message.mask !== "") {
            writer.uint32(50).string(message.mask);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetCollisions);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.x = reader.uint32();
                    break;
                case 3:
                    message.y = reader.uint32();
                    break;
                case 4:
                    message.w = reader.uint32();
                    break;
                case 5:
                    message.h = reader.uint32();
                    break;
                case 6:
                    message.mask = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetBackgroundImagePath = { mapId: "", backgroundImagePath: "" };
exports.MapSetBackgroundImagePath = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.backgroundImagePath !== "") {
            writer.uint32(18).string(message.backgroundImagePath);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetBackgroundImagePath);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.backgroundImagePath = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetForegroundImagePath = { mapId: "", foregroundImagePath: "" };
exports.MapSetForegroundImagePath = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.foregroundImagePath !== "") {
            writer.uint32(18).string(message.foregroundImagePath);
        }
        if (message["delete"] !== undefined) {
            writer.uint32(24).bool(message["delete"]);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetForegroundImagePath);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.foregroundImagePath = reader.string();
                    break;
                case 3:
                    message["delete"] = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetSprites = { mapId: "", sprites: 0 };
exports.MapSetSprites = {
    encode: function (message, writer) {
        var e_5, _a;
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        writer.uint32(18).fork();
        try {
            for (var _b = __values(message.sprites), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                writer.uint32(v);
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            }
            finally { if (e_5) throw e_5.error; }
        }
        writer.ldelim();
        if (message["delete"] !== undefined) {
            writer.uint32(24).bool(message["delete"]);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetSprites);
        message.sprites = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.sprites.push(reader.uint32());
                        }
                    }
                    else {
                        message.sprites.push(reader.uint32());
                    }
                    break;
                case 3:
                    message["delete"] = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetSpaces = { mapId: "" };
exports.MapSetSpaces = {
    encode: function (message, writer) {
        var e_6, _a;
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        try {
            for (var _b = __values(message.spaces), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.Space.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            }
            finally { if (e_6) throw e_6.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetSpaces);
        message.spaces = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.spaces.push(exports.Space.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetSpawn = { mapId: "" };
exports.MapSetSpawn = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.spawn !== undefined) {
            exports.Point.encode(message.spawn, writer.uint32(18).fork()).ldelim();
        }
        if (message["delete"] !== undefined) {
            writer.uint32(24).bool(message["delete"]);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetSpawn);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.spawn = exports.Point.decode(reader, reader.uint32());
                    break;
                case 3:
                    message["delete"] = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetSpawns = { mapId: "" };
exports.MapSetSpawns = {
    encode: function (message, writer) {
        var e_7, _a;
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        try {
            for (var _b = __values(message.spawns), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.SpawnPoint.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            }
            finally { if (e_7) throw e_7.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetSpawns);
        message.spawns = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.spawns.push(exports.SpawnPoint.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetPortals = { mapId: "" };
exports.MapSetPortals = {
    encode: function (message, writer) {
        var e_8, _a;
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        try {
            for (var _b = __values(message.portals), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.Portal.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            }
            finally { if (e_8) throw e_8.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetPortals);
        message.portals = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.portals.push(exports.Portal.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetAnnouncer = { mapId: "" };
exports.MapSetAnnouncer = {
    encode: function (message, writer) {
        var e_9, _a;
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        try {
            for (var _b = __values(message.announcer), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.Announcer.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            }
            finally { if (e_9) throw e_9.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetAnnouncer);
        message.announcer = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.announcer.push(exports.Announcer.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetAssets = { mapId: "" };
exports.MapSetAssets = {
    encode: function (message, writer) {
        var e_10, _a;
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        try {
            for (var _b = __values(message.assets), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.Asset.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_10_1) { e_10 = { error: e_10_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            }
            finally { if (e_10) throw e_10.error; }
        }
        if (message["delete"] !== undefined) {
            writer.uint32(24).bool(message["delete"]);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetAssets);
        message.assets = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.assets.push(exports.Asset.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message["delete"] = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetObjects = { mapId: "" };
exports.MapSetObjects = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        Object.entries(message.objects).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            exports.MapSetObjects_ObjectsEntry.encode({ key: key, value: value }, writer.uint32(18).fork()).ldelim();
        });
        if (message.updatesAreOverwrites !== undefined) {
            writer.uint32(24).bool(message.updatesAreOverwrites);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetObjects);
        message.objects = {};
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    var entry2 = exports.MapSetObjects_ObjectsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.objects[entry2.key] = entry2.value;
                    }
                    break;
                case 3:
                    message.updatesAreOverwrites = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetObjects_ObjectsEntry = { key: 0 };
exports.MapSetObjects_ObjectsEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== 0) {
            writer.uint32(8).uint32(message.key);
        }
        if (message.value !== undefined) {
            exports.WireObject.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetObjects_ObjectsEntry);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.uint32();
                    break;
                case 2:
                    message.value = exports.WireObject.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetName = { mapId: "", name: "" };
exports.MapSetName = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message["delete"] !== undefined) {
            writer.uint32(24).bool(message["delete"]);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetName);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message["delete"] = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetMuteOnEntry = { mapId: "", muteOnEntry: false };
exports.MapSetMuteOnEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.muteOnEntry === true) {
            writer.uint32(16).bool(message.muteOnEntry);
        }
        if (message["delete"] !== undefined) {
            writer.uint32(24).bool(message["delete"]);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetMuteOnEntry);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.muteOnEntry = reader.bool();
                    break;
                case 3:
                    message["delete"] = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetUseDrawnBG = { mapId: "", useDrawnBG: false };
exports.MapSetUseDrawnBG = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.useDrawnBG === true) {
            writer.uint32(16).bool(message.useDrawnBG);
        }
        if (message["delete"] !== undefined) {
            writer.uint32(24).bool(message["delete"]);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetUseDrawnBG);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.useDrawnBG = reader.bool();
                    break;
                case 3:
                    message["delete"] = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetWalls = { mapId: "" };
exports.MapSetWalls = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        Object.entries(message.walls).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            exports.MapSetWalls_WallsEntry.encode({ key: key, value: value }, writer.uint32(18).fork()).ldelim();
        });
        if (message["delete"] !== undefined) {
            writer.uint32(24).bool(message["delete"]);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetWalls);
        message.walls = {};
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    var entry2 = exports.MapSetWalls_WallsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.walls[entry2.key] = entry2.value;
                    }
                    break;
                case 3:
                    message["delete"] = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetWalls_WallsEntry = { key: "", value: "" };
exports.MapSetWalls_WallsEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetWalls_WallsEntry);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetFloors = { mapId: "" };
exports.MapSetFloors = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        Object.entries(message.floors).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            exports.MapSetFloors_FloorsEntry.encode({ key: key, value: value }, writer.uint32(18).fork()).ldelim();
        });
        if (message["delete"] !== undefined) {
            writer.uint32(24).bool(message["delete"]);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetFloors);
        message.floors = {};
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    var entry2 = exports.MapSetFloors_FloorsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.floors[entry2.key] = entry2.value;
                    }
                    break;
                case 3:
                    message["delete"] = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetFloors_FloorsEntry = { key: "", value: "" };
exports.MapSetFloors_FloorsEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetFloors_FloorsEntry);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetAreas = { mapId: "" };
exports.MapSetAreas = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        Object.entries(message.areas).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            exports.MapSetAreas_AreasEntry.encode({ key: key, value: value }, writer.uint32(18).fork()).ldelim();
        });
        if (message["delete"] !== undefined) {
            writer.uint32(24).bool(message["delete"]);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetAreas);
        message.areas = {};
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    var entry2 = exports.MapSetAreas_AreasEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.areas[entry2.key] = entry2.value;
                    }
                    break;
                case 3:
                    message["delete"] = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetAreas_AreasEntry = { key: "" };
exports.MapSetAreas_AreasEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.WireArea.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetAreas_AreasEntry);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = exports.WireArea.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapDeleteObject = { mapId: "", key: 0 };
exports.MapDeleteObject = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.key !== 0) {
            writer.uint32(16).uint32(message.key);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapDeleteObject);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.key = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapDeleteObjectById = { mapId: "", id: "" };
exports.MapDeleteObjectById = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapDeleteObjectById);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetMiniMapImagePath = { mapId: "", miniMapImagePath: "" };
exports.MapSetMiniMapImagePath = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.miniMapImagePath !== "") {
            writer.uint32(18).string(message.miniMapImagePath);
        }
        if (message["delete"] !== undefined) {
            writer.uint32(24).bool(message["delete"]);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetMiniMapImagePath);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.miniMapImagePath = reader.string();
                    break;
                case 3:
                    message["delete"] = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetEnabledChats = { mapId: "", enabledChats: "" };
exports.MapSetEnabledChats = {
    encode: function (message, writer) {
        var e_11, _a;
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        try {
            for (var _b = __values(message.enabledChats), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                writer.uint32(18).string(v);
            }
        }
        catch (e_11_1) { e_11 = { error: e_11_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            }
            finally { if (e_11) throw e_11.error; }
        }
        if (message["delete"] !== undefined) {
            writer.uint32(24).bool(message["delete"]);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetEnabledChats);
        message.enabledChats = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.enabledChats.push(reader.string());
                    break;
                case 3:
                    message["delete"] = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetDescription = { mapId: "", description: "" };
exports.MapSetDescription = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message["delete"] !== undefined) {
            writer.uint32(24).bool(message["delete"]);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetDescription);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.description = reader.string();
                    break;
                case 3:
                    message["delete"] = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetDecoration = { mapId: "", decoration: "" };
exports.MapSetDecoration = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.decoration !== "") {
            writer.uint32(18).string(message.decoration);
        }
        if (message["delete"] !== undefined) {
            writer.uint32(24).bool(message["delete"]);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetDecoration);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.decoration = reader.string();
                    break;
                case 3:
                    message["delete"] = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetTutorialTasks = { mapId: "" };
exports.MapSetTutorialTasks = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.tutorialTasks !== undefined) {
            exports.WireTutorialTasks.encode(message.tutorialTasks, writer.uint32(18).fork()).ldelim();
        }
        if (message["delete"] !== undefined) {
            writer.uint32(24).bool(message["delete"]);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetTutorialTasks);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.tutorialTasks = exports.WireTutorialTasks.decode(reader, reader.uint32());
                    break;
                case 3:
                    message["delete"] = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetDesks = { mapId: "" };
exports.MapSetDesks = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        Object.entries(message.desks).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            exports.MapSetDesks_DesksEntry.encode({ key: key, value: value }, writer.uint32(18).fork()).ldelim();
        });
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetDesks);
        message.desks = {};
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    var entry2 = exports.MapSetDesks_DesksEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.desks[entry2.key] = entry2.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetDesks_DesksEntry = { key: "" };
exports.MapSetDesks_DesksEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.DBDesk.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetDesks_DesksEntry);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = exports.DBDesk.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseWireTutorialTasks = { groupSetId: "" };
exports.WireTutorialTasks = {
    encode: function (message, writer) {
        var e_12, _a;
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.groupSetId !== "") {
            writer.uint32(10).string(message.groupSetId);
        }
        try {
            for (var _b = __values(message.areas), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.TutorialTaskMapArea.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_12_1) { e_12 = { error: e_12_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            }
            finally { if (e_12) throw e_12.error; }
        }
        if (message.autoStart !== undefined) {
            writer.uint32(24).bool(message.autoStart);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseWireTutorialTasks);
        message.areas = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.groupSetId = reader.string();
                    break;
                case 2:
                    message.areas.push(exports.TutorialTaskMapArea.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.autoStart = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseTutorialTaskMapArea = { areaId: "", x: 0, y: 0, height: 0, width: 0 };
exports.TutorialTaskMapArea = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.areaId !== "") {
            writer.uint32(10).string(message.areaId);
        }
        if (message.x !== 0) {
            writer.uint32(16).uint32(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(24).uint32(message.y);
        }
        if (message.height !== 0) {
            writer.uint32(32).uint32(message.height);
        }
        if (message.width !== 0) {
            writer.uint32(40).uint32(message.width);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseTutorialTaskMapArea);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.areaId = reader.string();
                    break;
                case 2:
                    message.x = reader.uint32();
                    break;
                case 3:
                    message.y = reader.uint32();
                    break;
                case 4:
                    message.height = reader.uint32();
                    break;
                case 5:
                    message.width = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapSetScript = { mapId: "", script: "" };
exports.MapSetScript = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.script !== "") {
            writer.uint32(18).string(message.script);
        }
        if (message["delete"] !== undefined) {
            writer.uint32(24).bool(message["delete"]);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapSetScript);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.script = reader.string();
                    break;
                case 3:
                    message["delete"] = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseInventory = {};
exports.Inventory = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        Object.entries(message.items).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            exports.Inventory_ItemsEntry.encode({ key: key, value: value }, writer.uint32(10).fork()).ldelim();
        });
        Object.entries(message.order).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            exports.Inventory_OrderEntry.encode({ key: key, value: value }, writer.uint32(18).fork()).ldelim();
        });
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseInventory);
        message.items = {};
        message.order = {};
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    var entry1 = exports.Inventory_ItemsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.items[entry1.key] = entry1.value;
                    }
                    break;
                case 2:
                    var entry2 = exports.Inventory_OrderEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.order[entry2.key] = entry2.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseInventory_ItemsEntry = { key: "" };
exports.Inventory_ItemsEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.InventoryItem.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseInventory_ItemsEntry);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = exports.InventoryItem.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseInventory_OrderEntry = { key: "", value: "" };
exports.Inventory_OrderEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseInventory_OrderEntry);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseInventoryItem = { count: 0 };
exports.InventoryItem = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.count !== 0) {
            writer.uint32(8).uint32(message.count);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseInventoryItem);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.count = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSpaceItem = { name: "", previewUrl: "" };
exports.SpaceItem = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.category !== undefined) {
            writer.uint32(18).string(message.category);
        }
        if (message.description !== undefined) {
            writer.uint32(26).string(message.description);
        }
        if (message.previewUrl !== "") {
            writer.uint32(34).string(message.previewUrl);
        }
        Object.entries(message.meta).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            exports.SpaceItem_MetaEntry.encode({ key: key, value: value }, writer.uint32(42).fork()).ldelim();
        });
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpaceItem);
        message.meta = {};
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.category = reader.string();
                    break;
                case 3:
                    message.description = reader.string();
                    break;
                case 4:
                    message.previewUrl = reader.string();
                    break;
                case 5:
                    var entry5 = exports.SpaceItem_MetaEntry.decode(reader, reader.uint32());
                    if (entry5.value !== undefined) {
                        message.meta[entry5.key] = entry5.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSpaceItem_MetaEntry = { key: "", value: "" };
exports.SpaceItem_MetaEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpaceItem_MetaEntry);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseServerClientBatch = {};
exports.ServerClientBatch = {
    encode: function (message, writer) {
        var e_13, _a;
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        try {
            for (var _b = __values(message.events), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.ServerClientEvent.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_13_1) { e_13 = { error: e_13_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            }
            finally { if (e_13) throw e_13.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseServerClientBatch);
        message.events = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.events.push(exports.ServerClientEvent.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseServerClientEvent = {};
exports.ServerClientEvent = {
    encode: function (message, writer) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74;
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (((_a = message.event) === null || _a === void 0 ? void 0 : _a.$case) === "info") {
            exports.Info.encode(message.event.info, writer.uint32(802).fork()).ldelim();
        }
        if (((_b = message.event) === null || _b === void 0 ? void 0 : _b.$case) === "warn") {
            exports.Warn.encode(message.event.warn, writer.uint32(810).fork()).ldelim();
        }
        if (((_c = message.event) === null || _c === void 0 ? void 0 : _c.$case) === "error") {
            exports.ErrorEvent.encode(message.event.error, writer.uint32(818).fork()).ldelim();
        }
        if (((_d = message.event) === null || _d === void 0 ? void 0 : _d.$case) === "ready") {
            exports.Ready.encode(message.event.ready, writer.uint32(826).fork()).ldelim();
        }
        if (((_e = message.event) === null || _e === void 0 ? void 0 : _e.$case) === "serverHeartbeat") {
            exports.ServerHeartbeat.encode(message.event.serverHeartbeat, writer.uint32(842).fork()).ldelim();
        }
        if (((_f = message.event) === null || _f === void 0 ? void 0 : _f.$case) === "transactionStatus") {
            exports.TransactionStatus.encode(message.event.transactionStatus, writer.uint32(858).fork()).ldelim();
        }
        if (((_g = message.event) === null || _g === void 0 ? void 0 : _g.$case) === "playerMoves") {
            exports.PlayerMoves.encode(message.event.playerMoves, writer.uint32(10).fork()).ldelim();
        }
        if (((_h = message.event) === null || _h === void 0 ? void 0 : _h.$case) === "playerSetsStatus") {
            exports.PlayerSetsStatus.encode(message.event.playerSetsStatus, writer.uint32(42).fork()).ldelim();
        }
        if (((_j = message.event) === null || _j === void 0 ? void 0 : _j.$case) === "playerSpotlights") {
            exports.PlayerSpotlights.encode(message.event.playerSpotlights, writer.uint32(50).fork()).ldelim();
        }
        if (((_k = message.event) === null || _k === void 0 ? void 0 : _k.$case) === "playerRings") {
            exports.PlayerRings.encode(message.event.playerRings, writer.uint32(58).fork()).ldelim();
        }
        if (((_l = message.event) === null || _l === void 0 ? void 0 : _l.$case) === "playerChats") {
            exports.PlayerChats.encode(message.event.playerChats, writer.uint32(74).fork()).ldelim();
        }
        if (((_m = message.event) === null || _m === void 0 ? void 0 : _m.$case) === "playerInteracts") {
            exports.PlayerInteracts.encode(message.event.playerInteracts, writer.uint32(82).fork()).ldelim();
        }
        if (((_o = message.event) === null || _o === void 0 ? void 0 : _o.$case) === "playerGhosts") {
            exports.PlayerGhosts.encode(message.event.playerGhosts, writer.uint32(90).fork()).ldelim();
        }
        if (((_p = message.event) === null || _p === void 0 ? void 0 : _p.$case) === "playerEntersWhisper") {
            exports.PlayerEntersWhisper.encode(message.event.playerEntersWhisper, writer.uint32(98).fork()).ldelim();
        }
        if (((_q = message.event) === null || _q === void 0 ? void 0 : _q.$case) === "playerLeavesWhisper") {
            exports.PlayerLeavesWhisper.encode(message.event.playerLeavesWhisper, writer.uint32(106).fork()).ldelim();
        }
        if (((_r = message.event) === null || _r === void 0 ? void 0 : _r.$case) === "playerActivelySpeaks") {
            exports.PlayerActivelySpeaks.encode(message.event.playerActivelySpeaks, writer.uint32(114).fork()).ldelim();
        }
        if (((_s = message.event) === null || _s === void 0 ? void 0 : _s.$case) === "playerSetsWorkCondition") {
            exports.PlayerSetsWorkCondition.encode(message.event.playerSetsWorkCondition, writer.uint32(130).fork()).ldelim();
        }
        if (((_t = message.event) === null || _t === void 0 ? void 0 : _t.$case) === "playerSetsName") {
            exports.PlayerSetsName.encode(message.event.playerSetsName, writer.uint32(138).fork()).ldelim();
        }
        if (((_u = message.event) === null || _u === void 0 ? void 0 : _u.$case) === "playerSetsTextStatus") {
            exports.PlayerSetsTextStatus.encode(message.event.playerSetsTextStatus, writer.uint32(146).fork()).ldelim();
        }
        if (((_v = message.event) === null || _v === void 0 ? void 0 : _v.$case) === "playerSetsEmojiStatus") {
            exports.PlayerSetsEmojiStatus.encode(message.event.playerSetsEmojiStatus, writer.uint32(154).fork()).ldelim();
        }
        if (((_w = message.event) === null || _w === void 0 ? void 0 : _w.$case) === "playerSetsAffiliation") {
            exports.PlayerSetsAffiliation.encode(message.event.playerSetsAffiliation, writer.uint32(162).fork()).ldelim();
        }
        if (((_x = message.event) === null || _x === void 0 ? void 0 : _x.$case) === "playerExits") {
            exports.PlayerExits.encode(message.event.playerExits, writer.uint32(170).fork()).ldelim();
        }
        if (((_y = message.event) === null || _y === void 0 ? void 0 : _y.$case) === "respawnComplete") {
            exports.RespawnComplete.encode(message.event.respawnComplete, writer.uint32(314).fork()).ldelim();
        }
        if (((_z = message.event) === null || _z === void 0 ? void 0 : _z.$case) === "playerSetsOutfitString") {
            exports.PlayerSetsOutfitString.encode(message.event.playerSetsOutfitString, writer.uint32(322).fork()).ldelim();
        }
        if (((_0 = message.event) === null || _0 === void 0 ? void 0 : _0.$case) === "playerSetsIsSignedIn") {
            exports.PlayerSetsIsSignedIn.encode(message.event.playerSetsIsSignedIn, writer.uint32(330).fork()).ldelim();
        }
        if (((_1 = message.event) === null || _1 === void 0 ? void 0 : _1.$case) === "spaceOverwrites") {
            exports.SpaceOverwrites.encode(message.event.spaceOverwrites, writer.uint32(354).fork()).ldelim();
        }
        if (((_2 = message.event) === null || _2 === void 0 ? void 0 : _2.$case) === "spaceIsClosed") {
            exports.SpaceIsClosed.encode(message.event.spaceIsClosed, writer.uint32(362).fork()).ldelim();
        }
        if (((_3 = message.event) === null || _3 === void 0 ? void 0 : _3.$case) === "playerEntersPortal") {
            exports.PlayerEntersPortal.encode(message.event.playerEntersPortal, writer.uint32(370).fork()).ldelim();
        }
        if (((_4 = message.event) === null || _4 === void 0 ? void 0 : _4.$case) === "spaceSetsIdMapping") {
            exports.SpaceSetsIdMapping.encode(message.event.spaceSetsIdMapping, writer.uint32(378).fork()).ldelim();
        }
        if (((_5 = message.event) === null || _5 === void 0 ? void 0 : _5.$case) === "playerSetsLastActive") {
            exports.PlayerSetsLastActive.encode(message.event.playerSetsLastActive, writer.uint32(386).fork()).ldelim();
        }
        if (((_6 = message.event) === null || _6 === void 0 ? void 0 : _6.$case) === "playerShootsConfetti") {
            exports.PlayerShootsConfetti.encode(message.event.playerShootsConfetti, writer.uint32(394).fork()).ldelim();
        }
        if (((_7 = message.event) === null || _7 === void 0 ? void 0 : _7.$case) === "playerSetsEventStatus") {
            exports.PlayerSetsEventStatus.encode(message.event.playerSetsEventStatus, writer.uint32(402).fork()).ldelim();
        }
        if (((_8 = message.event) === null || _8 === void 0 ? void 0 : _8.$case) === "playerSetsInConversation") {
            exports.PlayerSetsInConversation.encode(message.event.playerSetsInConversation, writer.uint32(410).fork()).ldelim();
        }
        if (((_9 = message.event) === null || _9 === void 0 ? void 0 : _9.$case) === "playerSetsCurrentDesk") {
            exports.PlayerSetsCurrentDesk.encode(message.event.playerSetsCurrentDesk, writer.uint32(418).fork()).ldelim();
        }
        if (((_10 = message.event) === null || _10 === void 0 ? void 0 : _10.$case) === "playerSetsCurrentArea") {
            exports.PlayerSetsCurrentArea.encode(message.event.playerSetsCurrentArea, writer.uint32(426).fork()).ldelim();
        }
        if (((_11 = message.event) === null || _11 === void 0 ? void 0 : _11.$case) === "playerSetsImagePointer") {
            exports.PlayerSetsImagePointer.encode(message.event.playerSetsImagePointer, writer.uint32(434).fork()).ldelim();
        }
        if (((_12 = message.event) === null || _12 === void 0 ? void 0 : _12.$case) === "cookieFound") {
            exports.CookieFound.encode(message.event.cookieFound, writer.uint32(442).fork()).ldelim();
        }
        if (((_13 = message.event) === null || _13 === void 0 ? void 0 : _13.$case) === "playerEntersWhisperV2") {
            exports.PlayerEntersWhisperV2.encode(message.event.playerEntersWhisperV2, writer.uint32(450).fork()).ldelim();
        }
        if (((_14 = message.event) === null || _14 === void 0 ? void 0 : _14.$case) === "playerSetsGoKartId") {
            exports.PlayerSetsGoKartId.encode(message.event.playerSetsGoKartId, writer.uint32(458).fork()).ldelim();
        }
        if (((_15 = message.event) === null || _15 === void 0 ? void 0 : _15.$case) === "mapSetDimensions") {
            exports.MapSetDimensions.encode(message.event.mapSetDimensions, writer.uint32(466).fork()).ldelim();
        }
        if (((_16 = message.event) === null || _16 === void 0 ? void 0 : _16.$case) === "mapSetCollisions") {
            exports.MapSetCollisions.encode(message.event.mapSetCollisions, writer.uint32(474).fork()).ldelim();
        }
        if (((_17 = message.event) === null || _17 === void 0 ? void 0 : _17.$case) === "mapSetBackgroundImagePath") {
            exports.MapSetBackgroundImagePath.encode(message.event.mapSetBackgroundImagePath, writer.uint32(482).fork()).ldelim();
        }
        if (((_18 = message.event) === null || _18 === void 0 ? void 0 : _18.$case) === "mapSetForegroundImagePath") {
            exports.MapSetForegroundImagePath.encode(message.event.mapSetForegroundImagePath, writer.uint32(490).fork()).ldelim();
        }
        if (((_19 = message.event) === null || _19 === void 0 ? void 0 : _19.$case) === "mapSetSprites") {
            exports.MapSetSprites.encode(message.event.mapSetSprites, writer.uint32(498).fork()).ldelim();
        }
        if (((_20 = message.event) === null || _20 === void 0 ? void 0 : _20.$case) === "mapSetSpaces") {
            exports.MapSetSpaces.encode(message.event.mapSetSpaces, writer.uint32(506).fork()).ldelim();
        }
        if (((_21 = message.event) === null || _21 === void 0 ? void 0 : _21.$case) === "mapSetSpawns") {
            exports.MapSetSpawns.encode(message.event.mapSetSpawns, writer.uint32(514).fork()).ldelim();
        }
        if (((_22 = message.event) === null || _22 === void 0 ? void 0 : _22.$case) === "mapSetPortals") {
            exports.MapSetPortals.encode(message.event.mapSetPortals, writer.uint32(522).fork()).ldelim();
        }
        if (((_23 = message.event) === null || _23 === void 0 ? void 0 : _23.$case) === "mapSetAnnouncer") {
            exports.MapSetAnnouncer.encode(message.event.mapSetAnnouncer, writer.uint32(530).fork()).ldelim();
        }
        if (((_24 = message.event) === null || _24 === void 0 ? void 0 : _24.$case) === "mapSetAssets") {
            exports.MapSetAssets.encode(message.event.mapSetAssets, writer.uint32(554).fork()).ldelim();
        }
        if (((_25 = message.event) === null || _25 === void 0 ? void 0 : _25.$case) === "mapSetObjects") {
            exports.MapSetObjects.encode(message.event.mapSetObjects, writer.uint32(562).fork()).ldelim();
        }
        if (((_26 = message.event) === null || _26 === void 0 ? void 0 : _26.$case) === "mapSetName") {
            exports.MapSetName.encode(message.event.mapSetName, writer.uint32(570).fork()).ldelim();
        }
        if (((_27 = message.event) === null || _27 === void 0 ? void 0 : _27.$case) === "mapSetMuteOnEntry") {
            exports.MapSetMuteOnEntry.encode(message.event.mapSetMuteOnEntry, writer.uint32(586).fork()).ldelim();
        }
        if (((_28 = message.event) === null || _28 === void 0 ? void 0 : _28.$case) === "mapSetUseDrawnBG") {
            exports.MapSetUseDrawnBG.encode(message.event.mapSetUseDrawnBG, writer.uint32(594).fork()).ldelim();
        }
        if (((_29 = message.event) === null || _29 === void 0 ? void 0 : _29.$case) === "mapSetWalls") {
            exports.MapSetWalls.encode(message.event.mapSetWalls, writer.uint32(602).fork()).ldelim();
        }
        if (((_30 = message.event) === null || _30 === void 0 ? void 0 : _30.$case) === "mapSetFloors") {
            exports.MapSetFloors.encode(message.event.mapSetFloors, writer.uint32(610).fork()).ldelim();
        }
        if (((_31 = message.event) === null || _31 === void 0 ? void 0 : _31.$case) === "mapSetAreas") {
            exports.MapSetAreas.encode(message.event.mapSetAreas, writer.uint32(618).fork()).ldelim();
        }
        if (((_32 = message.event) === null || _32 === void 0 ? void 0 : _32.$case) === "mapDeleteObject") {
            exports.MapDeleteObject.encode(message.event.mapDeleteObject, writer.uint32(626).fork()).ldelim();
        }
        if (((_33 = message.event) === null || _33 === void 0 ? void 0 : _33.$case) === "mapSetSpawn") {
            exports.MapSetSpawn.encode(message.event.mapSetSpawn, writer.uint32(634).fork()).ldelim();
        }
        if (((_34 = message.event) === null || _34 === void 0 ? void 0 : _34.$case) === "playerSetsIsAlone") {
            exports.PlayerSetsIsAlone.encode(message.event.playerSetsIsAlone, writer.uint32(642).fork()).ldelim();
        }
        if (((_35 = message.event) === null || _35 === void 0 ? void 0 : _35.$case) === "playerJoins") {
            exports.PlayerJoins.encode(message.event.playerJoins, writer.uint32(650).fork()).ldelim();
        }
        if (((_36 = message.event) === null || _36 === void 0 ? void 0 : _36.$case) === "mapSetEnabledChats") {
            exports.MapSetEnabledChats.encode(message.event.mapSetEnabledChats, writer.uint32(658).fork()).ldelim();
        }
        if (((_37 = message.event) === null || _37 === void 0 ? void 0 : _37.$case) === "mapSetDescription") {
            exports.MapSetDescription.encode(message.event.mapSetDescription, writer.uint32(666).fork()).ldelim();
        }
        if (((_38 = message.event) === null || _38 === void 0 ? void 0 : _38.$case) === "mapSetDecoration") {
            exports.MapSetDecoration.encode(message.event.mapSetDecoration, writer.uint32(674).fork()).ldelim();
        }
        if (((_39 = message.event) === null || _39 === void 0 ? void 0 : _39.$case) === "mapSetTutorialTasks") {
            exports.MapSetTutorialTasks.encode(message.event.mapSetTutorialTasks, writer.uint32(682).fork()).ldelim();
        }
        if (((_40 = message.event) === null || _40 === void 0 ? void 0 : _40.$case) === "mapSetMiniMapImagePath") {
            exports.MapSetMiniMapImagePath.encode(message.event.mapSetMiniMapImagePath, writer.uint32(690).fork()).ldelim();
        }
        if (((_41 = message.event) === null || _41 === void 0 ? void 0 : _41.$case) === "spacePlaysSound") {
            exports.SpacePlaysSound.encode(message.event.spacePlaysSound, writer.uint32(698).fork()).ldelim();
        }
        if (((_42 = message.event) === null || _42 === void 0 ? void 0 : _42.$case) === "mapSetScript") {
            exports.MapSetScript.encode(message.event.mapSetScript, writer.uint32(706).fork()).ldelim();
        }
        if (((_43 = message.event) === null || _43 === void 0 ? void 0 : _43.$case) === "mapSetDesks") {
            exports.MapSetDesks.encode(message.event.mapSetDesks, writer.uint32(714).fork()).ldelim();
        }
        if (((_44 = message.event) === null || _44 === void 0 ? void 0 : _44.$case) === "playerSetsIsMobile") {
            exports.PlayerSetsIsMobile.encode(message.event.playerSetsIsMobile, writer.uint32(722).fork()).ldelim();
        }
        if (((_45 = message.event) === null || _45 === void 0 ? void 0 : _45.$case) === "setScreenPointerServer") {
            exports.SetScreenPointerServer.encode(message.event.setScreenPointerServer, writer.uint32(730).fork()).ldelim();
        }
        if (((_46 = message.event) === null || _46 === void 0 ? void 0 : _46.$case) === "playerSetsEmoteV2") {
            exports.PlayerSetsEmoteV2.encode(message.event.playerSetsEmoteV2, writer.uint32(738).fork()).ldelim();
        }
        if (((_47 = message.event) === null || _47 === void 0 ? void 0 : _47.$case) === "playerSetsFocusModeEndTime") {
            exports.PlayerSetsFocusModeEndTime.encode(message.event.playerSetsFocusModeEndTime, writer.uint32(746).fork()).ldelim();
        }
        if (((_48 = message.event) === null || _48 === void 0 ? void 0 : _48.$case) === "spaceSetsSpaceMembers") {
            exports.SpaceSetsSpaceMembers.encode(message.event.spaceSetsSpaceMembers, writer.uint32(754).fork()).ldelim();
        }
        if (((_49 = message.event) === null || _49 === void 0 ? void 0 : _49.$case) === "customEvent") {
            exports.CustomEvent.encode(message.event.customEvent, writer.uint32(762).fork()).ldelim();
        }
        if (((_50 = message.event) === null || _50 === void 0 ? void 0 : _50.$case) === "playerBlocks") {
            exports.PlayerBlocks.encode(message.event.playerBlocks, writer.uint32(778).fork()).ldelim();
        }
        if (((_51 = message.event) === null || _51 === void 0 ? void 0 : _51.$case) === "playerUpdatesFocusModeStatus") {
            exports.PlayerUpdatesFocusModeStatus.encode(message.event.playerUpdatesFocusModeStatus, writer.uint32(786).fork()).ldelim();
        }
        if (((_52 = message.event) === null || _52 === void 0 ? void 0 : _52.$case) === "playerNotifies") {
            exports.PlayerNotifies.encode(message.event.playerNotifies, writer.uint32(794).fork()).ldelim();
        }
        if (((_53 = message.event) === null || _53 === void 0 ? void 0 : _53.$case) === "playerSetsItemString") {
            exports.PlayerSetsItemString.encode(message.event.playerSetsItemString, writer.uint32(866).fork()).ldelim();
        }
        if (((_54 = message.event) === null || _54 === void 0 ? void 0 : _54.$case) === "playerTriggersItem") {
            exports.PlayerTriggersItem.encode(message.event.playerTriggersItem, writer.uint32(874).fork()).ldelim();
        }
        if (((_55 = message.event) === null || _55 === void 0 ? void 0 : _55.$case) === "playerSetsFollowTarget") {
            exports.PlayerSetsFollowTarget.encode(message.event.playerSetsFollowTarget, writer.uint32(882).fork()).ldelim();
        }
        if (((_56 = message.event) === null || _56 === void 0 ? void 0 : _56.$case) === "playerRequestsToLead") {
            exports.PlayerRequestsToLead.encode(message.event.playerRequestsToLead, writer.uint32(890).fork()).ldelim();
        }
        if (((_57 = message.event) === null || _57 === void 0 ? void 0 : _57.$case) === "playerSetsManualVideoSrc") {
            exports.PlayerSetsManualVideoSrc.encode(message.event.playerSetsManualVideoSrc, writer.uint32(898).fork()).ldelim();
        }
        if (((_58 = message.event) === null || _58 === void 0 ? void 0 : _58.$case) === "playerSetsIsNpc") {
            exports.PlayerSetsIsNpc.encode(message.event.playerSetsIsNpc, writer.uint32(906).fork()).ldelim();
        }
        if (((_59 = message.event) === null || _59 === void 0 ? void 0 : _59.$case) === "playerSetsSubtitle") {
            exports.PlayerSetsSubtitle.encode(message.event.playerSetsSubtitle, writer.uint32(914).fork()).ldelim();
        }
        if (((_60 = message.event) === null || _60 === void 0 ? void 0 : _60.$case) === "mapCommitsChanges") {
            exports.MapCommitsChanges.encode(message.event.mapCommitsChanges, writer.uint32(922).fork()).ldelim();
        }
        if (((_61 = message.event) === null || _61 === void 0 ? void 0 : _61.$case) === "playerUpdatesSession") {
            exports.PlayerUpdatesSession.encode(message.event.playerUpdatesSession, writer.uint32(930).fork()).ldelim();
        }
        if (((_62 = message.event) === null || _62 === void 0 ? void 0 : _62.$case) === "mapMoveObject") {
            exports.MapMoveObject.encode(message.event.mapMoveObject, writer.uint32(938).fork()).ldelim();
        }
        if (((_63 = message.event) === null || _63 === void 0 ? void 0 : _63.$case) === "playerEditsChatMessage") {
            exports.PlayerEditsChatMessage.encode(message.event.playerEditsChatMessage, writer.uint32(946).fork()).ldelim();
        }
        if (((_64 = message.event) === null || _64 === void 0 ? void 0 : _64.$case) === "fxShakeObject") {
            exports.FXShakeObject.encode(message.event.fxShakeObject, writer.uint32(954).fork()).ldelim();
        }
        if (((_65 = message.event) === null || _65 === void 0 ? void 0 : _65.$case) === "fxShakeCamera") {
            exports.FXShakeCamera.encode(message.event.fxShakeCamera, writer.uint32(962).fork()).ldelim();
        }
        if (((_66 = message.event) === null || _66 === void 0 ? void 0 : _66.$case) === "playerSendsCommand") {
            exports.PlayerSendsCommand.encode(message.event.playerSendsCommand, writer.uint32(970).fork()).ldelim();
        }
        if (((_67 = message.event) === null || _67 === void 0 ? void 0 : _67.$case) === "spaceRegistersCommand") {
            exports.SpaceRegistersCommand.encode(message.event.spaceRegistersCommand, writer.uint32(978).fork()).ldelim();
        }
        if (((_68 = message.event) === null || _68 === void 0 ? void 0 : _68.$case) === "speakerUpdatesSession") {
            exports.SpeakerUpdatesSession.encode(message.event.speakerUpdatesSession, writer.uint32(986).fork()).ldelim();
        }
        if (((_69 = message.event) === null || _69 === void 0 ? void 0 : _69.$case) === "playerUpdatesInventory") {
            exports.PlayerUpdatesInventory.encode(message.event.playerUpdatesInventory, writer.uint32(994).fork()).ldelim();
        }
        if (((_70 = message.event) === null || _70 === void 0 ? void 0 : _70.$case) === "spaceUpdatesItems") {
            exports.SpaceUpdatesItems.encode(message.event.spaceUpdatesItems, writer.uint32(1002).fork()).ldelim();
        }
        if (((_71 = message.event) === null || _71 === void 0 ? void 0 : _71.$case) === "playerSetsVehicleId") {
            exports.PlayerSetsVehicleId.encode(message.event.playerSetsVehicleId, writer.uint32(1010).fork()).ldelim();
        }
        if (((_72 = message.event) === null || _72 === void 0 ? void 0 : _72.$case) === "playerSetsSpeedModifier") {
            exports.PlayerSetsSpeedModifier.encode(message.event.playerSetsSpeedModifier, writer.uint32(1018).fork()).ldelim();
        }
        if (((_73 = message.event) === null || _73 === void 0 ? void 0 : _73.$case) === "playerHighFives") {
            exports.PlayerHighFives.encode(message.event.playerHighFives, writer.uint32(1026).fork()).ldelim();
        }
        if (((_74 = message.event) === null || _74 === void 0 ? void 0 : _74.$case) === "playerSetsNonVerbalCue") {
            exports.PlayerSetsNonVerbalCue.encode(message.event.playerSetsNonVerbalCue, writer.uint32(1034).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseServerClientEvent);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 100:
                    message.event = { $case: "info", info: exports.Info.decode(reader, reader.uint32()) };
                    break;
                case 101:
                    message.event = { $case: "warn", warn: exports.Warn.decode(reader, reader.uint32()) };
                    break;
                case 102:
                    message.event = { $case: "error", error: exports.ErrorEvent.decode(reader, reader.uint32()) };
                    break;
                case 103:
                    message.event = { $case: "ready", ready: exports.Ready.decode(reader, reader.uint32()) };
                    break;
                case 105:
                    message.event = {
                        $case: "serverHeartbeat",
                        serverHeartbeat: exports.ServerHeartbeat.decode(reader, reader.uint32())
                    };
                    break;
                case 107:
                    message.event = {
                        $case: "transactionStatus",
                        transactionStatus: exports.TransactionStatus.decode(reader, reader.uint32())
                    };
                    break;
                case 1:
                    message.event = {
                        $case: "playerMoves",
                        playerMoves: exports.PlayerMoves.decode(reader, reader.uint32())
                    };
                    break;
                case 5:
                    message.event = {
                        $case: "playerSetsStatus",
                        playerSetsStatus: exports.PlayerSetsStatus.decode(reader, reader.uint32())
                    };
                    break;
                case 6:
                    message.event = {
                        $case: "playerSpotlights",
                        playerSpotlights: exports.PlayerSpotlights.decode(reader, reader.uint32())
                    };
                    break;
                case 7:
                    message.event = {
                        $case: "playerRings",
                        playerRings: exports.PlayerRings.decode(reader, reader.uint32())
                    };
                    break;
                case 9:
                    message.event = {
                        $case: "playerChats",
                        playerChats: exports.PlayerChats.decode(reader, reader.uint32())
                    };
                    break;
                case 10:
                    message.event = {
                        $case: "playerInteracts",
                        playerInteracts: exports.PlayerInteracts.decode(reader, reader.uint32())
                    };
                    break;
                case 11:
                    message.event = {
                        $case: "playerGhosts",
                        playerGhosts: exports.PlayerGhosts.decode(reader, reader.uint32())
                    };
                    break;
                case 12:
                    message.event = {
                        $case: "playerEntersWhisper",
                        playerEntersWhisper: exports.PlayerEntersWhisper.decode(reader, reader.uint32())
                    };
                    break;
                case 13:
                    message.event = {
                        $case: "playerLeavesWhisper",
                        playerLeavesWhisper: exports.PlayerLeavesWhisper.decode(reader, reader.uint32())
                    };
                    break;
                case 14:
                    message.event = {
                        $case: "playerActivelySpeaks",
                        playerActivelySpeaks: exports.PlayerActivelySpeaks.decode(reader, reader.uint32())
                    };
                    break;
                case 16:
                    message.event = {
                        $case: "playerSetsWorkCondition",
                        playerSetsWorkCondition: exports.PlayerSetsWorkCondition.decode(reader, reader.uint32())
                    };
                    break;
                case 17:
                    message.event = {
                        $case: "playerSetsName",
                        playerSetsName: exports.PlayerSetsName.decode(reader, reader.uint32())
                    };
                    break;
                case 18:
                    message.event = {
                        $case: "playerSetsTextStatus",
                        playerSetsTextStatus: exports.PlayerSetsTextStatus.decode(reader, reader.uint32())
                    };
                    break;
                case 19:
                    message.event = {
                        $case: "playerSetsEmojiStatus",
                        playerSetsEmojiStatus: exports.PlayerSetsEmojiStatus.decode(reader, reader.uint32())
                    };
                    break;
                case 20:
                    message.event = {
                        $case: "playerSetsAffiliation",
                        playerSetsAffiliation: exports.PlayerSetsAffiliation.decode(reader, reader.uint32())
                    };
                    break;
                case 21:
                    message.event = {
                        $case: "playerExits",
                        playerExits: exports.PlayerExits.decode(reader, reader.uint32())
                    };
                    break;
                case 39:
                    message.event = {
                        $case: "respawnComplete",
                        respawnComplete: exports.RespawnComplete.decode(reader, reader.uint32())
                    };
                    break;
                case 40:
                    message.event = {
                        $case: "playerSetsOutfitString",
                        playerSetsOutfitString: exports.PlayerSetsOutfitString.decode(reader, reader.uint32())
                    };
                    break;
                case 41:
                    message.event = {
                        $case: "playerSetsIsSignedIn",
                        playerSetsIsSignedIn: exports.PlayerSetsIsSignedIn.decode(reader, reader.uint32())
                    };
                    break;
                case 44:
                    message.event = {
                        $case: "spaceOverwrites",
                        spaceOverwrites: exports.SpaceOverwrites.decode(reader, reader.uint32())
                    };
                    break;
                case 45:
                    message.event = {
                        $case: "spaceIsClosed",
                        spaceIsClosed: exports.SpaceIsClosed.decode(reader, reader.uint32())
                    };
                    break;
                case 46:
                    message.event = {
                        $case: "playerEntersPortal",
                        playerEntersPortal: exports.PlayerEntersPortal.decode(reader, reader.uint32())
                    };
                    break;
                case 47:
                    message.event = {
                        $case: "spaceSetsIdMapping",
                        spaceSetsIdMapping: exports.SpaceSetsIdMapping.decode(reader, reader.uint32())
                    };
                    break;
                case 48:
                    message.event = {
                        $case: "playerSetsLastActive",
                        playerSetsLastActive: exports.PlayerSetsLastActive.decode(reader, reader.uint32())
                    };
                    break;
                case 49:
                    message.event = {
                        $case: "playerShootsConfetti",
                        playerShootsConfetti: exports.PlayerShootsConfetti.decode(reader, reader.uint32())
                    };
                    break;
                case 50:
                    message.event = {
                        $case: "playerSetsEventStatus",
                        playerSetsEventStatus: exports.PlayerSetsEventStatus.decode(reader, reader.uint32())
                    };
                    break;
                case 51:
                    message.event = {
                        $case: "playerSetsInConversation",
                        playerSetsInConversation: exports.PlayerSetsInConversation.decode(reader, reader.uint32())
                    };
                    break;
                case 52:
                    message.event = {
                        $case: "playerSetsCurrentDesk",
                        playerSetsCurrentDesk: exports.PlayerSetsCurrentDesk.decode(reader, reader.uint32())
                    };
                    break;
                case 53:
                    message.event = {
                        $case: "playerSetsCurrentArea",
                        playerSetsCurrentArea: exports.PlayerSetsCurrentArea.decode(reader, reader.uint32())
                    };
                    break;
                case 54:
                    message.event = {
                        $case: "playerSetsImagePointer",
                        playerSetsImagePointer: exports.PlayerSetsImagePointer.decode(reader, reader.uint32())
                    };
                    break;
                case 55:
                    message.event = {
                        $case: "cookieFound",
                        cookieFound: exports.CookieFound.decode(reader, reader.uint32())
                    };
                    break;
                case 56:
                    message.event = {
                        $case: "playerEntersWhisperV2",
                        playerEntersWhisperV2: exports.PlayerEntersWhisperV2.decode(reader, reader.uint32())
                    };
                    break;
                case 57:
                    message.event = {
                        $case: "playerSetsGoKartId",
                        playerSetsGoKartId: exports.PlayerSetsGoKartId.decode(reader, reader.uint32())
                    };
                    break;
                case 58:
                    message.event = {
                        $case: "mapSetDimensions",
                        mapSetDimensions: exports.MapSetDimensions.decode(reader, reader.uint32())
                    };
                    break;
                case 59:
                    message.event = {
                        $case: "mapSetCollisions",
                        mapSetCollisions: exports.MapSetCollisions.decode(reader, reader.uint32())
                    };
                    break;
                case 60:
                    message.event = {
                        $case: "mapSetBackgroundImagePath",
                        mapSetBackgroundImagePath: exports.MapSetBackgroundImagePath.decode(reader, reader.uint32())
                    };
                    break;
                case 61:
                    message.event = {
                        $case: "mapSetForegroundImagePath",
                        mapSetForegroundImagePath: exports.MapSetForegroundImagePath.decode(reader, reader.uint32())
                    };
                    break;
                case 62:
                    message.event = {
                        $case: "mapSetSprites",
                        mapSetSprites: exports.MapSetSprites.decode(reader, reader.uint32())
                    };
                    break;
                case 63:
                    message.event = {
                        $case: "mapSetSpaces",
                        mapSetSpaces: exports.MapSetSpaces.decode(reader, reader.uint32())
                    };
                    break;
                case 64:
                    message.event = {
                        $case: "mapSetSpawns",
                        mapSetSpawns: exports.MapSetSpawns.decode(reader, reader.uint32())
                    };
                    break;
                case 65:
                    message.event = {
                        $case: "mapSetPortals",
                        mapSetPortals: exports.MapSetPortals.decode(reader, reader.uint32())
                    };
                    break;
                case 66:
                    message.event = {
                        $case: "mapSetAnnouncer",
                        mapSetAnnouncer: exports.MapSetAnnouncer.decode(reader, reader.uint32())
                    };
                    break;
                case 69:
                    message.event = {
                        $case: "mapSetAssets",
                        mapSetAssets: exports.MapSetAssets.decode(reader, reader.uint32())
                    };
                    break;
                case 70:
                    message.event = {
                        $case: "mapSetObjects",
                        mapSetObjects: exports.MapSetObjects.decode(reader, reader.uint32())
                    };
                    break;
                case 71:
                    message.event = {
                        $case: "mapSetName",
                        mapSetName: exports.MapSetName.decode(reader, reader.uint32())
                    };
                    break;
                case 73:
                    message.event = {
                        $case: "mapSetMuteOnEntry",
                        mapSetMuteOnEntry: exports.MapSetMuteOnEntry.decode(reader, reader.uint32())
                    };
                    break;
                case 74:
                    message.event = {
                        $case: "mapSetUseDrawnBG",
                        mapSetUseDrawnBG: exports.MapSetUseDrawnBG.decode(reader, reader.uint32())
                    };
                    break;
                case 75:
                    message.event = {
                        $case: "mapSetWalls",
                        mapSetWalls: exports.MapSetWalls.decode(reader, reader.uint32())
                    };
                    break;
                case 76:
                    message.event = {
                        $case: "mapSetFloors",
                        mapSetFloors: exports.MapSetFloors.decode(reader, reader.uint32())
                    };
                    break;
                case 77:
                    message.event = {
                        $case: "mapSetAreas",
                        mapSetAreas: exports.MapSetAreas.decode(reader, reader.uint32())
                    };
                    break;
                case 78:
                    message.event = {
                        $case: "mapDeleteObject",
                        mapDeleteObject: exports.MapDeleteObject.decode(reader, reader.uint32())
                    };
                    break;
                case 79:
                    message.event = {
                        $case: "mapSetSpawn",
                        mapSetSpawn: exports.MapSetSpawn.decode(reader, reader.uint32())
                    };
                    break;
                case 80:
                    message.event = {
                        $case: "playerSetsIsAlone",
                        playerSetsIsAlone: exports.PlayerSetsIsAlone.decode(reader, reader.uint32())
                    };
                    break;
                case 81:
                    message.event = {
                        $case: "playerJoins",
                        playerJoins: exports.PlayerJoins.decode(reader, reader.uint32())
                    };
                    break;
                case 82:
                    message.event = {
                        $case: "mapSetEnabledChats",
                        mapSetEnabledChats: exports.MapSetEnabledChats.decode(reader, reader.uint32())
                    };
                    break;
                case 83:
                    message.event = {
                        $case: "mapSetDescription",
                        mapSetDescription: exports.MapSetDescription.decode(reader, reader.uint32())
                    };
                    break;
                case 84:
                    message.event = {
                        $case: "mapSetDecoration",
                        mapSetDecoration: exports.MapSetDecoration.decode(reader, reader.uint32())
                    };
                    break;
                case 85:
                    message.event = {
                        $case: "mapSetTutorialTasks",
                        mapSetTutorialTasks: exports.MapSetTutorialTasks.decode(reader, reader.uint32())
                    };
                    break;
                case 86:
                    message.event = {
                        $case: "mapSetMiniMapImagePath",
                        mapSetMiniMapImagePath: exports.MapSetMiniMapImagePath.decode(reader, reader.uint32())
                    };
                    break;
                case 87:
                    message.event = {
                        $case: "spacePlaysSound",
                        spacePlaysSound: exports.SpacePlaysSound.decode(reader, reader.uint32())
                    };
                    break;
                case 88:
                    message.event = {
                        $case: "mapSetScript",
                        mapSetScript: exports.MapSetScript.decode(reader, reader.uint32())
                    };
                    break;
                case 89:
                    message.event = {
                        $case: "mapSetDesks",
                        mapSetDesks: exports.MapSetDesks.decode(reader, reader.uint32())
                    };
                    break;
                case 90:
                    message.event = {
                        $case: "playerSetsIsMobile",
                        playerSetsIsMobile: exports.PlayerSetsIsMobile.decode(reader, reader.uint32())
                    };
                    break;
                case 91:
                    message.event = {
                        $case: "setScreenPointerServer",
                        setScreenPointerServer: exports.SetScreenPointerServer.decode(reader, reader.uint32())
                    };
                    break;
                case 92:
                    message.event = {
                        $case: "playerSetsEmoteV2",
                        playerSetsEmoteV2: exports.PlayerSetsEmoteV2.decode(reader, reader.uint32())
                    };
                    break;
                case 93:
                    message.event = {
                        $case: "playerSetsFocusModeEndTime",
                        playerSetsFocusModeEndTime: exports.PlayerSetsFocusModeEndTime.decode(reader, reader.uint32())
                    };
                    break;
                case 94:
                    message.event = {
                        $case: "spaceSetsSpaceMembers",
                        spaceSetsSpaceMembers: exports.SpaceSetsSpaceMembers.decode(reader, reader.uint32())
                    };
                    break;
                case 95:
                    message.event = {
                        $case: "customEvent",
                        customEvent: exports.CustomEvent.decode(reader, reader.uint32())
                    };
                    break;
                case 97:
                    message.event = {
                        $case: "playerBlocks",
                        playerBlocks: exports.PlayerBlocks.decode(reader, reader.uint32())
                    };
                    break;
                case 98:
                    message.event = {
                        $case: "playerUpdatesFocusModeStatus",
                        playerUpdatesFocusModeStatus: exports.PlayerUpdatesFocusModeStatus.decode(reader, reader.uint32())
                    };
                    break;
                case 99:
                    message.event = {
                        $case: "playerNotifies",
                        playerNotifies: exports.PlayerNotifies.decode(reader, reader.uint32())
                    };
                    break;
                case 108:
                    message.event = {
                        $case: "playerSetsItemString",
                        playerSetsItemString: exports.PlayerSetsItemString.decode(reader, reader.uint32())
                    };
                    break;
                case 109:
                    message.event = {
                        $case: "playerTriggersItem",
                        playerTriggersItem: exports.PlayerTriggersItem.decode(reader, reader.uint32())
                    };
                    break;
                case 110:
                    message.event = {
                        $case: "playerSetsFollowTarget",
                        playerSetsFollowTarget: exports.PlayerSetsFollowTarget.decode(reader, reader.uint32())
                    };
                    break;
                case 111:
                    message.event = {
                        $case: "playerRequestsToLead",
                        playerRequestsToLead: exports.PlayerRequestsToLead.decode(reader, reader.uint32())
                    };
                    break;
                case 112:
                    message.event = {
                        $case: "playerSetsManualVideoSrc",
                        playerSetsManualVideoSrc: exports.PlayerSetsManualVideoSrc.decode(reader, reader.uint32())
                    };
                    break;
                case 113:
                    message.event = {
                        $case: "playerSetsIsNpc",
                        playerSetsIsNpc: exports.PlayerSetsIsNpc.decode(reader, reader.uint32())
                    };
                    break;
                case 114:
                    message.event = {
                        $case: "playerSetsSubtitle",
                        playerSetsSubtitle: exports.PlayerSetsSubtitle.decode(reader, reader.uint32())
                    };
                    break;
                case 115:
                    message.event = {
                        $case: "mapCommitsChanges",
                        mapCommitsChanges: exports.MapCommitsChanges.decode(reader, reader.uint32())
                    };
                    break;
                case 116:
                    message.event = {
                        $case: "playerUpdatesSession",
                        playerUpdatesSession: exports.PlayerUpdatesSession.decode(reader, reader.uint32())
                    };
                    break;
                case 117:
                    message.event = {
                        $case: "mapMoveObject",
                        mapMoveObject: exports.MapMoveObject.decode(reader, reader.uint32())
                    };
                    break;
                case 118:
                    message.event = {
                        $case: "playerEditsChatMessage",
                        playerEditsChatMessage: exports.PlayerEditsChatMessage.decode(reader, reader.uint32())
                    };
                    break;
                case 119:
                    message.event = {
                        $case: "fxShakeObject",
                        fxShakeObject: exports.FXShakeObject.decode(reader, reader.uint32())
                    };
                    break;
                case 120:
                    message.event = {
                        $case: "fxShakeCamera",
                        fxShakeCamera: exports.FXShakeCamera.decode(reader, reader.uint32())
                    };
                    break;
                case 121:
                    message.event = {
                        $case: "playerSendsCommand",
                        playerSendsCommand: exports.PlayerSendsCommand.decode(reader, reader.uint32())
                    };
                    break;
                case 122:
                    message.event = {
                        $case: "spaceRegistersCommand",
                        spaceRegistersCommand: exports.SpaceRegistersCommand.decode(reader, reader.uint32())
                    };
                    break;
                case 123:
                    message.event = {
                        $case: "speakerUpdatesSession",
                        speakerUpdatesSession: exports.SpeakerUpdatesSession.decode(reader, reader.uint32())
                    };
                    break;
                case 124:
                    message.event = {
                        $case: "playerUpdatesInventory",
                        playerUpdatesInventory: exports.PlayerUpdatesInventory.decode(reader, reader.uint32())
                    };
                    break;
                case 125:
                    message.event = {
                        $case: "spaceUpdatesItems",
                        spaceUpdatesItems: exports.SpaceUpdatesItems.decode(reader, reader.uint32())
                    };
                    break;
                case 126:
                    message.event = {
                        $case: "playerSetsVehicleId",
                        playerSetsVehicleId: exports.PlayerSetsVehicleId.decode(reader, reader.uint32())
                    };
                    break;
                case 127:
                    message.event = {
                        $case: "playerSetsSpeedModifier",
                        playerSetsSpeedModifier: exports.PlayerSetsSpeedModifier.decode(reader, reader.uint32())
                    };
                    break;
                case 128:
                    message.event = {
                        $case: "playerHighFives",
                        playerHighFives: exports.PlayerHighFives.decode(reader, reader.uint32())
                    };
                    break;
                case 129:
                    message.event = {
                        $case: "playerSetsNonVerbalCue",
                        playerSetsNonVerbalCue: exports.PlayerSetsNonVerbalCue.decode(reader, reader.uint32())
                    };
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseServerHeartbeat = { lastRTT: 0 };
exports.ServerHeartbeat = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.lastRTT !== 0) {
            writer.uint32(8).uint32(message.lastRTT);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseServerHeartbeat);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.lastRTT = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseInfo = { message: "" };
exports.Info = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseInfo);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.message = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseWarn = { message: "" };
exports.Warn = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseWarn);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.message = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseErrorEvent = { message: "", code: 0 };
exports.ErrorEvent = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        if (message.code !== 0) {
            writer.uint32(16).uint32(message.code);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseErrorEvent);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.message = reader.string();
                    break;
                case 2:
                    message.code = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseReady = { id: "" };
exports.Ready = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseReady);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseTransactionStatus = { txnId: 0, succeeded: false };
exports.TransactionStatus = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.txnId !== 0) {
            writer.uint32(8).uint32(message.txnId);
        }
        if (message.succeeded === true) {
            writer.uint32(16).bool(message.succeeded);
        }
        if (message.reason !== undefined) {
            writer.uint32(26).string(message.reason);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseTransactionStatus);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.txnId = reader.uint32();
                    break;
                case 2:
                    message.succeeded = reader.bool();
                    break;
                case 3:
                    message.reason = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerJoins = { encId: 0 };
exports.PlayerJoins = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerJoins);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerMoves = { encId: 0, lastInputId: 0 };
exports.PlayerMoves = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.x !== undefined) {
            writer.uint32(16).uint32(message.x);
        }
        if (message.y !== undefined) {
            writer.uint32(24).uint32(message.y);
        }
        if (message.direction !== undefined) {
            writer.uint32(32).int32(message.direction);
        }
        if (message.mapId !== undefined) {
            writer.uint32(42).string(message.mapId);
        }
        if (message.lastInputId !== 0) {
            writer.uint32(48).uint32(message.lastInputId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerMoves);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.x = reader.uint32();
                    break;
                case 3:
                    message.y = reader.uint32();
                    break;
                case 4:
                    message.direction = reader.int32();
                    break;
                case 5:
                    message.mapId = reader.string();
                    break;
                case 6:
                    message.lastInputId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsStatus = { encId: 0, busy: false };
exports.PlayerSetsStatus = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.busy === true) {
            writer.uint32(16).bool(message.busy);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsStatus);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.busy = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSpotlights = { encId: 0, spotlightedBy: 0, spotlighted: 0 };
exports.PlayerSpotlights = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(16).uint32(message.encId);
        }
        if (message.spotlightedBy !== 0) {
            writer.uint32(8).uint32(message.spotlightedBy);
        }
        if (message.spotlighted !== 0) {
            writer.uint32(24).uint32(message.spotlighted);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSpotlights);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    message.encId = reader.uint32();
                    break;
                case 1:
                    message.spotlightedBy = reader.uint32();
                    break;
                case 3:
                    message.spotlighted = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerRings = { encId: 0 };
exports.PlayerRings = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerRings);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsImagePointer = { encId: 0, objectId: "", x: 0, y: 0 };
exports.PlayerSetsImagePointer = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.objectId !== "") {
            writer.uint32(18).string(message.objectId);
        }
        if (message.x !== 0) {
            writer.uint32(25).double(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(33).double(message.y);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsImagePointer);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.objectId = reader.string();
                    break;
                case 3:
                    message.x = reader.double();
                    break;
                case 4:
                    message.y = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetScreenPointerServer = { encId: 0, screenId: "", x: 0, y: 0, color: "" };
exports.SetScreenPointerServer = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.screenId !== "") {
            writer.uint32(18).string(message.screenId);
        }
        if (message.x !== 0) {
            writer.uint32(25).double(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(33).double(message.y);
        }
        if (message.color !== "") {
            writer.uint32(42).string(message.color);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetScreenPointerServer);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.screenId = reader.string();
                    break;
                case 3:
                    message.x = reader.double();
                    break;
                case 4:
                    message.y = reader.double();
                    break;
                case 5:
                    message.color = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerChats = {
    senderId: "",
    recipient: "",
    contents: "",
    senderName: "",
    messageType: "",
    unixTime: 0
};
exports.PlayerChats = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.senderId !== "") {
            writer.uint32(10).string(message.senderId);
        }
        if (message.recipient !== "") {
            writer.uint32(18).string(message.recipient);
        }
        if (message.contents !== "") {
            writer.uint32(26).string(message.contents);
        }
        if (message.senderName !== "") {
            writer.uint32(34).string(message.senderName);
        }
        if (message.timestamp !== undefined) {
            exports.Timestamp.encode(message.timestamp, writer.uint32(42).fork()).ldelim();
        }
        if (message.messageType !== "") {
            writer.uint32(50).string(message.messageType);
        }
        if (message.unixTime !== 0) {
            writer.uint32(57).double(message.unixTime);
        }
        if (message.id !== undefined) {
            writer.uint32(66).string(message.id);
        }
        if (message.roomId !== undefined) {
            writer.uint32(74).string(message.roomId);
        }
        if (message.approved !== undefined) {
            writer.uint32(80).bool(message.approved);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerChats);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.senderId = reader.string();
                    break;
                case 2:
                    message.recipient = reader.string();
                    break;
                case 3:
                    message.contents = reader.string();
                    break;
                case 4:
                    message.senderName = reader.string();
                    break;
                case 5:
                    message.timestamp = exports.Timestamp.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.messageType = reader.string();
                    break;
                case 7:
                    message.unixTime = reader.double();
                    break;
                case 8:
                    message.id = reader.string();
                    break;
                case 9:
                    message.roomId = reader.string();
                    break;
                case 10:
                    message.approved = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseTimestamp = { seconds: 0, nanoseconds: 0 };
exports.Timestamp = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.seconds !== 0) {
            writer.uint32(13).float(message.seconds);
        }
        if (message.nanoseconds !== 0) {
            writer.uint32(21).float(message.nanoseconds);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseTimestamp);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.seconds = reader.float();
                    break;
                case 2:
                    message.nanoseconds = reader.float();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerInteracts = { encId: 0, objId: "" };
exports.PlayerInteracts = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.objId !== "") {
            writer.uint32(18).string(message.objId);
        }
        if (message.dataJson !== undefined) {
            writer.uint32(26).string(message.dataJson);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerInteracts);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.objId = reader.string();
                    break;
                case 3:
                    message.dataJson = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerGhosts = { encId: 0, ghost: 0 };
exports.PlayerGhosts = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.ghost !== 0) {
            writer.uint32(16).uint32(message.ghost);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerGhosts);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.ghost = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerEntersWhisper = { encId: 0, whisperRecipient: "", whisperId: "" };
exports.PlayerEntersWhisper = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.whisperRecipient !== "") {
            writer.uint32(18).string(message.whisperRecipient);
        }
        if (message.whisperId !== "") {
            writer.uint32(26).string(message.whisperId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerEntersWhisper);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.whisperRecipient = reader.string();
                    break;
                case 3:
                    message.whisperId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerEntersWhisperV2 = { encId: 0, encIdTarget: 0, whisperId: "" };
exports.PlayerEntersWhisperV2 = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.encIdTarget !== 0) {
            writer.uint32(16).uint32(message.encIdTarget);
        }
        if (message.whisperId !== "") {
            writer.uint32(26).string(message.whisperId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerEntersWhisperV2);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.encIdTarget = reader.uint32();
                    break;
                case 3:
                    message.whisperId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerLeavesWhisper = { encId: 0 };
exports.PlayerLeavesWhisper = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerLeavesWhisper);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerActivelySpeaks = { encId: 0, activelySpeaking: 0 };
exports.PlayerActivelySpeaks = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.activelySpeaking !== 0) {
            writer.uint32(16).uint32(message.activelySpeaking);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerActivelySpeaks);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.activelySpeaking = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsEmoteV2 = { encId: 0 };
exports.PlayerSetsEmoteV2 = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.emote !== undefined) {
            writer.uint32(18).string(message.emote);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsEmoteV2);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.emote = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsNonVerbalCue = { encId: 0 };
exports.PlayerSetsNonVerbalCue = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.nonVerbalCue !== undefined) {
            writer.uint32(18).string(message.nonVerbalCue);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsNonVerbalCue);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.nonVerbalCue = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsWorkCondition = { encId: 0, workCondition: 0 };
exports.PlayerSetsWorkCondition = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.workCondition !== 0) {
            writer.uint32(16).uint32(message.workCondition);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsWorkCondition);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.workCondition = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsLastActive = { encId: 0, lastActive: "" };
exports.PlayerSetsLastActive = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.lastActive !== "") {
            writer.uint32(18).string(message.lastActive);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsLastActive);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.lastActive = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsName = { encId: 0, name: "" };
exports.PlayerSetsName = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsName);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsTextStatus = { encId: 0, textStatus: "" };
exports.PlayerSetsTextStatus = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.textStatus !== "") {
            writer.uint32(18).string(message.textStatus);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsTextStatus);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.textStatus = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsIsMobile = { encId: 0, isMobile: false };
exports.PlayerSetsIsMobile = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.isMobile === true) {
            writer.uint32(16).bool(message.isMobile);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsIsMobile);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.isMobile = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsEmojiStatus = { encId: 0, emojiStatus: "" };
exports.PlayerSetsEmojiStatus = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.emojiStatus !== "") {
            writer.uint32(18).string(message.emojiStatus);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsEmojiStatus);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.emojiStatus = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsAffiliation = { encId: 0, affiliation: "" };
exports.PlayerSetsAffiliation = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.affiliation !== "") {
            writer.uint32(18).string(message.affiliation);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsAffiliation);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.affiliation = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerExits = { encId: 0 };
exports.PlayerExits = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerExits);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsOutfitString = { encId: 0, outfitString: "" };
exports.PlayerSetsOutfitString = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.outfitString !== "") {
            writer.uint32(18).string(message.outfitString);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsOutfitString);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.outfitString = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsIsSignedIn = { encId: 0, isSignedIn: false };
exports.PlayerSetsIsSignedIn = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.isSignedIn === true) {
            writer.uint32(16).bool(message.isSignedIn);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsIsSignedIn);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.isSignedIn = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseRespawnComplete = {};
exports.RespawnComplete = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseRespawnComplete);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSpaceOverwrites = { spaceData: "" };
exports.SpaceOverwrites = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.spaceData !== "") {
            writer.uint32(10).string(message.spaceData);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpaceOverwrites);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.spaceData = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSpaceSetsSpaceMembers = {};
exports.SpaceSetsSpaceMembers = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        Object.entries(message.members).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            exports.SpaceSetsSpaceMembers_MembersEntry.encode({ key: key, value: value }, writer.uint32(10).fork()).ldelim();
        });
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpaceSetsSpaceMembers);
        message.members = {};
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    var entry1 = exports.SpaceSetsSpaceMembers_MembersEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.members[entry1.key] = entry1.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSpaceSetsSpaceMembers_MembersEntry = { key: "" };
exports.SpaceSetsSpaceMembers_MembersEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.SpaceMemberInfo.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpaceSetsSpaceMembers_MembersEntry);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = exports.SpaceMemberInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSpaceIsClosed = {};
exports.SpaceIsClosed = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpaceIsClosed);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerEntersPortal = { targetUrl: "" };
exports.PlayerEntersPortal = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.targetUrl !== "") {
            writer.uint32(10).string(message.targetUrl);
        }
        if (message.bypassPrompt !== undefined) {
            writer.uint32(16).bool(message.bypassPrompt);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerEntersPortal);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.targetUrl = reader.string();
                    break;
                case 2:
                    message.bypassPrompt = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseCookieFound = { encId: 0 };
exports.CookieFound = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseCookieFound);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSpaceSetsIdMapping = { uid: "", encId: 0 };
exports.SpaceSetsIdMapping = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.uid !== "") {
            writer.uint32(10).string(message.uid);
        }
        if (message.encId !== 0) {
            writer.uint32(16).uint32(message.encId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpaceSetsIdMapping);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.uid = reader.string();
                    break;
                case 2:
                    message.encId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerShootsConfetti = { encId: 0 };
exports.PlayerShootsConfetti = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerShootsConfetti);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsEventStatus = { encId: 0, eventStatus: "" };
exports.PlayerSetsEventStatus = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.eventStatus !== "") {
            writer.uint32(18).string(message.eventStatus);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsEventStatus);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.eventStatus = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsInConversation = { encId: 0, inConversation: false };
exports.PlayerSetsInConversation = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.inConversation === true) {
            writer.uint32(16).bool(message.inConversation);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsInConversation);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.inConversation = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsCurrentDesk = { encId: 0, currentDesk: "" };
exports.PlayerSetsCurrentDesk = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.currentDesk !== "") {
            writer.uint32(18).string(message.currentDesk);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsCurrentDesk);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.currentDesk = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsCurrentArea = { encId: 0, currentArea: "" };
exports.PlayerSetsCurrentArea = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.currentArea !== "") {
            writer.uint32(18).string(message.currentArea);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsCurrentArea);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.currentArea = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsGoKartId = { encId: 0, goKartId: "" };
exports.PlayerSetsGoKartId = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.goKartId !== "") {
            writer.uint32(18).string(message.goKartId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsGoKartId);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.goKartId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsVehicleId = { encId: 0, vehicleId: "" };
exports.PlayerSetsVehicleId = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.vehicleId !== "") {
            writer.uint32(18).string(message.vehicleId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsVehicleId);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.vehicleId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsSpeedModifier = { encId: 0, speedModifier: 0 };
exports.PlayerSetsSpeedModifier = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.speedModifier !== 0) {
            writer.uint32(21).float(message.speedModifier);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsSpeedModifier);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.speedModifier = reader.float();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsIsAlone = { encId: 0, isAlone: false };
exports.PlayerSetsIsAlone = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.isAlone === true) {
            writer.uint32(16).bool(message.isAlone);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsIsAlone);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.isAlone = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSpacePlaysSound = { src: "", volume: 0 };
exports.SpacePlaysSound = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.src !== "") {
            writer.uint32(18).string(message.src);
        }
        if (message.volume !== 0) {
            writer.uint32(29).float(message.volume);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpacePlaysSound);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    message.src = reader.string();
                    break;
                case 3:
                    message.volume = reader.float();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsFocusModeEndTime = { encId: 0, focusModeEndTime: "" };
exports.PlayerSetsFocusModeEndTime = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.focusModeEndTime !== "") {
            writer.uint32(18).string(message.focusModeEndTime);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsFocusModeEndTime);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.focusModeEndTime = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerBlocks = { blockedBy: "", blocked: false };
exports.PlayerBlocks = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.blockedBy !== "") {
            writer.uint32(10).string(message.blockedBy);
        }
        if (message.blocked === true) {
            writer.uint32(16).bool(message.blocked);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerBlocks);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.blockedBy = reader.string();
                    break;
                case 2:
                    message.blocked = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseCustomEvent = { name: "", payload: "" };
exports.CustomEvent = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.payload !== "") {
            writer.uint32(18).string(message.payload);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseCustomEvent);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.payload = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerUpdatesFocusModeStatus = { encId: 0, isInFocusMode: false };
exports.PlayerUpdatesFocusModeStatus = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.isInFocusMode === true) {
            writer.uint32(16).bool(message.isInFocusMode);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerUpdatesFocusModeStatus);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.isInFocusMode = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsItemString = { encId: 0, itemString: "" };
exports.PlayerSetsItemString = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.itemString !== "") {
            writer.uint32(18).string(message.itemString);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsItemString);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.itemString = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerTriggersItem = { encId: 0 };
exports.PlayerTriggersItem = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.closestObject !== undefined) {
            writer.uint32(18).string(message.closestObject);
        }
        if (message.closestObjectTemplate !== undefined) {
            writer.uint32(26).string(message.closestObjectTemplate);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerTriggersItem);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.closestObject = reader.string();
                    break;
                case 3:
                    message.closestObjectTemplate = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerNotifies = { encId: 0, notification: "" };
exports.PlayerNotifies = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.notification !== "") {
            writer.uint32(18).string(message.notification);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerNotifies);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.notification = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsFollowTarget = { encId: 0, followTarget: "" };
exports.PlayerSetsFollowTarget = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.followTarget !== "") {
            writer.uint32(18).string(message.followTarget);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsFollowTarget);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.followTarget = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerRequestsToLead = { encId: 0, snapshot: "" };
exports.PlayerRequestsToLead = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.snapshot !== "") {
            writer.uint32(18).string(message.snapshot);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerRequestsToLead);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.snapshot = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsManualVideoSrc = { encId: 0, manualVideoSrc: "" };
exports.PlayerSetsManualVideoSrc = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.manualVideoSrc !== "") {
            writer.uint32(18).string(message.manualVideoSrc);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsManualVideoSrc);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.manualVideoSrc = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsIsNpc = { encId: 0, isNpc: false };
exports.PlayerSetsIsNpc = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.isNpc === true) {
            writer.uint32(16).bool(message.isNpc);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsIsNpc);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.isNpc = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSetsSubtitle = { encId: 0, subtitle: "" };
exports.PlayerSetsSubtitle = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.subtitle !== "") {
            writer.uint32(18).string(message.subtitle);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsSubtitle);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.subtitle = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapMoveObject = { mapId: "", objectId: "", targetX: 0, targetY: 0, duration: 0 };
exports.MapMoveObject = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.objectId !== "") {
            writer.uint32(18).string(message.objectId);
        }
        if (message.targetX !== 0) {
            writer.uint32(29).float(message.targetX);
        }
        if (message.targetY !== 0) {
            writer.uint32(37).float(message.targetY);
        }
        if (message.targetXOffset !== undefined) {
            writer.uint32(45).float(message.targetXOffset);
        }
        if (message.targetYOffset !== undefined) {
            writer.uint32(53).float(message.targetYOffset);
        }
        if (message.duration !== 0) {
            writer.uint32(61).float(message.duration);
        }
        if (message.easing !== undefined) {
            writer.uint32(66).string(message.easing);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapMoveObject);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.objectId = reader.string();
                    break;
                case 3:
                    message.targetX = reader.float();
                    break;
                case 4:
                    message.targetY = reader.float();
                    break;
                case 5:
                    message.targetXOffset = reader.float();
                    break;
                case 6:
                    message.targetYOffset = reader.float();
                    break;
                case 7:
                    message.duration = reader.float();
                    break;
                case 8:
                    message.easing = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerEditsChatMessage = { id: "" };
exports.PlayerEditsChatMessage = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.likes !== undefined) {
            writer.uint32(16).uint32(message.likes);
        }
        if (message.replied !== undefined) {
            writer.uint32(24).bool(message.replied);
        }
        if (message.reply !== undefined) {
            exports.ChatReply.encode(message.reply, writer.uint32(34).fork()).ldelim();
        }
        if (message.approved !== undefined) {
            writer.uint32(40).bool(message.approved);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerEditsChatMessage);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.likes = reader.uint32();
                    break;
                case 3:
                    message.replied = reader.bool();
                    break;
                case 4:
                    message.reply = exports.ChatReply.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.approved = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseFXShakeObject = { mapId: "", targetId: "" };
exports.FXShakeObject = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.targetId !== "") {
            writer.uint32(18).string(message.targetId);
        }
        if (message.intensity !== undefined) {
            writer.uint32(29).float(message.intensity);
        }
        if (message.durationMs !== undefined) {
            writer.uint32(37).float(message.durationMs);
        }
        if (message.mode !== undefined) {
            writer.uint32(40).uint32(message.mode);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseFXShakeObject);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.targetId = reader.string();
                    break;
                case 3:
                    message.intensity = reader.float();
                    break;
                case 4:
                    message.durationMs = reader.float();
                    break;
                case 5:
                    message.mode = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseFXShakeCamera = {};
exports.FXShakeCamera = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.intensity !== undefined) {
            writer.uint32(13).float(message.intensity);
        }
        if (message.durationMs !== undefined) {
            writer.uint32(21).float(message.durationMs);
        }
        if (message.mapId !== undefined) {
            writer.uint32(26).string(message.mapId);
        }
        if (message.targetUserId !== undefined) {
            writer.uint32(34).string(message.targetUserId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseFXShakeCamera);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.intensity = reader.float();
                    break;
                case 2:
                    message.durationMs = reader.float();
                    break;
                case 3:
                    message.mapId = reader.string();
                    break;
                case 4:
                    message.targetUserId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerHighFives = { encId: 0, encIdTarget: 0 };
exports.PlayerHighFives = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.encIdTarget !== 0) {
            writer.uint32(16).uint32(message.encIdTarget);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerHighFives);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.encIdTarget = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerSendsCommand = { encId: 0, command: "" };
exports.PlayerSendsCommand = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.command !== "") {
            writer.uint32(18).string(message.command);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSendsCommand);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.command = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSpaceRegistersCommand = { command: "" };
exports.SpaceRegistersCommand = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.command !== "") {
            writer.uint32(18).string(message.command);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpaceRegistersCommand);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    message.command = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerUpdatesInventory = { encId: 0 };
exports.PlayerUpdatesInventory = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        Object.entries(message.items).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            exports.PlayerUpdatesInventory_ItemsEntry.encode({ key: key, value: value }, writer.uint32(18).fork()).ldelim();
        });
        Object.entries(message.order).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            exports.PlayerUpdatesInventory_OrderEntry.encode({ key: key, value: value }, writer.uint32(26).fork()).ldelim();
        });
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerUpdatesInventory);
        message.items = {};
        message.order = {};
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    var entry2 = exports.PlayerUpdatesInventory_ItemsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.items[entry2.key] = entry2.value;
                    }
                    break;
                case 3:
                    var entry3 = exports.PlayerUpdatesInventory_OrderEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.order[entry3.key] = entry3.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerUpdatesInventory_ItemsEntry = { key: "" };
exports.PlayerUpdatesInventory_ItemsEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.InventoryItem.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerUpdatesInventory_ItemsEntry);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = exports.InventoryItem.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerUpdatesInventory_OrderEntry = { key: "", value: "" };
exports.PlayerUpdatesInventory_OrderEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerUpdatesInventory_OrderEntry);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSpaceUpdatesItems = {};
exports.SpaceUpdatesItems = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        Object.entries(message.items).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            exports.SpaceUpdatesItems_ItemsEntry.encode({ key: key, value: value }, writer.uint32(10).fork()).ldelim();
        });
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpaceUpdatesItems);
        message.items = {};
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    var entry1 = exports.SpaceUpdatesItems_ItemsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.items[entry1.key] = entry1.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSpaceUpdatesItems_ItemsEntry = { key: "" };
exports.SpaceUpdatesItems_ItemsEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.SpaceItem.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpaceUpdatesItems_ItemsEntry);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = exports.SpaceItem.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseClientServerBatch = {};
exports.ClientServerBatch = {
    encode: function (message, writer) {
        var e_14, _a;
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        try {
            for (var _b = __values(message.actions), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.ClientServerAction.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_14_1) { e_14 = { error: e_14_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            }
            finally { if (e_14) throw e_14.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseClientServerBatch);
        message.actions = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.actions.push(exports.ClientServerAction.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseClientServerAction = {};
exports.ClientServerAction = {
    encode: function (message, writer) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70;
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.txnId !== undefined) {
            writer.uint32(800).uint32(message.txnId);
        }
        if (((_a = message.action) === null || _a === void 0 ? void 0 : _a.$case) === "clientHeartbeat") {
            exports.ClientHeartbeat.encode(message.action.clientHeartbeat, writer.uint32(10).fork()).ldelim();
        }
        if (((_b = message.action) === null || _b === void 0 ? void 0 : _b.$case) === "clientBackupHeartbeat") {
            exports.ClientBackupHeartbeat.encode(message.action.clientBackupHeartbeat, writer.uint32(18).fork()).ldelim();
        }
        if (((_c = message.action) === null || _c === void 0 ? void 0 : _c.$case) === "updateSubscriptions") {
            exports.UpdateSubscriptions.encode(message.action.updateSubscriptions, writer.uint32(26).fork()).ldelim();
        }
        if (((_d = message.action) === null || _d === void 0 ? void 0 : _d.$case) === "move") {
            exports.Move.encode(message.action.move, writer.uint32(42).fork()).ldelim();
        }
        if (((_e = message.action) === null || _e === void 0 ? void 0 : _e.$case) === "setAffiliation") {
            exports.SetAffiliation.encode(message.action.setAffiliation, writer.uint32(58).fork()).ldelim();
        }
        if (((_f = message.action) === null || _f === void 0 ? void 0 : _f.$case) === "setStatus") {
            exports.SetStatus.encode(message.action.setStatus, writer.uint32(66).fork()).ldelim();
        }
        if (((_g = message.action) === null || _g === void 0 ? void 0 : _g.$case) === "spotlight") {
            exports.Spotlight.encode(message.action.spotlight, writer.uint32(74).fork()).ldelim();
        }
        if (((_h = message.action) === null || _h === void 0 ? void 0 : _h.$case) === "ring") {
            exports.Ring.encode(message.action.ring, writer.uint32(82).fork()).ldelim();
        }
        if (((_j = message.action) === null || _j === void 0 ? void 0 : _j.$case) === "ban") {
            exports.Ban.encode(message.action.ban, writer.uint32(98).fork()).ldelim();
        }
        if (((_k = message.action) === null || _k === void 0 ? void 0 : _k.$case) === "kick") {
            exports.Kick.encode(message.action.kick, writer.uint32(106).fork()).ldelim();
        }
        if (((_l = message.action) === null || _l === void 0 ? void 0 : _l.$case) === "setImpassable") {
            exports.SetImpassable.encode(message.action.setImpassable, writer.uint32(114).fork()).ldelim();
        }
        if (((_m = message.action) === null || _m === void 0 ? void 0 : _m.$case) === "chat") {
            exports.Chat.encode(message.action.chat, writer.uint32(122).fork()).ldelim();
        }
        if (((_o = message.action) === null || _o === void 0 ? void 0 : _o.$case) === "interact") {
            exports.Interact.encode(message.action.interact, writer.uint32(146).fork()).ldelim();
        }
        if (((_p = message.action) === null || _p === void 0 ? void 0 : _p.$case) === "enterWhisper") {
            exports.EnterWhisper.encode(message.action.enterWhisper, writer.uint32(154).fork()).ldelim();
        }
        if (((_q = message.action) === null || _q === void 0 ? void 0 : _q.$case) === "leaveWhisper") {
            exports.LeaveWhisper.encode(message.action.leaveWhisper, writer.uint32(162).fork()).ldelim();
        }
        if (((_r = message.action) === null || _r === void 0 ? void 0 : _r.$case) === "setEmojiStatus") {
            exports.SetEmojiStatus.encode(message.action.setEmojiStatus, writer.uint32(170).fork()).ldelim();
        }
        if (((_s = message.action) === null || _s === void 0 ? void 0 : _s.$case) === "activelySpeaking") {
            exports.ActivelySpeaking.encode(message.action.activelySpeaking, writer.uint32(178).fork()).ldelim();
        }
        if (((_t = message.action) === null || _t === void 0 ? void 0 : _t.$case) === "setName") {
            exports.SetName.encode(message.action.setName, writer.uint32(194).fork()).ldelim();
        }
        if (((_u = message.action) === null || _u === void 0 ? void 0 : _u.$case) === "setTextStatus") {
            exports.SetTextStatus.encode(message.action.setTextStatus, writer.uint32(202).fork()).ldelim();
        }
        if (((_v = message.action) === null || _v === void 0 ? void 0 : _v.$case) === "teleport") {
            exports.Teleport.encode(message.action.teleport, writer.uint32(210).fork()).ldelim();
        }
        if (((_w = message.action) === null || _w === void 0 ? void 0 : _w.$case) === "exit") {
            exports.Exit.encode(message.action.exit, writer.uint32(218).fork()).ldelim();
        }
        if (((_x = message.action) === null || _x === void 0 ? void 0 : _x.$case) === "enter") {
            exports.Enter.encode(message.action.enter, writer.uint32(226).fork()).ldelim();
        }
        if (((_y = message.action) === null || _y === void 0 ? void 0 : _y.$case) === "setWorkCondition") {
            exports.SetWorkCondition.encode(message.action.setWorkCondition, writer.uint32(234).fork()).ldelim();
        }
        if (((_z = message.action) === null || _z === void 0 ? void 0 : _z.$case) === "respawn") {
            exports.Respawn.encode(message.action.respawn, writer.uint32(242).fork()).ldelim();
        }
        if (((_0 = message.action) === null || _0 === void 0 ? void 0 : _0.$case) === "spawn") {
            exports.Spawn.encode(message.action.spawn, writer.uint32(250).fork()).ldelim();
        }
        if (((_1 = message.action) === null || _1 === void 0 ? void 0 : _1.$case) === "ghost") {
            exports.Ghost.encode(message.action.ghost, writer.uint32(258).fork()).ldelim();
        }
        if (((_2 = message.action) === null || _2 === void 0 ? void 0 : _2.$case) === "init") {
            exports.Init.encode(message.action.init, writer.uint32(266).fork()).ldelim();
        }
        if (((_3 = message.action) === null || _3 === void 0 ? void 0 : _3.$case) === "setOutfitString") {
            exports.SetOutfitString.encode(message.action.setOutfitString, writer.uint32(274).fork()).ldelim();
        }
        if (((_4 = message.action) === null || _4 === void 0 ? void 0 : _4.$case) === "shootConfetti") {
            exports.ShootConfetti.encode(message.action.shootConfetti, writer.uint32(290).fork()).ldelim();
        }
        if (((_5 = message.action) === null || _5 === void 0 ? void 0 : _5.$case) === "setEventStatus") {
            exports.SetEventStatus.encode(message.action.setEventStatus, writer.uint32(298).fork()).ldelim();
        }
        if (((_6 = message.action) === null || _6 === void 0 ? void 0 : _6.$case) === "setInConversation") {
            exports.SetInConversation.encode(message.action.setInConversation, writer.uint32(306).fork()).ldelim();
        }
        if (((_7 = message.action) === null || _7 === void 0 ? void 0 : _7.$case) === "setCurrentDesk") {
            exports.SetCurrentDesk.encode(message.action.setCurrentDesk, writer.uint32(314).fork()).ldelim();
        }
        if (((_8 = message.action) === null || _8 === void 0 ? void 0 : _8.$case) === "setCurrentArea") {
            exports.SetCurrentArea.encode(message.action.setCurrentArea, writer.uint32(322).fork()).ldelim();
        }
        if (((_9 = message.action) === null || _9 === void 0 ? void 0 : _9.$case) === "setImagePointer") {
            exports.SetImagePointer.encode(message.action.setImagePointer, writer.uint32(330).fork()).ldelim();
        }
        if (((_10 = message.action) === null || _10 === void 0 ? void 0 : _10.$case) === "setGoKartId") {
            exports.SetGoKartId.encode(message.action.setGoKartId, writer.uint32(338).fork()).ldelim();
        }
        if (((_11 = message.action) === null || _11 === void 0 ? void 0 : _11.$case) === "mapSetDimensions") {
            exports.MapSetDimensions.encode(message.action.mapSetDimensions, writer.uint32(346).fork()).ldelim();
        }
        if (((_12 = message.action) === null || _12 === void 0 ? void 0 : _12.$case) === "mapSetCollisions") {
            exports.MapSetCollisions.encode(message.action.mapSetCollisions, writer.uint32(354).fork()).ldelim();
        }
        if (((_13 = message.action) === null || _13 === void 0 ? void 0 : _13.$case) === "mapSetBackgroundImagePath") {
            exports.MapSetBackgroundImagePath.encode(message.action.mapSetBackgroundImagePath, writer.uint32(362).fork()).ldelim();
        }
        if (((_14 = message.action) === null || _14 === void 0 ? void 0 : _14.$case) === "mapSetForegroundImagePath") {
            exports.MapSetForegroundImagePath.encode(message.action.mapSetForegroundImagePath, writer.uint32(370).fork()).ldelim();
        }
        if (((_15 = message.action) === null || _15 === void 0 ? void 0 : _15.$case) === "mapSetSprites") {
            exports.MapSetSprites.encode(message.action.mapSetSprites, writer.uint32(378).fork()).ldelim();
        }
        if (((_16 = message.action) === null || _16 === void 0 ? void 0 : _16.$case) === "mapSetSpawns") {
            exports.MapSetSpawns.encode(message.action.mapSetSpawns, writer.uint32(386).fork()).ldelim();
        }
        if (((_17 = message.action) === null || _17 === void 0 ? void 0 : _17.$case) === "mapSetSpaces") {
            exports.MapSetSpaces.encode(message.action.mapSetSpaces, writer.uint32(394).fork()).ldelim();
        }
        if (((_18 = message.action) === null || _18 === void 0 ? void 0 : _18.$case) === "mapSetPortals") {
            exports.MapSetPortals.encode(message.action.mapSetPortals, writer.uint32(402).fork()).ldelim();
        }
        if (((_19 = message.action) === null || _19 === void 0 ? void 0 : _19.$case) === "mapSetAnnouncer") {
            exports.MapSetAnnouncer.encode(message.action.mapSetAnnouncer, writer.uint32(410).fork()).ldelim();
        }
        if (((_20 = message.action) === null || _20 === void 0 ? void 0 : _20.$case) === "mapSetAssets") {
            exports.MapSetAssets.encode(message.action.mapSetAssets, writer.uint32(434).fork()).ldelim();
        }
        if (((_21 = message.action) === null || _21 === void 0 ? void 0 : _21.$case) === "mapSetObjects") {
            exports.MapSetObjects.encode(message.action.mapSetObjects, writer.uint32(442).fork()).ldelim();
        }
        if (((_22 = message.action) === null || _22 === void 0 ? void 0 : _22.$case) === "mapSetName") {
            exports.MapSetName.encode(message.action.mapSetName, writer.uint32(450).fork()).ldelim();
        }
        if (((_23 = message.action) === null || _23 === void 0 ? void 0 : _23.$case) === "mapSetMuteOnEntry") {
            exports.MapSetMuteOnEntry.encode(message.action.mapSetMuteOnEntry, writer.uint32(466).fork()).ldelim();
        }
        if (((_24 = message.action) === null || _24 === void 0 ? void 0 : _24.$case) === "mapSetUseDrawnBG") {
            exports.MapSetUseDrawnBG.encode(message.action.mapSetUseDrawnBG, writer.uint32(474).fork()).ldelim();
        }
        if (((_25 = message.action) === null || _25 === void 0 ? void 0 : _25.$case) === "mapSetWalls") {
            exports.MapSetWalls.encode(message.action.mapSetWalls, writer.uint32(482).fork()).ldelim();
        }
        if (((_26 = message.action) === null || _26 === void 0 ? void 0 : _26.$case) === "mapSetFloors") {
            exports.MapSetFloors.encode(message.action.mapSetFloors, writer.uint32(490).fork()).ldelim();
        }
        if (((_27 = message.action) === null || _27 === void 0 ? void 0 : _27.$case) === "mapSetAreas") {
            exports.MapSetAreas.encode(message.action.mapSetAreas, writer.uint32(498).fork()).ldelim();
        }
        if (((_28 = message.action) === null || _28 === void 0 ? void 0 : _28.$case) === "mapAddObject") {
            exports.MapAddObject.encode(message.action.mapAddObject, writer.uint32(506).fork()).ldelim();
        }
        if (((_29 = message.action) === null || _29 === void 0 ? void 0 : _29.$case) === "mapDeleteObject") {
            exports.MapDeleteObject.encode(message.action.mapDeleteObject, writer.uint32(514).fork()).ldelim();
        }
        if (((_30 = message.action) === null || _30 === void 0 ? void 0 : _30.$case) === "mapSetSpawn") {
            exports.MapSetSpawn.encode(message.action.mapSetSpawn, writer.uint32(522).fork()).ldelim();
        }
        if (((_31 = message.action) === null || _31 === void 0 ? void 0 : _31.$case) === "setIsAlone") {
            exports.SetIsAlone.encode(message.action.setIsAlone, writer.uint32(530).fork()).ldelim();
        }
        if (((_32 = message.action) === null || _32 === void 0 ? void 0 : _32.$case) === "mapSetMiniMapImagePath") {
            exports.MapSetMiniMapImagePath.encode(message.action.mapSetMiniMapImagePath, writer.uint32(538).fork()).ldelim();
        }
        if (((_33 = message.action) === null || _33 === void 0 ? void 0 : _33.$case) === "mapSetEnabledChats") {
            exports.MapSetEnabledChats.encode(message.action.mapSetEnabledChats, writer.uint32(546).fork()).ldelim();
        }
        if (((_34 = message.action) === null || _34 === void 0 ? void 0 : _34.$case) === "mapSetDescription") {
            exports.MapSetDescription.encode(message.action.mapSetDescription, writer.uint32(554).fork()).ldelim();
        }
        if (((_35 = message.action) === null || _35 === void 0 ? void 0 : _35.$case) === "mapSetDecoration") {
            exports.MapSetDecoration.encode(message.action.mapSetDecoration, writer.uint32(562).fork()).ldelim();
        }
        if (((_36 = message.action) === null || _36 === void 0 ? void 0 : _36.$case) === "mapSetTutorialTasks") {
            exports.MapSetTutorialTasks.encode(message.action.mapSetTutorialTasks, writer.uint32(570).fork()).ldelim();
        }
        if (((_37 = message.action) === null || _37 === void 0 ? void 0 : _37.$case) === "playSound") {
            exports.PlaySound.encode(message.action.playSound, writer.uint32(578).fork()).ldelim();
        }
        if (((_38 = message.action) === null || _38 === void 0 ? void 0 : _38.$case) === "mapSetScript") {
            exports.MapSetScript.encode(message.action.mapSetScript, writer.uint32(586).fork()).ldelim();
        }
        if (((_39 = message.action) === null || _39 === void 0 ? void 0 : _39.$case) === "mapSetDesks") {
            exports.MapSetDesks.encode(message.action.mapSetDesks, writer.uint32(594).fork()).ldelim();
        }
        if (((_40 = message.action) === null || _40 === void 0 ? void 0 : _40.$case) === "setIsMobile") {
            exports.SetIsMobile.encode(message.action.setIsMobile, writer.uint32(602).fork()).ldelim();
        }
        if (((_41 = message.action) === null || _41 === void 0 ? void 0 : _41.$case) === "setScreenPointer") {
            exports.SetScreenPointer.encode(message.action.setScreenPointer, writer.uint32(610).fork()).ldelim();
        }
        if (((_42 = message.action) === null || _42 === void 0 ? void 0 : _42.$case) === "setEmoteV2") {
            exports.SetEmoteV2.encode(message.action.setEmoteV2, writer.uint32(618).fork()).ldelim();
        }
        if (((_43 = message.action) === null || _43 === void 0 ? void 0 : _43.$case) === "setFocusModeEndTime") {
            exports.SetFocusModeEndTime.encode(message.action.setFocusModeEndTime, writer.uint32(626).fork()).ldelim();
        }
        if (((_44 = message.action) === null || _44 === void 0 ? void 0 : _44.$case) === "mapDeleteObjectById") {
            exports.MapDeleteObjectById.encode(message.action.mapDeleteObjectById, writer.uint32(634).fork()).ldelim();
        }
        if (((_45 = message.action) === null || _45 === void 0 ? void 0 : _45.$case) === "customAction") {
            exports.CustomAction.encode(message.action.customAction, writer.uint32(642).fork()).ldelim();
        }
        if (((_46 = message.action) === null || _46 === void 0 ? void 0 : _46.$case) === "block") {
            exports.Block.encode(message.action.block, writer.uint32(658).fork()).ldelim();
        }
        if (((_47 = message.action) === null || _47 === void 0 ? void 0 : _47.$case) === "setItemString") {
            exports.SetItemString.encode(message.action.setItemString, writer.uint32(666).fork()).ldelim();
        }
        if (((_48 = message.action) === null || _48 === void 0 ? void 0 : _48.$case) === "triggerItem") {
            exports.TriggerItem.encode(message.action.triggerItem, writer.uint32(674).fork()).ldelim();
        }
        if (((_49 = message.action) === null || _49 === void 0 ? void 0 : _49.$case) === "notify") {
            exports.Notify.encode(message.action.notify, writer.uint32(682).fork()).ldelim();
        }
        if (((_50 = message.action) === null || _50 === void 0 ? void 0 : _50.$case) === "setFollowTarget") {
            exports.SetFollowTarget.encode(message.action.setFollowTarget, writer.uint32(690).fork()).ldelim();
        }
        if (((_51 = message.action) === null || _51 === void 0 ? void 0 : _51.$case) === "requestToLead") {
            exports.RequestToLead.encode(message.action.requestToLead, writer.uint32(698).fork()).ldelim();
        }
        if (((_52 = message.action) === null || _52 === void 0 ? void 0 : _52.$case) === "enterPortal") {
            exports.EnterPortal.encode(message.action.enterPortal, writer.uint32(706).fork()).ldelim();
        }
        if (((_53 = message.action) === null || _53 === void 0 ? void 0 : _53.$case) === "setManualVideoSrc") {
            exports.SetManualVideoSrc.encode(message.action.setManualVideoSrc, writer.uint32(714).fork()).ldelim();
        }
        if (((_54 = message.action) === null || _54 === void 0 ? void 0 : _54.$case) === "setSubtitle") {
            exports.SetSubtitle.encode(message.action.setSubtitle, writer.uint32(722).fork()).ldelim();
        }
        if (((_55 = message.action) === null || _55 === void 0 ? void 0 : _55.$case) === "playerUpdatesSession") {
            exports.PlayerUpdatesSession.encode(message.action.playerUpdatesSession, writer.uint32(730).fork()).ldelim();
        }
        if (((_56 = message.action) === null || _56 === void 0 ? void 0 : _56.$case) === "mapMoveObject") {
            exports.MapMoveObject.encode(message.action.mapMoveObject, writer.uint32(738).fork()).ldelim();
        }
        if (((_57 = message.action) === null || _57 === void 0 ? void 0 : _57.$case) === "chatMessageUpdated") {
            exports.ChatMessageUpdated.encode(message.action.chatMessageUpdated, writer.uint32(746).fork()).ldelim();
        }
        if (((_58 = message.action) === null || _58 === void 0 ? void 0 : _58.$case) === "fxShakeObject") {
            exports.FXShakeObject.encode(message.action.fxShakeObject, writer.uint32(754).fork()).ldelim();
        }
        if (((_59 = message.action) === null || _59 === void 0 ? void 0 : _59.$case) === "fxShakeCamera") {
            exports.FXShakeCamera.encode(message.action.fxShakeCamera, writer.uint32(762).fork()).ldelim();
        }
        if (((_60 = message.action) === null || _60 === void 0 ? void 0 : _60.$case) === "registerCommand") {
            exports.RegisterCommand.encode(message.action.registerCommand, writer.uint32(770).fork()).ldelim();
        }
        if (((_61 = message.action) === null || _61 === void 0 ? void 0 : _61.$case) === "sendCommand") {
            exports.SendCommand.encode(message.action.sendCommand, writer.uint32(778).fork()).ldelim();
        }
        if (((_62 = message.action) === null || _62 === void 0 ? void 0 : _62.$case) === "speakerUpdatesSession") {
            exports.SpeakerUpdatesSession.encode(message.action.speakerUpdatesSession, writer.uint32(786).fork()).ldelim();
        }
        if (((_63 = message.action) === null || _63 === void 0 ? void 0 : _63.$case) === "setArbitraryMapData") {
            exports.SetArbitraryMapData.encode(message.action.setArbitraryMapData, writer.uint32(794).fork()).ldelim();
        }
        if (((_64 = message.action) === null || _64 === void 0 ? void 0 : _64.$case) === "addInventoryItem") {
            exports.AddInventoryItem.encode(message.action.addInventoryItem, writer.uint32(810).fork()).ldelim();
        }
        if (((_65 = message.action) === null || _65 === void 0 ? void 0 : _65.$case) === "removeInventoryItem") {
            exports.RemoveInventoryItem.encode(message.action.removeInventoryItem, writer.uint32(818).fork()).ldelim();
        }
        if (((_66 = message.action) === null || _66 === void 0 ? void 0 : _66.$case) === "setVehicleId") {
            exports.SetVehicleId.encode(message.action.setVehicleId, writer.uint32(826).fork()).ldelim();
        }
        if (((_67 = message.action) === null || _67 === void 0 ? void 0 : _67.$case) === "setSpeedModifier") {
            exports.SetSpeedModifier.encode(message.action.setSpeedModifier, writer.uint32(834).fork()).ldelim();
        }
        if (((_68 = message.action) === null || _68 === void 0 ? void 0 : _68.$case) === "highFive") {
            exports.HighFive.encode(message.action.highFive, writer.uint32(842).fork()).ldelim();
        }
        if (((_69 = message.action) === null || _69 === void 0 ? void 0 : _69.$case) === "setNonVerbalCue") {
            exports.SetNonVerbalCue.encode(message.action.setNonVerbalCue, writer.uint32(850).fork()).ldelim();
        }
        if (((_70 = message.action) === null || _70 === void 0 ? void 0 : _70.$case) === "updateSpaceItems") {
            exports.SpaceUpdatesItems.encode(message.action.updateSpaceItems, writer.uint32(858).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseClientServerAction);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 100:
                    message.txnId = reader.uint32();
                    break;
                case 1:
                    message.action = {
                        $case: "clientHeartbeat",
                        clientHeartbeat: exports.ClientHeartbeat.decode(reader, reader.uint32())
                    };
                    break;
                case 2:
                    message.action = {
                        $case: "clientBackupHeartbeat",
                        clientBackupHeartbeat: exports.ClientBackupHeartbeat.decode(reader, reader.uint32())
                    };
                    break;
                case 3:
                    message.action = {
                        $case: "updateSubscriptions",
                        updateSubscriptions: exports.UpdateSubscriptions.decode(reader, reader.uint32())
                    };
                    break;
                case 5:
                    message.action = { $case: "move", move: exports.Move.decode(reader, reader.uint32()) };
                    break;
                case 7:
                    message.action = {
                        $case: "setAffiliation",
                        setAffiliation: exports.SetAffiliation.decode(reader, reader.uint32())
                    };
                    break;
                case 8:
                    message.action = {
                        $case: "setStatus",
                        setStatus: exports.SetStatus.decode(reader, reader.uint32())
                    };
                    break;
                case 9:
                    message.action = {
                        $case: "spotlight",
                        spotlight: exports.Spotlight.decode(reader, reader.uint32())
                    };
                    break;
                case 10:
                    message.action = { $case: "ring", ring: exports.Ring.decode(reader, reader.uint32()) };
                    break;
                case 12:
                    message.action = { $case: "ban", ban: exports.Ban.decode(reader, reader.uint32()) };
                    break;
                case 13:
                    message.action = { $case: "kick", kick: exports.Kick.decode(reader, reader.uint32()) };
                    break;
                case 14:
                    message.action = {
                        $case: "setImpassable",
                        setImpassable: exports.SetImpassable.decode(reader, reader.uint32())
                    };
                    break;
                case 15:
                    message.action = { $case: "chat", chat: exports.Chat.decode(reader, reader.uint32()) };
                    break;
                case 18:
                    message.action = {
                        $case: "interact",
                        interact: exports.Interact.decode(reader, reader.uint32())
                    };
                    break;
                case 19:
                    message.action = {
                        $case: "enterWhisper",
                        enterWhisper: exports.EnterWhisper.decode(reader, reader.uint32())
                    };
                    break;
                case 20:
                    message.action = {
                        $case: "leaveWhisper",
                        leaveWhisper: exports.LeaveWhisper.decode(reader, reader.uint32())
                    };
                    break;
                case 21:
                    message.action = {
                        $case: "setEmojiStatus",
                        setEmojiStatus: exports.SetEmojiStatus.decode(reader, reader.uint32())
                    };
                    break;
                case 22:
                    message.action = {
                        $case: "activelySpeaking",
                        activelySpeaking: exports.ActivelySpeaking.decode(reader, reader.uint32())
                    };
                    break;
                case 24:
                    message.action = { $case: "setName", setName: exports.SetName.decode(reader, reader.uint32()) };
                    break;
                case 25:
                    message.action = {
                        $case: "setTextStatus",
                        setTextStatus: exports.SetTextStatus.decode(reader, reader.uint32())
                    };
                    break;
                case 26:
                    message.action = {
                        $case: "teleport",
                        teleport: exports.Teleport.decode(reader, reader.uint32())
                    };
                    break;
                case 27:
                    message.action = { $case: "exit", exit: exports.Exit.decode(reader, reader.uint32()) };
                    break;
                case 28:
                    message.action = { $case: "enter", enter: exports.Enter.decode(reader, reader.uint32()) };
                    break;
                case 29:
                    message.action = {
                        $case: "setWorkCondition",
                        setWorkCondition: exports.SetWorkCondition.decode(reader, reader.uint32())
                    };
                    break;
                case 30:
                    message.action = { $case: "respawn", respawn: exports.Respawn.decode(reader, reader.uint32()) };
                    break;
                case 31:
                    message.action = { $case: "spawn", spawn: exports.Spawn.decode(reader, reader.uint32()) };
                    break;
                case 32:
                    message.action = { $case: "ghost", ghost: exports.Ghost.decode(reader, reader.uint32()) };
                    break;
                case 33:
                    message.action = { $case: "init", init: exports.Init.decode(reader, reader.uint32()) };
                    break;
                case 34:
                    message.action = {
                        $case: "setOutfitString",
                        setOutfitString: exports.SetOutfitString.decode(reader, reader.uint32())
                    };
                    break;
                case 36:
                    message.action = {
                        $case: "shootConfetti",
                        shootConfetti: exports.ShootConfetti.decode(reader, reader.uint32())
                    };
                    break;
                case 37:
                    message.action = {
                        $case: "setEventStatus",
                        setEventStatus: exports.SetEventStatus.decode(reader, reader.uint32())
                    };
                    break;
                case 38:
                    message.action = {
                        $case: "setInConversation",
                        setInConversation: exports.SetInConversation.decode(reader, reader.uint32())
                    };
                    break;
                case 39:
                    message.action = {
                        $case: "setCurrentDesk",
                        setCurrentDesk: exports.SetCurrentDesk.decode(reader, reader.uint32())
                    };
                    break;
                case 40:
                    message.action = {
                        $case: "setCurrentArea",
                        setCurrentArea: exports.SetCurrentArea.decode(reader, reader.uint32())
                    };
                    break;
                case 41:
                    message.action = {
                        $case: "setImagePointer",
                        setImagePointer: exports.SetImagePointer.decode(reader, reader.uint32())
                    };
                    break;
                case 42:
                    message.action = {
                        $case: "setGoKartId",
                        setGoKartId: exports.SetGoKartId.decode(reader, reader.uint32())
                    };
                    break;
                case 43:
                    message.action = {
                        $case: "mapSetDimensions",
                        mapSetDimensions: exports.MapSetDimensions.decode(reader, reader.uint32())
                    };
                    break;
                case 44:
                    message.action = {
                        $case: "mapSetCollisions",
                        mapSetCollisions: exports.MapSetCollisions.decode(reader, reader.uint32())
                    };
                    break;
                case 45:
                    message.action = {
                        $case: "mapSetBackgroundImagePath",
                        mapSetBackgroundImagePath: exports.MapSetBackgroundImagePath.decode(reader, reader.uint32())
                    };
                    break;
                case 46:
                    message.action = {
                        $case: "mapSetForegroundImagePath",
                        mapSetForegroundImagePath: exports.MapSetForegroundImagePath.decode(reader, reader.uint32())
                    };
                    break;
                case 47:
                    message.action = {
                        $case: "mapSetSprites",
                        mapSetSprites: exports.MapSetSprites.decode(reader, reader.uint32())
                    };
                    break;
                case 48:
                    message.action = {
                        $case: "mapSetSpawns",
                        mapSetSpawns: exports.MapSetSpawns.decode(reader, reader.uint32())
                    };
                    break;
                case 49:
                    message.action = {
                        $case: "mapSetSpaces",
                        mapSetSpaces: exports.MapSetSpaces.decode(reader, reader.uint32())
                    };
                    break;
                case 50:
                    message.action = {
                        $case: "mapSetPortals",
                        mapSetPortals: exports.MapSetPortals.decode(reader, reader.uint32())
                    };
                    break;
                case 51:
                    message.action = {
                        $case: "mapSetAnnouncer",
                        mapSetAnnouncer: exports.MapSetAnnouncer.decode(reader, reader.uint32())
                    };
                    break;
                case 54:
                    message.action = {
                        $case: "mapSetAssets",
                        mapSetAssets: exports.MapSetAssets.decode(reader, reader.uint32())
                    };
                    break;
                case 55:
                    message.action = {
                        $case: "mapSetObjects",
                        mapSetObjects: exports.MapSetObjects.decode(reader, reader.uint32())
                    };
                    break;
                case 56:
                    message.action = {
                        $case: "mapSetName",
                        mapSetName: exports.MapSetName.decode(reader, reader.uint32())
                    };
                    break;
                case 58:
                    message.action = {
                        $case: "mapSetMuteOnEntry",
                        mapSetMuteOnEntry: exports.MapSetMuteOnEntry.decode(reader, reader.uint32())
                    };
                    break;
                case 59:
                    message.action = {
                        $case: "mapSetUseDrawnBG",
                        mapSetUseDrawnBG: exports.MapSetUseDrawnBG.decode(reader, reader.uint32())
                    };
                    break;
                case 60:
                    message.action = {
                        $case: "mapSetWalls",
                        mapSetWalls: exports.MapSetWalls.decode(reader, reader.uint32())
                    };
                    break;
                case 61:
                    message.action = {
                        $case: "mapSetFloors",
                        mapSetFloors: exports.MapSetFloors.decode(reader, reader.uint32())
                    };
                    break;
                case 62:
                    message.action = {
                        $case: "mapSetAreas",
                        mapSetAreas: exports.MapSetAreas.decode(reader, reader.uint32())
                    };
                    break;
                case 63:
                    message.action = {
                        $case: "mapAddObject",
                        mapAddObject: exports.MapAddObject.decode(reader, reader.uint32())
                    };
                    break;
                case 64:
                    message.action = {
                        $case: "mapDeleteObject",
                        mapDeleteObject: exports.MapDeleteObject.decode(reader, reader.uint32())
                    };
                    break;
                case 65:
                    message.action = {
                        $case: "mapSetSpawn",
                        mapSetSpawn: exports.MapSetSpawn.decode(reader, reader.uint32())
                    };
                    break;
                case 66:
                    message.action = {
                        $case: "setIsAlone",
                        setIsAlone: exports.SetIsAlone.decode(reader, reader.uint32())
                    };
                    break;
                case 67:
                    message.action = {
                        $case: "mapSetMiniMapImagePath",
                        mapSetMiniMapImagePath: exports.MapSetMiniMapImagePath.decode(reader, reader.uint32())
                    };
                    break;
                case 68:
                    message.action = {
                        $case: "mapSetEnabledChats",
                        mapSetEnabledChats: exports.MapSetEnabledChats.decode(reader, reader.uint32())
                    };
                    break;
                case 69:
                    message.action = {
                        $case: "mapSetDescription",
                        mapSetDescription: exports.MapSetDescription.decode(reader, reader.uint32())
                    };
                    break;
                case 70:
                    message.action = {
                        $case: "mapSetDecoration",
                        mapSetDecoration: exports.MapSetDecoration.decode(reader, reader.uint32())
                    };
                    break;
                case 71:
                    message.action = {
                        $case: "mapSetTutorialTasks",
                        mapSetTutorialTasks: exports.MapSetTutorialTasks.decode(reader, reader.uint32())
                    };
                    break;
                case 72:
                    message.action = {
                        $case: "playSound",
                        playSound: exports.PlaySound.decode(reader, reader.uint32())
                    };
                    break;
                case 73:
                    message.action = {
                        $case: "mapSetScript",
                        mapSetScript: exports.MapSetScript.decode(reader, reader.uint32())
                    };
                    break;
                case 74:
                    message.action = {
                        $case: "mapSetDesks",
                        mapSetDesks: exports.MapSetDesks.decode(reader, reader.uint32())
                    };
                    break;
                case 75:
                    message.action = {
                        $case: "setIsMobile",
                        setIsMobile: exports.SetIsMobile.decode(reader, reader.uint32())
                    };
                    break;
                case 76:
                    message.action = {
                        $case: "setScreenPointer",
                        setScreenPointer: exports.SetScreenPointer.decode(reader, reader.uint32())
                    };
                    break;
                case 77:
                    message.action = {
                        $case: "setEmoteV2",
                        setEmoteV2: exports.SetEmoteV2.decode(reader, reader.uint32())
                    };
                    break;
                case 78:
                    message.action = {
                        $case: "setFocusModeEndTime",
                        setFocusModeEndTime: exports.SetFocusModeEndTime.decode(reader, reader.uint32())
                    };
                    break;
                case 79:
                    message.action = {
                        $case: "mapDeleteObjectById",
                        mapDeleteObjectById: exports.MapDeleteObjectById.decode(reader, reader.uint32())
                    };
                    break;
                case 80:
                    message.action = {
                        $case: "customAction",
                        customAction: exports.CustomAction.decode(reader, reader.uint32())
                    };
                    break;
                case 82:
                    message.action = { $case: "block", block: exports.Block.decode(reader, reader.uint32()) };
                    break;
                case 83:
                    message.action = {
                        $case: "setItemString",
                        setItemString: exports.SetItemString.decode(reader, reader.uint32())
                    };
                    break;
                case 84:
                    message.action = {
                        $case: "triggerItem",
                        triggerItem: exports.TriggerItem.decode(reader, reader.uint32())
                    };
                    break;
                case 85:
                    message.action = { $case: "notify", notify: exports.Notify.decode(reader, reader.uint32()) };
                    break;
                case 86:
                    message.action = {
                        $case: "setFollowTarget",
                        setFollowTarget: exports.SetFollowTarget.decode(reader, reader.uint32())
                    };
                    break;
                case 87:
                    message.action = {
                        $case: "requestToLead",
                        requestToLead: exports.RequestToLead.decode(reader, reader.uint32())
                    };
                    break;
                case 88:
                    message.action = {
                        $case: "enterPortal",
                        enterPortal: exports.EnterPortal.decode(reader, reader.uint32())
                    };
                    break;
                case 89:
                    message.action = {
                        $case: "setManualVideoSrc",
                        setManualVideoSrc: exports.SetManualVideoSrc.decode(reader, reader.uint32())
                    };
                    break;
                case 90:
                    message.action = {
                        $case: "setSubtitle",
                        setSubtitle: exports.SetSubtitle.decode(reader, reader.uint32())
                    };
                    break;
                case 91:
                    message.action = {
                        $case: "playerUpdatesSession",
                        playerUpdatesSession: exports.PlayerUpdatesSession.decode(reader, reader.uint32())
                    };
                    break;
                case 92:
                    message.action = {
                        $case: "mapMoveObject",
                        mapMoveObject: exports.MapMoveObject.decode(reader, reader.uint32())
                    };
                    break;
                case 93:
                    message.action = {
                        $case: "chatMessageUpdated",
                        chatMessageUpdated: exports.ChatMessageUpdated.decode(reader, reader.uint32())
                    };
                    break;
                case 94:
                    message.action = {
                        $case: "fxShakeObject",
                        fxShakeObject: exports.FXShakeObject.decode(reader, reader.uint32())
                    };
                    break;
                case 95:
                    message.action = {
                        $case: "fxShakeCamera",
                        fxShakeCamera: exports.FXShakeCamera.decode(reader, reader.uint32())
                    };
                    break;
                case 96:
                    message.action = {
                        $case: "registerCommand",
                        registerCommand: exports.RegisterCommand.decode(reader, reader.uint32())
                    };
                    break;
                case 97:
                    message.action = {
                        $case: "sendCommand",
                        sendCommand: exports.SendCommand.decode(reader, reader.uint32())
                    };
                    break;
                case 98:
                    message.action = {
                        $case: "speakerUpdatesSession",
                        speakerUpdatesSession: exports.SpeakerUpdatesSession.decode(reader, reader.uint32())
                    };
                    break;
                case 99:
                    message.action = {
                        $case: "setArbitraryMapData",
                        setArbitraryMapData: exports.SetArbitraryMapData.decode(reader, reader.uint32())
                    };
                    break;
                case 101:
                    message.action = {
                        $case: "addInventoryItem",
                        addInventoryItem: exports.AddInventoryItem.decode(reader, reader.uint32())
                    };
                    break;
                case 102:
                    message.action = {
                        $case: "removeInventoryItem",
                        removeInventoryItem: exports.RemoveInventoryItem.decode(reader, reader.uint32())
                    };
                    break;
                case 103:
                    message.action = {
                        $case: "setVehicleId",
                        setVehicleId: exports.SetVehicleId.decode(reader, reader.uint32())
                    };
                    break;
                case 104:
                    message.action = {
                        $case: "setSpeedModifier",
                        setSpeedModifier: exports.SetSpeedModifier.decode(reader, reader.uint32())
                    };
                    break;
                case 105:
                    message.action = {
                        $case: "highFive",
                        highFive: exports.HighFive.decode(reader, reader.uint32())
                    };
                    break;
                case 106:
                    message.action = {
                        $case: "setNonVerbalCue",
                        setNonVerbalCue: exports.SetNonVerbalCue.decode(reader, reader.uint32())
                    };
                    break;
                case 107:
                    message.action = {
                        $case: "updateSpaceItems",
                        updateSpaceItems: exports.SpaceUpdatesItems.decode(reader, reader.uint32())
                    };
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseClientHeartbeat = {};
exports.ClientHeartbeat = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseClientHeartbeat);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseClientBackupHeartbeat = {};
exports.ClientBackupHeartbeat = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseClientBackupHeartbeat);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseUpdateSubscriptions = {};
exports.UpdateSubscriptions = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        Object.entries(message.subscriptions).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            exports.UpdateSubscriptions_SubscriptionsEntry.encode({ key: key, value: value }, writer.uint32(10).fork()).ldelim();
        });
        Object.entries(message.mapUpdateIds).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            exports.UpdateSubscriptions_MapUpdateIdsEntry.encode({ key: key, value: value }, writer.uint32(18).fork()).ldelim();
        });
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseUpdateSubscriptions);
        message.subscriptions = {};
        message.mapUpdateIds = {};
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    var entry1 = exports.UpdateSubscriptions_SubscriptionsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.subscriptions[entry1.key] = entry1.value;
                    }
                    break;
                case 2:
                    var entry2 = exports.UpdateSubscriptions_MapUpdateIdsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.mapUpdateIds[entry2.key] = entry2.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseUpdateSubscriptions_SubscriptionsEntry = { key: "", value: false };
exports.UpdateSubscriptions_SubscriptionsEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value === true) {
            writer.uint32(16).bool(message.value);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseUpdateSubscriptions_SubscriptionsEntry);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseUpdateSubscriptions_MapUpdateIdsEntry = { key: "", value: 0 };
exports.UpdateSubscriptions_MapUpdateIdsEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(16).uint64(message.value);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseUpdateSubscriptions_MapUpdateIdsEntry);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = longToNumber(reader.uint64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMove = { dir: 0, stopped: false, inputId: 0 };
exports.Move = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.dir !== 0) {
            writer.uint32(8).int32(message.dir);
        }
        if (message.stopped === true) {
            writer.uint32(16).bool(message.stopped);
        }
        if (message.inputId !== 0) {
            writer.uint32(24).uint32(message.inputId);
        }
        if (message.targetId !== undefined) {
            writer.uint32(34).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMove);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.dir = reader.int32();
                    break;
                case 2:
                    message.stopped = reader.bool();
                    break;
                case 3:
                    message.inputId = reader.uint32();
                    break;
                case 4:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetAffiliation = { affiliation: "" };
exports.SetAffiliation = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.affiliation !== "") {
            writer.uint32(10).string(message.affiliation);
        }
        if (message.targetId !== undefined) {
            writer.uint32(18).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetAffiliation);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.affiliation = reader.string();
                    break;
                case 2:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetStatus = { status: false };
exports.SetStatus = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.status === true) {
            writer.uint32(8).bool(message.status);
        }
        if (message.targetId !== undefined) {
            writer.uint32(18).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetStatus);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.status = reader.bool();
                    break;
                case 2:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetOutfitString = { outfitString: "" };
exports.SetOutfitString = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.outfitString !== "") {
            writer.uint32(10).string(message.outfitString);
        }
        if (message.targetId !== undefined) {
            writer.uint32(26).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetOutfitString);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.outfitString = reader.string();
                    break;
                case 3:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSpotlight = { spotlightedUser: "", isSpotlighted: false };
exports.Spotlight = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.spotlightedUser !== "") {
            writer.uint32(10).string(message.spotlightedUser);
        }
        if (message.isSpotlighted === true) {
            writer.uint32(16).bool(message.isSpotlighted);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpotlight);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.spotlightedUser = reader.string();
                    break;
                case 2:
                    message.isSpotlighted = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseRing = { user: "" };
exports.Ring = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.user !== "") {
            writer.uint32(10).string(message.user);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseRing);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.user = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetImagePointer = { objectId: "", x: 0, y: 0 };
exports.SetImagePointer = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.objectId !== "") {
            writer.uint32(10).string(message.objectId);
        }
        if (message.x !== 0) {
            writer.uint32(17).double(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(25).double(message.y);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetImagePointer);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.objectId = reader.string();
                    break;
                case 2:
                    message.x = reader.double();
                    break;
                case 3:
                    message.y = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetScreenPointer = { screenId: "", x: 0, y: 0 };
exports.SetScreenPointer = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.screenId !== "") {
            writer.uint32(10).string(message.screenId);
        }
        if (message.x !== 0) {
            writer.uint32(17).double(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(25).double(message.y);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetScreenPointer);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.screenId = reader.string();
                    break;
                case 2:
                    message.x = reader.double();
                    break;
                case 3:
                    message.y = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseBan = { user: "" };
exports.Ban = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.user !== "") {
            writer.uint32(10).string(message.user);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseBan);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.user = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseKick = { user: "" };
exports.Kick = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.user !== "") {
            writer.uint32(10).string(message.user);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseKick);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.user = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseBlock = { blockedUserId: "", blocked: false };
exports.Block = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.blockedUserId !== "") {
            writer.uint32(10).string(message.blockedUserId);
        }
        if (message.blocked === true) {
            writer.uint32(16).bool(message.blocked);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseBlock);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.blockedUserId = reader.string();
                    break;
                case 2:
                    message.blocked = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetImpassable = { mapId: "", x: 0, y: 0, impassable: false };
exports.SetImpassable = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.x !== 0) {
            writer.uint32(16).uint32(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(24).uint32(message.y);
        }
        if (message.impassable === true) {
            writer.uint32(32).bool(message.impassable);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetImpassable);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.x = reader.uint32();
                    break;
                case 3:
                    message.y = reader.uint32();
                    break;
                case 4:
                    message.impassable = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseChat = { chatRecipient: "", contents: "", localPlayerIds: "", mapId: "" };
exports.Chat = {
    encode: function (message, writer) {
        var e_15, _a;
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.chatRecipient !== "") {
            writer.uint32(10).string(message.chatRecipient);
        }
        if (message.contents !== "") {
            writer.uint32(18).string(message.contents);
        }
        try {
            for (var _b = __values(message.localPlayerIds), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                writer.uint32(26).string(v);
            }
        }
        catch (e_15_1) { e_15 = { error: e_15_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            }
            finally { if (e_15) throw e_15.error; }
        }
        if (message.mapId !== "") {
            writer.uint32(34).string(message.mapId);
        }
        if (message.id !== undefined) {
            writer.uint32(42).string(message.id);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseChat);
        message.localPlayerIds = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chatRecipient = reader.string();
                    break;
                case 2:
                    message.contents = reader.string();
                    break;
                case 3:
                    message.localPlayerIds.push(reader.string());
                    break;
                case 4:
                    message.mapId = reader.string();
                    break;
                case 5:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseNotify = { notification: "" };
exports.Notify = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.notification !== "") {
            writer.uint32(10).string(message.notification);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseNotify);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.notification = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseInteract = { objId: "" };
exports.Interact = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.objId !== "") {
            writer.uint32(10).string(message.objId);
        }
        if (message.dataJson !== undefined) {
            writer.uint32(18).string(message.dataJson);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseInteract);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.objId = reader.string();
                    break;
                case 2:
                    message.dataJson = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseActivelySpeaking = { activelySpeaking: false };
exports.ActivelySpeaking = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.activelySpeaking === true) {
            writer.uint32(8).bool(message.activelySpeaking);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseActivelySpeaking);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.activelySpeaking = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseEnterWhisper = { recipientId: "", dir: 0 };
exports.EnterWhisper = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.recipientId !== "") {
            writer.uint32(10).string(message.recipientId);
        }
        if (message.dir !== 0) {
            writer.uint32(16).int32(message.dir);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseEnterWhisper);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.recipientId = reader.string();
                    break;
                case 2:
                    message.dir = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseLeaveWhisper = {};
exports.LeaveWhisper = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseLeaveWhisper);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseGhost = { ghost: 0 };
exports.Ghost = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.ghost !== 0) {
            writer.uint32(8).uint32(message.ghost);
        }
        if (message.targetId !== undefined) {
            writer.uint32(18).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseGhost);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.ghost = reader.uint32();
                    break;
                case 2:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetEmoteV2 = {};
exports.SetEmoteV2 = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.emote !== undefined) {
            writer.uint32(10).string(message.emote);
        }
        if (message.targetId !== undefined) {
            writer.uint32(18).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetEmoteV2);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.emote = reader.string();
                    break;
                case 2:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetNonVerbalCue = {};
exports.SetNonVerbalCue = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.nonVerbalCue !== undefined) {
            writer.uint32(10).string(message.nonVerbalCue);
        }
        if (message.targetId !== undefined) {
            writer.uint32(18).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetNonVerbalCue);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.nonVerbalCue = reader.string();
                    break;
                case 2:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetName = { name: "" };
exports.SetName = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.targetId !== undefined) {
            writer.uint32(18).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetName);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetTextStatus = { textStatus: "" };
exports.SetTextStatus = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.textStatus !== "") {
            writer.uint32(10).string(message.textStatus);
        }
        if (message.targetId !== undefined) {
            writer.uint32(18).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetTextStatus);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.textStatus = reader.string();
                    break;
                case 2:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseExit = {};
exports.Exit = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseExit);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseEnter = {};
exports.Enter = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.info !== undefined) {
            exports.SpaceUserInfo.encode(message.info, writer.uint32(10).fork()).ldelim();
        }
        if (message.spawnToken !== undefined) {
            writer.uint32(18).string(message.spawnToken);
        }
        if (message.targetId !== undefined) {
            writer.uint32(26).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseEnter);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.info = exports.SpaceUserInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.spawnToken = reader.string();
                    break;
                case 3:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetEmojiStatus = { emojiStatus: "" };
exports.SetEmojiStatus = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.emojiStatus !== "") {
            writer.uint32(10).string(message.emojiStatus);
        }
        if (message.targetId !== undefined) {
            writer.uint32(18).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetEmojiStatus);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.emojiStatus = reader.string();
                    break;
                case 2:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseTeleport = { mapId: "", x: 0, y: 0 };
exports.Teleport = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.x !== 0) {
            writer.uint32(16).uint32(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(24).uint32(message.y);
        }
        if (message.targetId !== undefined) {
            writer.uint32(34).string(message.targetId);
        }
        if (message.direction !== undefined) {
            writer.uint32(40).int32(message.direction);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseTeleport);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.x = reader.uint32();
                    break;
                case 3:
                    message.y = reader.uint32();
                    break;
                case 4:
                    message.targetId = reader.string();
                    break;
                case 5:
                    message.direction = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetWorkCondition = { workCondition: false };
exports.SetWorkCondition = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.workCondition === true) {
            writer.uint32(8).bool(message.workCondition);
        }
        if (message.targetId !== undefined) {
            writer.uint32(18).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetWorkCondition);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.workCondition = reader.bool();
                    break;
                case 2:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSpawn = { spawnToken: "" };
exports.Spawn = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.spawnToken !== "") {
            writer.uint32(10).string(message.spawnToken);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpawn);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.spawnToken = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseRespawn = {};
exports.Respawn = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.spaceUserInfo !== undefined) {
            exports.SpaceUserInfo.encode(message.spaceUserInfo, writer.uint32(10).fork()).ldelim();
        }
        if (message.spawnToken !== undefined) {
            writer.uint32(18).string(message.spawnToken);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseRespawn);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.spaceUserInfo = exports.SpaceUserInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.spawnToken = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseInit = { spaceId: "" };
exports.Init = {
    encode: function (message, writer) {
        var _a, _b;
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.spaceId !== "") {
            writer.uint32(10).string(message.spaceId);
        }
        if (((_a = message.auth) === null || _a === void 0 ? void 0 : _a.$case) === "token") {
            writer.uint32(18).string(message.auth.token);
        }
        if (((_b = message.auth) === null || _b === void 0 ? void 0 : _b.$case) === "apiKey") {
            writer.uint32(26).string(message.auth.apiKey);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseInit);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.spaceId = reader.string();
                    break;
                case 2:
                    message.auth = { $case: "token", token: reader.string() };
                    break;
                case 3:
                    message.auth = { $case: "apiKey", apiKey: reader.string() };
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapAddObject = { mapId: "" };
exports.MapAddObject = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.object !== undefined) {
            exports.WireObject.encode(message.object, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapAddObject);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.object = exports.WireObject.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseShootConfetti = {};
exports.ShootConfetti = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.targetId !== undefined) {
            writer.uint32(10).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseShootConfetti);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetEventStatus = { eventStatus: "" };
exports.SetEventStatus = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.eventStatus !== "") {
            writer.uint32(10).string(message.eventStatus);
        }
        if (message.targetId !== undefined) {
            writer.uint32(18).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetEventStatus);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.eventStatus = reader.string();
                    break;
                case 2:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetInConversation = { inConversation: false };
exports.SetInConversation = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.inConversation === true) {
            writer.uint32(8).bool(message.inConversation);
        }
        if (message.targetId !== undefined) {
            writer.uint32(18).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetInConversation);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.inConversation = reader.bool();
                    break;
                case 2:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetCurrentDesk = { currentDesk: "" };
exports.SetCurrentDesk = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.currentDesk !== "") {
            writer.uint32(10).string(message.currentDesk);
        }
        if (message.targetId !== undefined) {
            writer.uint32(18).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetCurrentDesk);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.currentDesk = reader.string();
                    break;
                case 2:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetCurrentArea = { currentArea: "" };
exports.SetCurrentArea = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.currentArea !== "") {
            writer.uint32(10).string(message.currentArea);
        }
        if (message.targetId !== undefined) {
            writer.uint32(18).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetCurrentArea);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.currentArea = reader.string();
                    break;
                case 2:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetGoKartId = { goKartId: "" };
exports.SetGoKartId = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.goKartId !== "") {
            writer.uint32(10).string(message.goKartId);
        }
        if (message.targetId !== undefined) {
            writer.uint32(18).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetGoKartId);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.goKartId = reader.string();
                    break;
                case 2:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetVehicleId = { vehicleId: "" };
exports.SetVehicleId = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.vehicleId !== "") {
            writer.uint32(10).string(message.vehicleId);
        }
        if (message.targetId !== undefined) {
            writer.uint32(18).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetVehicleId);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.vehicleId = reader.string();
                    break;
                case 2:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetSpeedModifier = { speedModifier: 0 };
exports.SetSpeedModifier = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.speedModifier !== 0) {
            writer.uint32(13).float(message.speedModifier);
        }
        if (message.targetId !== undefined) {
            writer.uint32(18).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetSpeedModifier);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.speedModifier = reader.float();
                    break;
                case 2:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetIsAlone = { isAlone: false };
exports.SetIsAlone = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.isAlone === true) {
            writer.uint32(8).bool(message.isAlone);
        }
        if (message.targetId !== undefined) {
            writer.uint32(18).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetIsAlone);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.isAlone = reader.bool();
                    break;
                case 2:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetIsMobile = { isMobile: false };
exports.SetIsMobile = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.isMobile === true) {
            writer.uint32(8).bool(message.isMobile);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetIsMobile);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.isMobile = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlaySound = { src: "", volume: 0 };
exports.PlaySound = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.src !== "") {
            writer.uint32(10).string(message.src);
        }
        if (message.volume !== 0) {
            writer.uint32(21).float(message.volume);
        }
        if (message.targetId !== undefined) {
            writer.uint32(26).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlaySound);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.src = reader.string();
                    break;
                case 2:
                    message.volume = reader.float();
                    break;
                case 3:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetFocusModeEndTime = { focusModeEndTime: "" };
exports.SetFocusModeEndTime = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.focusModeEndTime !== "") {
            writer.uint32(10).string(message.focusModeEndTime);
        }
        if (message.targetId !== undefined) {
            writer.uint32(18).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetFocusModeEndTime);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.focusModeEndTime = reader.string();
                    break;
                case 2:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetItemString = { itemString: "" };
exports.SetItemString = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.itemString !== "") {
            writer.uint32(10).string(message.itemString);
        }
        if (message.targetId !== undefined) {
            writer.uint32(18).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetItemString);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.itemString = reader.string();
                    break;
                case 2:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseTriggerItem = {};
exports.TriggerItem = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.closestObject !== undefined) {
            writer.uint32(10).string(message.closestObject);
        }
        if (message.targetId !== undefined) {
            writer.uint32(18).string(message.targetId);
        }
        if (message.closestObjectTemplate !== undefined) {
            writer.uint32(26).string(message.closestObjectTemplate);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseTriggerItem);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.closestObject = reader.string();
                    break;
                case 2:
                    message.targetId = reader.string();
                    break;
                case 3:
                    message.closestObjectTemplate = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseCustomAction = { name: "", payload: "", recipients: "" };
exports.CustomAction = {
    encode: function (message, writer) {
        var e_16, _a;
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.payload !== "") {
            writer.uint32(18).string(message.payload);
        }
        try {
            for (var _b = __values(message.recipients), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                writer.uint32(26).string(v);
            }
        }
        catch (e_16_1) { e_16 = { error: e_16_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            }
            finally { if (e_16) throw e_16.error; }
        }
        if (message.sendToAll !== undefined) {
            writer.uint32(32).bool(message.sendToAll);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseCustomAction);
        message.recipients = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.payload = reader.string();
                    break;
                case 3:
                    message.recipients.push(reader.string());
                    break;
                case 4:
                    message.sendToAll = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetFollowTarget = { followTarget: "" };
exports.SetFollowTarget = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.followTarget !== "") {
            writer.uint32(10).string(message.followTarget);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetFollowTarget);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.followTarget = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseRequestToLead = { target: "", snapshot: "" };
exports.RequestToLead = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.target !== "") {
            writer.uint32(10).string(message.target);
        }
        if (message.snapshot !== "") {
            writer.uint32(18).string(message.snapshot);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseRequestToLead);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.target = reader.string();
                    break;
                case 2:
                    message.snapshot = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseEnterPortal = { targetUrl: "" };
exports.EnterPortal = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.targetUrl !== "") {
            writer.uint32(10).string(message.targetUrl);
        }
        if (message.bypassPrompt !== undefined) {
            writer.uint32(16).bool(message.bypassPrompt);
        }
        if (message.targetId !== undefined) {
            writer.uint32(26).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseEnterPortal);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.targetUrl = reader.string();
                    break;
                case 2:
                    message.bypassPrompt = reader.bool();
                    break;
                case 3:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetManualVideoSrc = { manualVideoSrc: "" };
exports.SetManualVideoSrc = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.manualVideoSrc !== "") {
            writer.uint32(10).string(message.manualVideoSrc);
        }
        if (message.targetId !== undefined) {
            writer.uint32(18).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetManualVideoSrc);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.manualVideoSrc = reader.string();
                    break;
                case 2:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetSubtitle = { subtitle: "" };
exports.SetSubtitle = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.subtitle !== "") {
            writer.uint32(10).string(message.subtitle);
        }
        if (message.targetId !== undefined) {
            writer.uint32(18).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetSubtitle);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.subtitle = reader.string();
                    break;
                case 2:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseMapCommitsChanges = { mapId: "", updateId: 0 };
exports.MapCommitsChanges = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.updateId !== 0) {
            writer.uint32(16).uint64(message.updateId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapCommitsChanges);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.updateId = longToNumber(reader.uint64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var basePlayerUpdatesSession = { roomId: "" };
exports.PlayerUpdatesSession = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.roomChecked !== undefined) {
            writer.uint32(8).bool(message.roomChecked);
        }
        if (message.chatChecked !== undefined) {
            writer.uint32(16).bool(message.chatChecked);
        }
        if (message.qaChecked !== undefined) {
            writer.uint32(24).bool(message.qaChecked);
        }
        if (message.approveQuestionsChecked !== undefined) {
            writer.uint32(32).bool(message.approveQuestionsChecked);
        }
        if (message.roomId !== "") {
            writer.uint32(42).string(message.roomId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerUpdatesSession);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.roomChecked = reader.bool();
                    break;
                case 2:
                    message.chatChecked = reader.bool();
                    break;
                case 3:
                    message.qaChecked = reader.bool();
                    break;
                case 4:
                    message.approveQuestionsChecked = reader.bool();
                    break;
                case 5:
                    message.roomId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSpeakerUpdatesSession = { sessionId: "" };
exports.SpeakerUpdatesSession = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.sessionId !== "") {
            writer.uint32(10).string(message.sessionId);
        }
        if (message.customizeRoomEnabled !== undefined) {
            writer.uint32(16).bool(message.customizeRoomEnabled);
        }
        if (message.chatEnabled !== undefined) {
            writer.uint32(24).bool(message.chatEnabled);
        }
        if (message.qaEnabled !== undefined) {
            writer.uint32(32).bool(message.qaEnabled);
        }
        if (message.approveQuestionsEnabled !== undefined) {
            writer.uint32(40).bool(message.approveQuestionsEnabled);
        }
        if (message.massMuteEnabled !== undefined) {
            writer.uint32(48).bool(message.massMuteEnabled);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpeakerUpdatesSession);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sessionId = reader.string();
                    break;
                case 2:
                    message.customizeRoomEnabled = reader.bool();
                    break;
                case 3:
                    message.chatEnabled = reader.bool();
                    break;
                case 4:
                    message.qaEnabled = reader.bool();
                    break;
                case 5:
                    message.approveQuestionsEnabled = reader.bool();
                    break;
                case 6:
                    message.massMuteEnabled = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseChatReply = { senderId: "", senderName: "", contents: "" };
exports.ChatReply = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.senderId !== "") {
            writer.uint32(10).string(message.senderId);
        }
        if (message.senderName !== "") {
            writer.uint32(18).string(message.senderName);
        }
        if (message.contents !== "") {
            writer.uint32(26).string(message.contents);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseChatReply);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.senderId = reader.string();
                    break;
                case 2:
                    message.senderName = reader.string();
                    break;
                case 3:
                    message.contents = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseChatMessageUpdated = { id: "" };
exports.ChatMessageUpdated = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseChatMessageUpdated);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSendCommand = { command: "" };
exports.SendCommand = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.command !== "") {
            writer.uint32(10).string(message.command);
        }
        if (message.targetId !== undefined) {
            writer.uint32(18).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSendCommand);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.command = reader.string();
                    break;
                case 2:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseRegisterCommand = { command: "" };
exports.RegisterCommand = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.command !== "") {
            writer.uint32(10).string(message.command);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseRegisterCommand);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.command = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseSetArbitraryMapData = { mapId: "", dataJson: "" };
exports.SetArbitraryMapData = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.dataJson !== "") {
            writer.uint32(18).string(message.dataJson);
        }
        if (message.deleteMap !== undefined) {
            writer.uint32(24).bool(message.deleteMap);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetArbitraryMapData);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.dataJson = reader.string();
                    break;
                case 3:
                    message.deleteMap = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseHighFive = { targetId: "" };
exports.HighFive = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.targetId !== "") {
            writer.uint32(10).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseHighFive);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseAddInventoryItem = { itemId: "", delta: 0, targetId: "" };
exports.AddInventoryItem = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.itemId !== "") {
            writer.uint32(10).string(message.itemId);
        }
        if (message.delta !== 0) {
            writer.uint32(16).uint64(message.delta);
        }
        if (message.targetId !== "") {
            writer.uint32(26).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseAddInventoryItem);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.itemId = reader.string();
                    break;
                case 2:
                    message.delta = longToNumber(reader.uint64());
                    break;
                case 3:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var baseRemoveInventoryItem = { itemId: "", delta: 0 };
exports.RemoveInventoryItem = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.itemId !== "") {
            writer.uint32(10).string(message.itemId);
        }
        if (message.delta !== 0) {
            writer.uint32(16).uint64(message.delta);
        }
        if (message.targetId !== undefined) {
            writer.uint32(26).string(message.targetId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseRemoveInventoryItem);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.itemId = reader.string();
                    break;
                case 2:
                    message.delta = longToNumber(reader.uint64());
                    break;
                case 3:
                    message.targetId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    }
};
var globalThis = (function () {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (minimal_1["default"].util.Long !== long_1["default"]) {
    minimal_1["default"].util.Long = long_1["default"];
    minimal_1["default"].configure();
}
exports.protobufWriterLibrary = minimal_1["default"];
//# sourceMappingURL=events.js.map