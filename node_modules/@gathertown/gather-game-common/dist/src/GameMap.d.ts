import { BoundingBox, Position } from "./Position";
import { Announcer, AreaPosition, Asset, InteractionEnum_ENUM as Interaction, WireObject, WireArea, Point, Portal, Space, SpawnPoint, TutorialTaskMapArea, WireTutorialTasks, DBDesk } from "./generated_DO_NOT_TOUCH/events";
export { Interaction };
interface GameMapBase {
    id: string;
    dimensions: [number, number];
    backgroundImagePath: string;
    foregroundImagePath?: string;
    sprites?: number[];
    spaces: Space[];
    spawn?: Point;
    spawns: SpawnPoint[];
    portals: Portal[];
    announcer: Announcer[];
    assets?: Asset[];
    name?: string;
    muteOnEntry?: boolean;
    useDrawnBG?: boolean;
    walls?: WallFloorBlock[];
    floors?: WallFloorBlock[];
    mostRecentUpdateId?: number;
    areas?: Areas;
    miniMapImagePath?: string;
    enabledChats?: EnabledChat[];
    description?: string;
    decoration?: string;
    tutorialTasks?: TutorialTasks;
    updatedAt?: string;
    script?: string;
    desks?: Desks;
}
export interface GameMap extends GameMapBase {
    collisions: string;
    objects?: MapObject[];
}
export interface GameMapDB extends Omit<GameMapBase, "walls" | "floors" | "areas" | "desks"> {
    walls?: WallFloorDB;
    floors?: WallFloorDB;
    areas?: DBAreas;
    desks?: DBDesks;
    collisions: string;
    objects?: MapObjectDB[];
}
export interface GameMapV2 extends GameMapBase {
    collisions: boolean[][];
    objects?: {
        [key: number]: MapObject;
    };
}
export declare class WallBlock {
    x: number;
    y: number;
    wallType: number;
}
export declare class FloorBlock {
    x: number;
    y: number;
    floorType: number;
}
export declare type WallFloorBlock = WallBlock | FloorBlock;
export declare class WallFloorDB {
    [type: string]: string;
}
export declare class Tile {
    x: number;
    y: number;
    tileType: TileType;
    info?: Space | Portal;
}
declare type MakeFieldsRequired<T, K extends keyof T> = Required<Pick<T, K>> & T;
declare type WireMapObjectRequiredFields = "x" | "y" | "normal" | "type" | "width" | "height";
declare type WireObjectWithRequireds = MakeFieldsRequired<WireObject, WireMapObjectRequiredFields>;
export interface MapObjectDB extends Omit<WireObjectWithRequireds, "propertiesJson" | "_tags"> {
    _tags?: string[];
    properties?: Record<string, any>;
}
export interface MapObject extends MapObjectDB {
    key?: number;
}
export declare function findMissingMapObjectFields(object: any): string[];
export declare function convertWireObjectToMapObjectDB(wireObject: WireObject): MapObjectDB;
export declare function convertWireObjectToMapObject(wireObject: WireObject, key: number): MapObject;
export declare function convertMapObjectToWireObject(mapObject: Partial<MapObjectDB>): WireObject;
export declare enum AreaCategory {
    RW_OFFICE_LOBBY = "RW_OFFICE_LOBBY",
    RW_OFFICE_MEETING = "RW_OFFICE_MEETING",
    COWORKING = "COWORKING"
}
export interface BaseArea {
    category?: AreaCategory;
}
export interface DBArea extends BaseArea {
    coords: AreaPosition[];
}
export interface DBAreas {
    [name: string]: DBArea;
}
export interface Area extends BaseArea {
    coordsMap: boolean[][];
}
export interface Areas {
    [name: string]: Area;
}
interface WireAreas {
    [name: string]: WireArea;
}
export interface DBDesks {
    [deskId: string]: DBDesk;
}
export interface Desks {
    coordsMap: string[][];
    idsMap: {
        [deskId: string]: Position[];
    };
}
export declare function convertWireAreasToDBAreas(wireAreas: WireAreas): DBAreas;
export declare function convertWireAreasToAreas(wireAreas: WireAreas, dimensions: number[] | undefined): Areas;
export declare function convertAreaCoordsToCoordsMap(coords: AreaPosition[], [width, height]: number[]): boolean[][];
export declare function convertDBDesksCoordsToCoordsMap(dbDesks: DBDesks, [width, height]: number[]): string[][];
export declare function generateEmptyDeskCoordsMap([width, height]: number[]): string[][];
export declare function convertDBDesksToDesks(dbDesks: DBDesks, dimensions: number[] | undefined): Desks;
export declare function convertDesksToDBDesks(desks: Desks): DBDesks;
export declare function convertCoordsToBBoxes(coords: Position[]): BoundingBox[];
export declare enum TileType {
    Impassable = 1,
    Spawn = 2,
    Portal = 3,
    Announcer = 4,
    Space = 5,
    Desk = 6
}
declare const MODAL_INTERACTIONS: readonly [Interaction.EMBEDDED_WEBSITE, Interaction.POSTER, Interaction.VIDEO, Interaction.EXTERNAL_CALL, Interaction.NOTE, Interaction.MODAL_EXTENSION, Interaction.COMPONENT_MODAL];
export declare type ModalInteraction = typeof MODAL_INTERACTIONS[number];
export declare function interactionOpensModal(i: Interaction): boolean;
export declare function areaToCoords(coordsMap: boolean[][]): Position[];
export declare enum EnabledChat {
    GLOBAL_CHAT = "GLOBAL_CHAT",
    LOCAL_CHAT = "LOCAL_CHAT",
    ROOM_CHAT = "ROOM_CHAT"
}
export declare const wallFloorConvertFromDB: (data: WallFloorDB, dims: number[], isWall: boolean) => WallFloorBlock[];
export declare const wallFloorConvertToDB: (data: WallFloorBlock[], dims: number[]) => WallFloorDB;
export declare function convertStringToEnabledChat(enabledChat: string): EnabledChat;
export declare enum PresetTutorialGroupSetIds {
    ONBOARDING_SANDBOX = "ONBOARDING_SANDBOX"
}
export interface TutorialTasks extends Omit<WireTutorialTasks, "groupSetId" | "areas"> {
    groupSetId: PresetTutorialGroupSetIds;
    areas?: TutorialTaskMapArea[];
}
export declare function convertWireTutorialTasksToTutorialTasks(wireTutorialTasks: WireTutorialTasks): {
    groupSetId: PresetTutorialGroupSetIds;
    areas: TutorialTaskMapArea[];
    autoStart?: boolean | undefined;
};
export declare function convertTutorialTasksToWireTutorialTasks(tutorialTasks: TutorialTasks): WireTutorialTasks;
export declare function convertStringToPresetTutorialGroupSetId(presetTutorialGroupSetId: string): PresetTutorialGroupSetIds;
export declare function verifyMapIsComplete(map: Partial<GameMapV2>): map is GameMapV2;
export declare const MAP_MAX_DIMENSION = 9999;
