"use strict";
exports.__esModule = true;
var GameMap_1 = require("../GameMap");
describe("src/GameMap", function () {
    describe("#convertWireAreasToDBAreas", function () {
        var mapWidth = 5;
        var mapHeight = 5;
        it("converts wire areas to a coords map", function () {
            var coords = [
                { x1: 1, y1: 1, x2: 2, y2: 2 },
                { x1: 3, y1: 3, x2: 4, y2: 4 },
            ];
            var coordsMap = (0, GameMap_1.convertAreaCoordsToCoordsMap)(coords, [mapWidth, mapHeight]);
            expect(coordsMap).toEqual([
                [false, false, false, false, false],
                [false, true, true, false, false],
                [false, true, true, false, false],
                [false, false, false, true, true],
                [false, false, false, true, true],
            ]);
        });
        it("works when areas overlap", function () {
            var coords = [
                { x1: 0, y1: 0, x2: 2, y2: 2 },
                { x1: 1, y1: 1, x2: 4, y2: 4 },
            ];
            var coordsMap = (0, GameMap_1.convertAreaCoordsToCoordsMap)(coords, [mapWidth, mapHeight]);
            expect(coordsMap).toEqual([
                [true, true, true, false, false],
                [true, true, true, true, true],
                [true, true, true, true, true],
                [false, true, true, true, true],
                [false, true, true, true, true],
            ]);
        });
        it("works when coordinates are not in order", function () {
            var coords = [
                { x1: 2, y1: 2, x2: 1, y2: 1 },
                { x1: 4, y1: 4, x2: 3, y2: 3 },
            ];
            var coordsMap = (0, GameMap_1.convertAreaCoordsToCoordsMap)(coords, [mapWidth, mapHeight]);
            expect(coordsMap).toEqual([
                [false, false, false, false, false],
                [false, true, true, false, false],
                [false, true, true, false, false],
                [false, false, false, true, true],
                [false, false, false, true, true],
            ]);
        });
        it("clips when coords are out of bounds", function () {
            var coords = [
                { x1: 1, y1: 1, x2: 2, y2: 2 },
                { x1: 3, y1: 3, x2: 5, y2: 5 },
            ];
            var coordsMap = (0, GameMap_1.convertAreaCoordsToCoordsMap)(coords, [mapWidth, mapHeight]);
            expect(coordsMap).toEqual([
                [false, false, false, false, false],
                [false, true, true, false, false],
                [false, true, true, false, false],
                [false, false, false, true, true],
                [false, false, false, true, true],
            ]);
        });
    });
    describe("#convertDBDesksCoordsToCoordsMap", function () {
        var mapWidth = 5;
        var mapHeight = 5;
        it("converts db desks to coords map, handles overlapping and clipping", function () {
            var coords = [
                { x1: 1, y1: 1, x2: 3, y2: 3 },
                { x1: 3, y1: 3, x2: 5, y2: 5 },
            ];
            var dbDesks = { desk1: { coords: coords } };
            var coordsMap = (0, GameMap_1.convertDBDesksCoordsToCoordsMap)(dbDesks, [mapWidth, mapHeight]);
            expect(coordsMap).toEqual([
                ["", "", "", "", ""],
                ["", "desk1", "desk1", "desk1", ""],
                ["", "desk1", "desk1", "desk1", ""],
                ["", "desk1", "desk1", "desk1", "desk1"],
                ["", "", "", "desk1", "desk1"],
            ]);
        });
        it("overwrites overlapping desk ids", function () {
            var coords1 = [
                { x1: 1, y1: 1, x2: 3, y2: 3 },
                { x1: 3, y1: 3, x2: 5, y2: 5 },
            ];
            var coords2 = [{ x1: 3, y1: 3, x2: 0, y2: 0 }];
            var dbDesks = { desk1: { coords: coords1 }, desk2: { coords: coords2 } };
            var coordsMap = (0, GameMap_1.convertDBDesksCoordsToCoordsMap)(dbDesks, [mapWidth, mapHeight]);
            expect(coordsMap).toEqual([
                ["desk2", "desk2", "desk2", "desk2", ""],
                ["desk2", "desk2", "desk2", "desk2", ""],
                ["desk2", "desk2", "desk2", "desk2", ""],
                ["desk2", "desk2", "desk2", "desk2", "desk1"],
                ["", "", "", "desk1", "desk1"],
            ]);
        });
    });
});
//# sourceMappingURL=GameMap.test.js.map