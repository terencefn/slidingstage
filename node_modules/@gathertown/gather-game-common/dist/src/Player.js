"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VehicleAction = exports.getAllEmotes = exports.keyPressedToEmote = exports.CONSTANT_PERMANENT_EMOTES = exports.whisperIdToColor = exports.directionToFacePlayer = exports.nextSpriteDirection = exports.positionAfterMove = exports.oppositeMoveDirection = exports.getMoveDirFromSpriteDir = exports.DEFAULT_TEMP_EMOTES = exports.EMOTE_SHORTCUTS = exports.EMOTE_RESET_SHORTCUT = exports.EMOTE_EMOJIS = exports.Emote = exports.generateDefaultPlayer = exports.Player = exports.PlayerDBFields = exports.ZodDBOutfit = exports.MoveDirection = exports.SpriteDirection = void 0;
const Position_1 = require("./Position");
const events_1 = require("./generated_DO_NOT_TOUCH/events");
Object.defineProperty(exports, "MoveDirection", { enumerable: true, get: function () { return events_1.MoveDirectionEnum_ENUM; } });
Object.defineProperty(exports, "SpriteDirection", { enumerable: true, get: function () { return events_1.SpriteDirectionEnum_ENUM; } });
const zod = __importStar(require("zod"));
exports.ZodDBOutfit = zod.object({
    skin: zod.string(),
    hair: zod.string(),
    facial_hair: zod.string(),
    top: zod.string(),
    bottom: zod.string(),
    shoes: zod.string(),
    hat: zod.string(),
    glasses: zod.string(),
    other: zod.string(),
    costume: zod.string().optional(),
    mobility: zod.string().optional(),
    jacket: zod.string().optional(),
});
class PlayerDBFields {
    constructor() {
        this.affiliation = "";
        this.allowScreenPointer = true;
        this.busy = false;
        this.connected = false;
        this.currentDesk = "";
        this.currentlyEquippedWearables = undefined;
        this.description = "";
        this.deskInfo = { deskId: "" };
        this.emojiStatus = "";
        this.focusModeEndTime = "";
        this.inventory = { items: {}, order: {} };
        this.isNpc = false;
        this.itemString = "";
        this.map = "";
        this.name = "";
        this.personalImageUrl = "";
        this.phone = "";
        this.profileImageUrl = "";
        this.pronouns = "";
        this.textStatus = "";
        this.timezone = "";
        this.title = "";
        this.x = 0;
        this.y = 0;
    }
}
exports.PlayerDBFields = PlayerDBFields;
class Player extends PlayerDBFields {
    constructor() {
        super();
        this.direction = events_1.SpriteDirectionEnum_ENUM.Down;
        this.ghost = 0;
        this.spotlighted = 0;
        this.emote = undefined;
        this.workCondition = 1;
        this.away = false;
        this.activelySpeaking = 0;
        this.lastActive = "";
        this.lastInputId = 0;
        this.whisperId = "";
        this.isSignedIn = false;
        this.outfitString = "";
        this.eventStatus = "";
        this.inConversation = false;
        this.currentArea = "";
        this.vehicleId = "";
        this.speedModifier = 1;
        this.isAlone = true;
        this.isMobile = false;
        this.followTarget = "";
        this.manualVideoSrc = "";
        this.manualDefaultVideoImageSrc = "";
        this.manualScreenSrc = "";
        this.subtitle = "";
        delete this.currentlyEquippedWearables;
    }
}
exports.Player = Player;
const generateDefaultPlayer = () => {
    const player = new Player();
    player.x = -99999;
    player.y = -99999;
    player.emote = "";
    player.workCondition = 0;
    player.away = true;
    player.lastActive = new Date().toISOString();
    player.connected = true;
    return player;
};
exports.generateDefaultPlayer = generateDefaultPlayer;
var Emote;
(function (Emote) {
    Emote[Emote["None"] = 0] = "None";
    Emote[Emote["Wave"] = 1] = "Wave";
    Emote[Emote["Heart"] = 2] = "Heart";
    Emote[Emote["PartyPopper"] = 3] = "PartyPopper";
    Emote[Emote["RaisedHand"] = 4] = "RaisedHand";
})(Emote = exports.Emote || (exports.Emote = {}));
exports.EMOTE_EMOJIS = {
    [Emote.Wave]: "👋",
    [Emote.Heart]: "❤️",
    [Emote.PartyPopper]: "🎉",
    [Emote.RaisedHand]: "🤚",
};
exports.EMOTE_RESET_SHORTCUT = "0";
exports.EMOTE_SHORTCUTS = [exports.EMOTE_RESET_SHORTCUT, "1", "2", "3", "4", "5", "6"];
exports.DEFAULT_TEMP_EMOTES = ["👋", "❤️", "🎉", "👍", "😂"];
function getMoveDirFromSpriteDir(direction) {
    switch (direction) {
        case events_1.SpriteDirectionEnum_ENUM.Dance1:
        case events_1.SpriteDirectionEnum_ENUM.Dance2:
        case events_1.SpriteDirectionEnum_ENUM.Dance3:
        case events_1.SpriteDirectionEnum_ENUM.Dance4:
            return events_1.MoveDirectionEnum_ENUM.Dance;
        case events_1.SpriteDirectionEnum_ENUM.Down:
        case events_1.SpriteDirectionEnum_ENUM.DownAlt:
            return events_1.MoveDirectionEnum_ENUM.Down;
        case events_1.SpriteDirectionEnum_ENUM.Up:
        case events_1.SpriteDirectionEnum_ENUM.UpAlt:
            return events_1.MoveDirectionEnum_ENUM.Up;
        case events_1.SpriteDirectionEnum_ENUM.Left:
        case events_1.SpriteDirectionEnum_ENUM.LeftAlt:
            return events_1.MoveDirectionEnum_ENUM.Left;
        case events_1.SpriteDirectionEnum_ENUM.Right:
        case events_1.SpriteDirectionEnum_ENUM.RightAlt:
            return events_1.MoveDirectionEnum_ENUM.Right;
        default:
            return null;
    }
}
exports.getMoveDirFromSpriteDir = getMoveDirFromSpriteDir;
function oppositeMoveDirection(direction) {
    switch (direction) {
        case events_1.MoveDirectionEnum_ENUM.Left:
            return events_1.MoveDirectionEnum_ENUM.Right;
        case events_1.MoveDirectionEnum_ENUM.Right:
            return events_1.MoveDirectionEnum_ENUM.Left;
        case events_1.MoveDirectionEnum_ENUM.Up:
            return events_1.MoveDirectionEnum_ENUM.Down;
        case events_1.MoveDirectionEnum_ENUM.Down:
            return events_1.MoveDirectionEnum_ENUM.Up;
        default:
            return null;
    }
}
exports.oppositeMoveDirection = oppositeMoveDirection;
const positionAfterMove = (start, dir, dist = 1) => {
    const { x, y } = start;
    switch (dir) {
        case events_1.MoveDirectionEnum_ENUM.Left:
            return { x: x - dist, y };
        case events_1.MoveDirectionEnum_ENUM.Right:
            return { x: x + dist, y };
        case events_1.MoveDirectionEnum_ENUM.Up:
            return { x, y: y - dist };
        case events_1.MoveDirectionEnum_ENUM.Down:
            return { x, y: y + dist };
        default:
            return start;
    }
};
exports.positionAfterMove = positionAfterMove;
function nextSpriteDirection(current, direction) {
    if (direction === events_1.MoveDirectionEnum_ENUM.Left && current === events_1.SpriteDirectionEnum_ENUM.Left) {
        return events_1.SpriteDirectionEnum_ENUM.LeftAlt;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Right && current === events_1.SpriteDirectionEnum_ENUM.Right) {
        return events_1.SpriteDirectionEnum_ENUM.RightAlt;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Up && current === events_1.SpriteDirectionEnum_ENUM.Up) {
        return events_1.SpriteDirectionEnum_ENUM.UpAlt;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Down && current === events_1.SpriteDirectionEnum_ENUM.Down) {
        return events_1.SpriteDirectionEnum_ENUM.DownAlt;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Dance && current === events_1.SpriteDirectionEnum_ENUM.Dance1) {
        return events_1.SpriteDirectionEnum_ENUM.Dance2;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Dance && current === events_1.SpriteDirectionEnum_ENUM.Dance2) {
        return events_1.SpriteDirectionEnum_ENUM.Dance3;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Dance && current === events_1.SpriteDirectionEnum_ENUM.Dance3) {
        return events_1.SpriteDirectionEnum_ENUM.Dance4;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Left) {
        return events_1.SpriteDirectionEnum_ENUM.Left;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Right) {
        return events_1.SpriteDirectionEnum_ENUM.Right;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Up) {
        return events_1.SpriteDirectionEnum_ENUM.Up;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Down) {
        return events_1.SpriteDirectionEnum_ENUM.Down;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Dance) {
        return events_1.SpriteDirectionEnum_ENUM.Dance1;
    }
    return current;
}
exports.nextSpriteDirection = nextSpriteDirection;
function directionToFacePlayer(player, target) {
    if ((0, Position_1.manhattanDistance)(player, target) !== 1)
        return null;
    if (player.x - target.x === 1) {
        return events_1.MoveDirectionEnum_ENUM.Left;
    }
    else if (player.x - target.x === -1) {
        return events_1.MoveDirectionEnum_ENUM.Right;
    }
    else if (player.y - target.y === 1) {
        return events_1.MoveDirectionEnum_ENUM.Up;
    }
    else if (player.y - target.y === -1) {
        return events_1.MoveDirectionEnum_ENUM.Down;
    }
    return null;
}
exports.directionToFacePlayer = directionToFacePlayer;
function whisperIdToColor(id) {
    if (id.length === 7)
        return id;
    return "#" + id.slice(0, 6);
}
exports.whisperIdToColor = whisperIdToColor;
exports.CONSTANT_PERMANENT_EMOTES = [exports.EMOTE_EMOJIS[Emote.RaisedHand]];
const keyPressedToEmote = (keycode, emotesArray) => emotesArray[keycode - 1];
exports.keyPressedToEmote = keyPressedToEmote;
const getAllEmotes = (tempEmotes) => [...tempEmotes, ...exports.CONSTANT_PERMANENT_EMOTES];
exports.getAllEmotes = getAllEmotes;
var VehicleAction;
(function (VehicleAction) {
    VehicleAction["Mount"] = "mount";
    VehicleAction["Dismount"] = "dismount";
})(VehicleAction = exports.VehicleAction || (exports.VehicleAction = {}));
//# sourceMappingURL=Player.js.map