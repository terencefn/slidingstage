"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var _a, _b;
exports.__esModule = true;
exports.INVENTORY_MAX_ROW = exports.INVENTORY_MAX_COLUMN = exports.getAllEmotes = exports.keyPressedToEmote = exports.CONSTANT_PERMANANT_EMOTES = exports.DEFAULT_TEMP_EMOTES = exports.whisperIdToColor = exports.directionToFacePlayer = exports.nextSpriteDirection = exports.positionAfterMove = exports.oppositeMoveDirection = exports.getMoveDirFromSpriteDir = exports.TEMPORARY_EMOTES = exports.EMOTE_SHORTCUTS = exports.EMOTE_EMOJIS = exports.generateDefaultPlayer = exports.Emote = exports.MoveDirection = exports.SpriteDirection = void 0;
var Position_1 = require("./Position");
var events_1 = require("./generated_DO_NOT_TOUCH/events");
exports.SpriteDirection = events_1.SpriteDirectionEnum_ENUM;
exports.MoveDirection = events_1.MoveDirectionEnum_ENUM;
var Emote;
(function (Emote) {
    Emote[Emote["None"] = 0] = "None";
    Emote[Emote["Wave"] = 1] = "Wave";
    Emote[Emote["Heart"] = 2] = "Heart";
    Emote[Emote["PartyPopper"] = 3] = "PartyPopper";
    Emote[Emote["ThumbsUp"] = 4] = "ThumbsUp";
    Emote[Emote["QuestionMark"] = 5] = "QuestionMark";
    Emote[Emote["RaisedHand"] = 6] = "RaisedHand";
})(Emote = exports.Emote || (exports.Emote = {}));
var generateDefaultPlayer = function () { return ({
    x: -99999,
    y: -99999,
    direction: events_1.SpriteDirectionEnum_ENUM.Down,
    name: "",
    affiliation: "",
    ghost: 0,
    map: "",
    spotlighted: 0,
    emote: "",
    nonVerbalCue: undefined,
    workCondition: 0,
    activelySpeaking: 0,
    lastActive: new Date().toISOString(),
    busy: false,
    textStatus: "",
    emojiStatus: "",
    lastInputId: 0,
    whisperId: "",
    isSignedIn: false,
    outfitString: "",
    eventStatus: "",
    inConversation: false,
    currentDesk: "",
    currentArea: "",
    vehicleId: "",
    speedModifier: 1,
    isAlone: true,
    isMobile: false,
    focusModeEndTime: "",
    itemString: "",
    followTarget: "",
    manualVideoSrc: "",
    manualDefaultVideoImageSrc: "",
    manualScreenSrc: "",
    subtitle: "",
    isNpc: false,
    inventory: { items: {}, order: {} }
}); };
exports.generateDefaultPlayer = generateDefaultPlayer;
exports.EMOTE_EMOJIS = (_a = {},
    _a[Emote.Wave] = "👋",
    _a[Emote.Heart] = "❤️",
    _a[Emote.PartyPopper] = "🎉",
    _a[Emote.ThumbsUp] = "👍",
    _a[Emote.QuestionMark] = "❓",
    _a[Emote.RaisedHand] = "✋",
    _a);
exports.EMOTE_SHORTCUTS = (_b = {},
    _b[Emote.Wave] = "1",
    _b[Emote.Heart] = "2",
    _b[Emote.PartyPopper] = "3",
    _b[Emote.ThumbsUp] = "4",
    _b[Emote.QuestionMark] = "5",
    _b[Emote.RaisedHand] = "6",
    _b);
exports.TEMPORARY_EMOTES = [
    Emote.Heart,
    Emote.PartyPopper,
    Emote.QuestionMark,
    Emote.ThumbsUp,
    Emote.Wave,
];
function getMoveDirFromSpriteDir(direction) {
    switch (direction) {
        case events_1.SpriteDirectionEnum_ENUM.Dance1:
        case events_1.SpriteDirectionEnum_ENUM.Dance2:
        case events_1.SpriteDirectionEnum_ENUM.Dance3:
        case events_1.SpriteDirectionEnum_ENUM.Dance4:
            return events_1.MoveDirectionEnum_ENUM.Dance;
        case events_1.SpriteDirectionEnum_ENUM.Down:
        case events_1.SpriteDirectionEnum_ENUM.DownAlt:
            return events_1.MoveDirectionEnum_ENUM.Down;
        case events_1.SpriteDirectionEnum_ENUM.Up:
        case events_1.SpriteDirectionEnum_ENUM.UpAlt:
            return events_1.MoveDirectionEnum_ENUM.Up;
        case events_1.SpriteDirectionEnum_ENUM.Left:
        case events_1.SpriteDirectionEnum_ENUM.LeftAlt:
            return events_1.MoveDirectionEnum_ENUM.Left;
        case events_1.SpriteDirectionEnum_ENUM.Right:
        case events_1.SpriteDirectionEnum_ENUM.RightAlt:
            return events_1.MoveDirectionEnum_ENUM.Right;
        default:
            return null;
    }
}
exports.getMoveDirFromSpriteDir = getMoveDirFromSpriteDir;
function oppositeMoveDirection(direction) {
    switch (direction) {
        case events_1.MoveDirectionEnum_ENUM.Left:
            return events_1.MoveDirectionEnum_ENUM.Right;
        case events_1.MoveDirectionEnum_ENUM.Right:
            return events_1.MoveDirectionEnum_ENUM.Left;
        case events_1.MoveDirectionEnum_ENUM.Up:
            return events_1.MoveDirectionEnum_ENUM.Down;
        case events_1.MoveDirectionEnum_ENUM.Down:
            return events_1.MoveDirectionEnum_ENUM.Up;
        default:
            return null;
    }
}
exports.oppositeMoveDirection = oppositeMoveDirection;
var positionAfterMove = function (start, dir, dist) {
    if (dist === void 0) { dist = 1; }
    var x = start.x, y = start.y;
    switch (dir) {
        case events_1.MoveDirectionEnum_ENUM.Left:
            return { x: x - dist, y: y };
        case events_1.MoveDirectionEnum_ENUM.Right:
            return { x: x + dist, y: y };
        case events_1.MoveDirectionEnum_ENUM.Up:
            return { x: x, y: y - dist };
        case events_1.MoveDirectionEnum_ENUM.Down:
            return { x: x, y: y + dist };
        default:
            return start;
    }
};
exports.positionAfterMove = positionAfterMove;
function nextSpriteDirection(current, direction) {
    if (direction === events_1.MoveDirectionEnum_ENUM.Left && current === events_1.SpriteDirectionEnum_ENUM.Left) {
        return events_1.SpriteDirectionEnum_ENUM.LeftAlt;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Right && current === events_1.SpriteDirectionEnum_ENUM.Right) {
        return events_1.SpriteDirectionEnum_ENUM.RightAlt;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Up && current === events_1.SpriteDirectionEnum_ENUM.Up) {
        return events_1.SpriteDirectionEnum_ENUM.UpAlt;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Down && current === events_1.SpriteDirectionEnum_ENUM.Down) {
        return events_1.SpriteDirectionEnum_ENUM.DownAlt;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Dance && current === events_1.SpriteDirectionEnum_ENUM.Dance1) {
        return events_1.SpriteDirectionEnum_ENUM.Dance2;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Dance && current === events_1.SpriteDirectionEnum_ENUM.Dance2) {
        return events_1.SpriteDirectionEnum_ENUM.Dance3;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Dance && current === events_1.SpriteDirectionEnum_ENUM.Dance3) {
        return events_1.SpriteDirectionEnum_ENUM.Dance4;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Left) {
        return events_1.SpriteDirectionEnum_ENUM.Left;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Right) {
        return events_1.SpriteDirectionEnum_ENUM.Right;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Up) {
        return events_1.SpriteDirectionEnum_ENUM.Up;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Down) {
        return events_1.SpriteDirectionEnum_ENUM.Down;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Dance) {
        return events_1.SpriteDirectionEnum_ENUM.Dance1;
    }
    return current;
}
exports.nextSpriteDirection = nextSpriteDirection;
function directionToFacePlayer(player, target) {
    if ((0, Position_1.manhattanDistance)(player, target) !== 1) {
        return null;
    }
    if (player.x - target.x === 1) {
        return events_1.MoveDirectionEnum_ENUM.Left;
    }
    else if (player.x - target.x === -1) {
        return events_1.MoveDirectionEnum_ENUM.Right;
    }
    else if (player.y - target.y === 1) {
        return events_1.MoveDirectionEnum_ENUM.Up;
    }
    else if (player.y - target.y === -1) {
        return events_1.MoveDirectionEnum_ENUM.Down;
    }
    return null;
}
exports.directionToFacePlayer = directionToFacePlayer;
function whisperIdToColor(id) {
    if (id.length === 7) {
        return id;
    }
    return "#" + id.slice(0, 6);
}
exports.whisperIdToColor = whisperIdToColor;
exports.DEFAULT_TEMP_EMOTES = ["👋", "❤️", "🎉", "👍", "❓"];
exports.CONSTANT_PERMANANT_EMOTES = [exports.EMOTE_EMOJIS[Emote.RaisedHand]];
var keyPressedToEmote = function (keycode, emotesArray) {
    return emotesArray[keycode - 1];
};
exports.keyPressedToEmote = keyPressedToEmote;
var getAllEmotes = function (tempEmotes) {
    return __spreadArray(__spreadArray([], __read(tempEmotes), false), __read(exports.CONSTANT_PERMANANT_EMOTES), false);
};
exports.getAllEmotes = getAllEmotes;
exports.INVENTORY_MAX_COLUMN = 3;
exports.INVENTORY_MAX_ROW = 3;
//# sourceMappingURL=Player.js.map