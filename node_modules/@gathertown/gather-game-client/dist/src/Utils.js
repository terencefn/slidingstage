"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.parseCustomAction = exports.sleepAndReject = exports.fetchGameServerAssignment = exports.SlidingWindow = exports.isBrowser = void 0;
var axios_1 = __importDefault(require("axios"));
var config_1 = require("./config");
exports.isBrowser = typeof window !== "undefined";
var SlidingWindow = (function () {
    function SlidingWindow(maxSize) {
        this.values = [];
        this.maxSize = maxSize;
    }
    SlidingWindow.prototype.push = function (value) {
        this._lastValue = value;
        this.values.push(value);
        if (this.values.length > this.maxSize) {
            this.values.shift();
        }
        if (typeof this._minValue === "undefined" || value < this._minValue) {
            this._minValue = value;
        }
        if (typeof this._maxValue === "undefined" || value > this._maxValue) {
            this._maxValue = value;
        }
    };
    SlidingWindow.prototype.getLast = function () {
        return this._lastValue;
    };
    SlidingWindow.prototype.getAverage = function () {
        if (!this.values.length) {
            return undefined;
        }
        var avg = this.values.reduce(function (acc, v) { return v + acc; }, 0) / this.values.length;
        return parseFloat(avg.toFixed(2));
    };
    SlidingWindow.prototype.getMin = function () {
        if (!this._minValue) {
            return undefined;
        }
        return parseFloat(this._minValue.toFixed(2));
    };
    SlidingWindow.prototype.getMax = function () {
        var _a;
        if (!this._maxValue) {
            return undefined;
        }
        return parseFloat((_a = this._maxValue) === null || _a === void 0 ? void 0 : _a.toFixed(2));
    };
    SlidingWindow.prototype.getMetrics = function () {
        return {
            max: this.getMax() || -1,
            avg: this.getAverage() || -1,
            min: this.getMin() || -1,
            last: this.getLast() || -1
        };
    };
    return SlidingWindow;
}());
exports.SlidingWindow = SlidingWindow;
var fetchGameServerAssignment = function (space) { return __awaiter(void 0, void 0, void 0, function () {
    var res, e_1;
    var _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _c.trys.push([0, 2, , 3]);
                return [4, axios_1["default"].get(exports.isBrowser
                        ? "".concat(config_1.API_BASE_PATH, "/api/v2/spaces/").concat(encodeURIComponent(space), "/game-server-assignment")
                        : "https://gather.town/api/v2/spaces/".concat(encodeURIComponent(space), "/game-server-assignment"))];
            case 1:
                res = _c.sent();
                return [2, res === null || res === void 0 ? void 0 : res.data];
            case 2:
                e_1 = _c.sent();
                if (axios_1["default"].isAxiosError(e_1)) {
                    throw new Error("Fetch game server assignment failed with message: ".concat((_b = (_a = e_1.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.message, " and code: ").concat(e_1.code));
                }
                else {
                    throw e_1;
                }
                return [3, 3];
            case 3: return [2];
        }
    });
}); };
exports.fetchGameServerAssignment = fetchGameServerAssignment;
var sleepAndReject = function (n, message) {
    return new Promise(function (_, reject) {
        setTimeout(function () { return reject(new Error(message)); }, n);
    });
};
exports.sleepAndReject = sleepAndReject;
var parseCustomAction = function (name, payload) {
    var action;
    try {
        action = JSON.parse(payload);
    }
    catch (_a) {
        throw new Error("Failed to parse payload for ".concat(name, " event: ").concat(payload));
    }
    return action;
};
exports.parseCustomAction = parseCustomAction;
//# sourceMappingURL=Utils.js.map