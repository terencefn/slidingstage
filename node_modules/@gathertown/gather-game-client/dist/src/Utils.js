"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.testConnection = exports.parseCustomAction = exports.fetchGameServerAssignment = exports.SlidingWindow = exports.isBrowser = void 0;
const axios_1 = __importDefault(require("axios"));
const config_1 = require("./config");
const Error_1 = require("./Error");
const Logger_1 = require("./Logger");
exports.isBrowser = typeof window !== "undefined";
class SlidingWindow {
    constructor(maxSize) {
        this.values = [];
        this.maxSize = maxSize;
    }
    push(value) {
        this._lastValue = value;
        this.values.push(value);
        if (this.values.length > this.maxSize) {
            this.values.shift();
        }
        if (typeof this._minValue === "undefined" || value < this._minValue) {
            this._minValue = value;
        }
        if (typeof this._maxValue === "undefined" || value > this._maxValue) {
            this._maxValue = value;
        }
    }
    getLast() {
        return this._lastValue;
    }
    getAverage() {
        if (!this.values.length)
            return undefined;
        const avg = this.values.reduce((acc, v) => v + acc, 0) / this.values.length;
        return parseFloat(avg.toFixed(2));
    }
    getMin() {
        if (!this._minValue)
            return undefined;
        return parseFloat(this._minValue.toFixed(2));
    }
    getMax() {
        var _a;
        if (!this._maxValue)
            return undefined;
        return parseFloat((_a = this._maxValue) === null || _a === void 0 ? void 0 : _a.toFixed(2));
    }
    getMetrics() {
        return {
            max: this.getMax() || -1,
            avg: this.getAverage() || -1,
            min: this.getMin() || -1,
            last: this.getLast() || -1,
        };
    }
}
exports.SlidingWindow = SlidingWindow;
const fetchGameServerAssignment = (cancelToken, space, overrideHttpServer) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const res = yield axios_1.default.get(overrideHttpServer
            ? `${overrideHttpServer}/api/v2/spaces/${encodeURIComponent(space)}/game-server-assignment`
            : `${config_1.API_BASE_PATH}/api/v2/spaces/${encodeURIComponent(space)}/game-server-assignment`, {
            cancelToken,
        });
        return res === null || res === void 0 ? void 0 : res.data;
    }
    catch (e) {
        if (axios_1.default.isAxiosError(e)) {
            const errorJson = JSON.stringify(e.toJSON());
            if (e.response) {
                if (e.response.status >= 400 && e.response.status < 500) {
                    throw new Error_1.ClientError(`Invalid request to fetch game server assignment, ${errorJson}`, `HTTP_${e.response.status}`);
                }
                else if (e.response.status >= 500) {
                    throw new Error_1.ClientError(`Failed to fetch game server assignment, ${errorJson}`, `HTTP_${e.response.status}`);
                }
                else {
                    throw new Error_1.ClientError(`Unknown error when fetching game server assignment, ${errorJson}`, `HTTP_${e.response.status}`);
                }
            }
            else if (e.request) {
                throw new Error_1.ClientError(`Could not reach server, ${errorJson}`, "COULD_NOT_REACH_SERVER");
            }
            else {
                throw new Error_1.ClientError(`Failed to make request to fetch game server assignment, ${errorJson}`, "FAILED_REQUEST");
            }
        }
        else {
            throw e;
        }
    }
});
exports.fetchGameServerAssignment = fetchGameServerAssignment;
const parseCustomAction = (name, payload) => {
    let action;
    try {
        action = JSON.parse(payload);
    }
    catch (_a) {
        throw new Error(`Failed to parse payload for ${name} event: ${payload}`);
    }
    return action;
};
exports.parseCustomAction = parseCustomAction;
const testSite = (url, testId) => __awaiter(void 0, void 0, void 0, function* () {
    const testIdParam = testId ? `?testId=${testId}` : "";
    const start = Date.now();
    return (axios_1.default
        .get(`${url}${testIdParam}`, {
        timeout: 60000,
    })
        .then(() => ({
        time: Date.now() - start,
        error: null,
    }))
        .catch((err) => {
        var _a;
        if (((_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status) === 404) {
            return {
                time: Date.now() - start,
                error: null,
            };
        }
        return {
            time: null,
            error: Logger_1.logger.errString(err),
        };
    }));
});
const testConnection = (serverUrl, testId) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const gsHttpUrl = serverUrl
        ? `https://${((_a = serverUrl.match(/[^/]*gather\.town/)) !== null && _a !== void 0 ? _a : [null])[0]}/ping`
        : null;
    const randomGs = `https://game-${["aaai", "sgp"][Math.floor(Math.random() * 2)]}-0${Math.ceil(Math.random() * 79 + 9)}.gather.town/ping`;
    const [googleResult, gatherResult, myGsResult, randomGsResult, awsGsResult] = yield Promise.all([
        testSite(`https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js?q=${Math.random()}`),
        testSite("https://api.gather.town/networkTest-should404", testId),
        gsHttpUrl ? testSite(gsHttpUrl, testId) : { time: undefined, error: undefined },
        testSite(randomGs, testId),
        testSite(`https://aws-gs-test.gather.town/ping`, testId),
    ]);
    return {
        googleTime2: googleResult.time,
        googleError2: googleResult.error,
        gatherTime: gatherResult.time,
        gatherError: gatherResult.error,
        myGsHttpTime: myGsResult.time,
        myGsHttpError: myGsResult.error,
        randomGsHttpTime: randomGsResult.time,
        randomGsHttpError: randomGsResult.error,
        awsGsHttpTime: awsGsResult.time,
        awsGsHttpError: awsGsResult.error,
    };
});
exports.testConnection = testConnection;
//# sourceMappingURL=Utils.js.map