"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
exports.logger = void 0;
var start = Date.now();
var MAX_LOG_LENGTH = 333;
var Logger = (function () {
    function Logger() {
        this.enabled = {
            error: true,
            warn: true,
            log: true,
            debug: false
        };
        this.record = {
            error: true,
            warn: true
        };
        this.history = [];
        this.context = {};
    }
    Logger.prototype.error = function (message) {
        message = message.slice(0, MAX_LOG_LENGTH);
        if (this.enabled.error) {
            if (this.record.error) {
                this.history.push({ time: Date.now() - start, message: message, level: "error" });
            }
            console.error(message);
            if (this.additionalErrorHandler) {
                this.additionalErrorHandler(message, this.context);
            }
        }
    };
    Logger.prototype.warn = function (message) {
        message = message.slice(0, MAX_LOG_LENGTH);
        if (this.enabled.warn) {
            if (this.record.warn) {
                this.history.push({ time: Date.now() - start, message: message, level: "warn" });
            }
            console.warn(message);
        }
    };
    Logger.prototype.log = function (message) {
        message = message.slice(0, MAX_LOG_LENGTH);
        if (this.enabled.log) {
            if (this.record.log) {
                this.history.push({ time: Date.now() - start, message: message, level: "log" });
            }
            console.log(message);
        }
    };
    Logger.prototype.debug = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this.enabled.debug) {
            console.debug.apply(console, __spreadArray([], __read(args), false));
        }
    };
    Logger.prototype.checkpoint = function (message) {
        message = message.slice(0, MAX_LOG_LENGTH);
        this.history.push({ time: Date.now() - start, message: message, level: "checkpoint" });
    };
    Logger.prototype.errString = function (err) {
        var propertyNames = Object.getOwnPropertyNames(err);
        if (propertyNames.includes("message")) {
            propertyNames = ["message"].concat(propertyNames.filter(function (n) { return n !== "message"; }));
        }
        if (propertyNames.includes("stack")) {
            propertyNames = propertyNames.filter(function (n) { return n !== "stack"; }).concat(["stack"]);
        }
        return JSON.stringify(err, propertyNames);
    };
    Logger.prototype.exportHistory = function () {
        var maxItems = 200;
        var startIndex = this.history.length - maxItems;
        return (this.history
            .slice(Math.max(0, startIndex), this.history.length)
            .map(function (entry) { return "".concat(entry.time, " ").concat(entry.level, " : ").concat(entry.message); })
            .join("\n") + "\n".concat(Date.now() - start, ": current time"));
    };
    Logger.prototype.addContext = function (field, value) {
        this.context[field] = value;
    };
    Logger.prototype.setDebugState = function (state) {
        this.enabled.debug = state;
    };
    return Logger;
}());
var _logger = new Logger();
exports.logger = _logger;
//# sourceMappingURL=Logger.js.map