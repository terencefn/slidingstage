"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.Engine = void 0;
var events_1 = require("@gathertown/gather-game-common/dist/src/public/events");
var responseCodes_1 = require("@gathertown/gather-game-common/dist/src/public/responseCodes");
var Logger_1 = require("./Logger");
var TransactionManager_1 = require("./TransactionManager");
var Utils_1 = require("./Utils");
var HEARTBEAT_INTERVAL = 10000;
var HEARTBEAT_TIMEOUT = 45000;
var INITIAL_RECONNECT_DELAY = 1000;
var MAX_RECONNECT_DELAY = 15000;
var RESET_RECONNECT_ATTEMPTS_DELAY = 60000;
var MAX_WAIT_FOR_CONNECTION = 45000;
var MAX_BUFFERABLE_MOVE_EVENTS = 10;
var Engine = (function () {
    function Engine(spaceId, getAuth, overrideServer) {
        this.serverURL = "";
        this.started = false;
        this._connected = false;
        this.connectionInitTime = 0;
        this.gotFirstMessage = false;
        this._sendQ = [];
        this.numMoveEventsBuffered = 0;
        this.transactionManager = new TransactionManager_1.TransactionManager();
        this.connectionFailedTimeout = 0;
        this.lastSignOfLife = 0;
        this._bufferedAmounts = new Utils_1.SlidingWindow(10);
        this.latencies = new Utils_1.SlidingWindow(10);
        this._timeSpentDisconnected = new Utils_1.SlidingWindow(10);
        this._eventCountsSinceOpen = {};
        this._closeCounts = {};
        this.reconnectTimeout = 0;
        this._reconnectionAttempts = 0;
        this.lastReconnectQueued = 0;
        this.wantsToEnter = false;
        this._heartbeatInterval = 0;
        this._byteTrackerInterval = 0;
        this._bytesSentSinceConnect = 0;
        this._bytesReceivedSinceConnect = 0;
        this._lastBytesSent = 0;
        this._lastBytesReceived = 0;
        this.CONNECT_INTENT_POST_INTERVAL = 60 * 1000;
        this.connectIntentInterval = 0;
        this.LOG_THRESH_MS = 10000;
        this.hasEverFullyConnected = false;
        this.disconnectedStartTime = 0;
        this.dcLogTimeout = 0;
        this.getAuth = getAuth;
        this.spaceId = spaceId;
        this.debugOverrideServer = overrideServer;
    }
    Engine.prototype.onevent = function (_e) { };
    Engine.prototype.onconnect = function () { };
    Engine.prototype.ondisconnect = function (_code, _reason) { };
    Engine.prototype.onmetric = function (_metricName, _metricValue) { };
    Engine.prototype.subscriptionHook = function () { };
    Engine.prototype.start = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.started) {
                    Logger_1.logger.warn("already started");
                    return [2];
                }
                this.started = true;
                this.createConnection();
                this.startRecordingIntentToConnect();
                return [2];
            });
        });
    };
    Engine.prototype.stop = function () {
        this.destroyConnection({
            code: responseCodes_1.GameWsCloseCode.NORMAL_CLOSURE,
            reason: "Game client disconnecting normally"
        });
        this.stopRecordingIntentToConnect();
        if (this.dcLogTimeout) {
            clearTimeout(this.dcLogTimeout);
        }
        if (this.reconnectTimeout) {
            clearTimeout(this.reconnectTimeout);
        }
        this.started = false;
    };
    Engine.prototype.createConnection = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_1, auth;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.ws) {
                            Logger_1.logger.error("createConnection called, but connection already exists");
                            return [2];
                        }
                        this.connectionInitTime = Date.now();
                        Logger_1.logger.checkpoint("creating a new connection at t = ".concat(this.connectionInitTime));
                        this.connectionFailedTimeout = setTimeout(function () {
                            Logger_1.logger.error("t: ".concat(Date.now() - _this.connectionInitTime, " : didn't get a ws.onopen for ").concat(MAX_WAIT_FOR_CONNECTION, "ms after creating connection. destroying and trying again"));
                            _this.cleanUpAndQueueReconnect();
                        }, MAX_WAIT_FOR_CONNECTION);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4, Promise.race([
                                this.getGameServerUrl().then(function (url) {
                                    _this.serverURL = url;
                                }),
                                (0, Utils_1.sleepAndReject)(MAX_WAIT_FOR_CONNECTION * 0.66, "gs fetch timed out"),
                            ])];
                    case 2:
                        _a.sent();
                        return [3, 4];
                    case 3:
                        e_1 = _a.sent();
                        Logger_1.logger.error("failed to fetch gameserver assignment: ".concat(Logger_1.logger.errString(e_1)));
                        this.onmetric("blackscreen-no-assignment", {
                            space: this.spaceId,
                            attempts: this._reconnectionAttempts
                        });
                        this.cleanUpAndQueueReconnect();
                        return [2];
                    case 4:
                        Logger_1.logger.checkpoint("t: ".concat(Date.now() - this.connectionInitTime, " : got game server url: ").concat(this.serverURL));
                        return [4, this.getAuth()];
                    case 5:
                        auth = _a.sent();
                        try {
                            this.ws = new WebSocket(this.serverURL, "gather-v2");
                        }
                        catch (e) {
                            Logger_1.logger.error("Failed to create websocket object with gameserver ".concat(this.serverURL, " : ").concat(Logger_1.logger.errString(e)));
                            this.cleanUpAndQueueReconnect();
                            return [2];
                        }
                        this.ws.binaryType = "arraybuffer";
                        this.ws.onopen = function () {
                            if (_this.ws == null) {
                                Logger_1.logger.error("something is very wrong, ws is null after open");
                                return;
                            }
                            Logger_1.logger.checkpoint("t: ".concat(Date.now() - _this.connectionInitTime, " : ws connection opened"));
                            _this.lastSignOfLife = Date.now();
                            clearTimeout(_this.connectionFailedTimeout);
                            _this.startByteTracker();
                            _this.sendAction({
                                $case: "init",
                                init: {
                                    spaceId: _this.spaceId,
                                    auth: "token" in auth
                                        ? { $case: "token", token: auth.token }
                                        : { $case: "apiKey", apiKey: auth.apiKey }
                                }
                            }, true);
                            _this.ws.onmessage = function (msg) {
                                if (!_this.gotFirstMessage) {
                                    Logger_1.logger.checkpoint("t: ".concat(Date.now() - _this.connectionInitTime, " : got first message"));
                                    _this.gotFirstMessage = true;
                                }
                                _this._bytesReceivedSinceConnect += msg.data.byteLength;
                                _this.lastSignOfLife = Date.now();
                                try {
                                    var data = new Uint8Array(msg.data);
                                    var events = events_1.ServerClientBatch.decode(data).events;
                                    events.forEach(function (event) { return _this.processEvent(event); });
                                }
                                catch (e) {
                                    Logger_1.logger.error("unexpected error in ws.onmessage, maybe decode?: ".concat(Logger_1.logger.errString(e)));
                                }
                            };
                            _this.startHeartbeat();
                            _this.onconnect();
                        };
                        this.ws.onclose = function (event) {
                            var _a;
                            _this.onmetric("client_ws_close_code_".concat(event.code), { value: event.reason });
                            _this._closeCounts[event.code] = ((_a = _this._closeCounts[event.code]) !== null && _a !== void 0 ? _a : 0) + 1;
                            Logger_1.logger.checkpoint("t: ".concat(Date.now() - _this.connectionInitTime, " : onclose. last sign of life was ").concat(Date.now() - _this.lastSignOfLife, "ms ago"));
                            switch (event.code) {
                                case responseCodes_1.GameWsCloseCode.SPACE_AT_CAPACITY:
                                    Logger_1.logger.error("Space is currently at capacity, please try again later: " + event.reason);
                                    _this.destroyConnection({ code: event.code, reason: event.reason });
                                    break;
                                case responseCodes_1.GameWsCloseCode.PROTOCOL_ERROR:
                                    Logger_1.logger.error("ws closed: protocol error. " + event.reason);
                                    if (typeof window !== "undefined") {
                                        window.location.reload();
                                    }
                                    _this.destroyConnection({ code: event.code, reason: event.reason });
                                    break;
                                case responseCodes_1.GameWsCloseCode.INTERNAL_ERROR:
                                    Logger_1.logger.error("connection closed due to internal server error: " + event.reason);
                                    if (typeof window !== "undefined") {
                                        window.location.reload();
                                    }
                                    _this.destroyConnection({ code: event.code, reason: event.reason });
                                    break;
                                case responseCodes_1.GameWsCloseCode.CLIENT_KICKED:
                                    Logger_1.logger.error("connection closed due to client being kicked: " + event.reason);
                                    if (typeof window !== "undefined") {
                                        window.location.reload();
                                    }
                                    _this.cleanUpAndQueueReconnect({ code: event.code, reason: event.reason });
                                    break;
                                case responseCodes_1.GameWsCloseCode.UNAUTHORIZED:
                                    Logger_1.logger.error("connection closed because user does not have access: " + event.reason);
                                    if (typeof window !== "undefined") {
                                        window.location.reload();
                                    }
                                    _this.destroyConnection({ code: event.code, reason: event.reason });
                                    break;
                                case responseCodes_1.GameWsCloseCode.CONN_TIMED_OUT:
                                    Logger_1.logger.error("connection timed out: " + event.reason);
                                    _this.cleanUpAndQueueReconnect({ code: event.code, reason: event.reason });
                                    break;
                                case responseCodes_1.GameWsCloseCode.NO_STATUS_RECEIVED:
                                    Logger_1.logger.error("connection closed unexpectedly with no status: " + Logger_1.logger.errString(event));
                                    _this.cleanUpAndQueueReconnect({ code: event.code, reason: event.reason });
                                    break;
                                default:
                                    Logger_1.logger.error("connection closed with unrecognized non-default code ".concat(event.code, ": ").concat(Logger_1.logger.errString(event)));
                                    _this.cleanUpAndQueueReconnect({ code: event.code, reason: event.reason });
                            }
                        };
                        this.ws.onerror = function (e) {
                            Logger_1.logger.error("ws.onerror in Engine: ".concat(Logger_1.logger.errString(e)));
                            _this.onmetric("ws error", { error: e });
                        };
                        return [2];
                }
            });
        });
    };
    Engine.prototype.destroyConnection = function (disconnectInfo) {
        var _a;
        Logger_1.logger.warn("t: ".concat(Date.now() - this.connectionInitTime, " : destroying connection"));
        if (this.ws) {
            this.ws.onopen = function () { };
            this.ws.onclose = function () { };
            this.ws.onmessage = function () { };
            this.ws.onerror = function () { };
            try {
                var disconnectInfoCode = (_a = disconnectInfo === null || disconnectInfo === void 0 ? void 0 : disconnectInfo.code) !== null && _a !== void 0 ? _a : 0;
                if (disconnectInfoCode >= 4000 || disconnectInfoCode === responseCodes_1.GameWsCloseCode.NORMAL_CLOSURE) {
                    this.ws.close(disconnectInfo === null || disconnectInfo === void 0 ? void 0 : disconnectInfo.code, disconnectInfo === null || disconnectInfo === void 0 ? void 0 : disconnectInfo.reason);
                }
                else {
                    this.ws.close();
                }
            }
            catch (err) {
                Logger_1.logger.error("error closing connection: " + Logger_1.logger.errString(err));
            }
            this.ws = undefined;
        }
        clearTimeout(this.connectionFailedTimeout);
        this.logDisconnectionStart();
        this._connected = false;
        this.stopHeartbeat();
        this.stopByteTracker();
        this.transactionManager.reset();
        this._eventCountsSinceOpen = {};
        this.gotFirstMessage = false;
        this.ondisconnect(disconnectInfo === null || disconnectInfo === void 0 ? void 0 : disconnectInfo.code, disconnectInfo === null || disconnectInfo === void 0 ? void 0 : disconnectInfo.reason);
    };
    Engine.prototype.cleanUpAndQueueReconnect = function (disconnectInfo) {
        var _this = this;
        this.destroyConnection(disconnectInfo);
        if (Date.now() > this.lastReconnectQueued + RESET_RECONNECT_ATTEMPTS_DELAY &&
            Date.now() < this.lastSignOfLife + RESET_RECONNECT_ATTEMPTS_DELAY) {
            this._reconnectionAttempts = 0;
        }
        this.lastReconnectQueued = Date.now();
        if (this.reconnectTimeout) {
            return;
        }
        if (this.lastSignOfLife === 0) {
            this.onmetric("stuck-on-connecting", { attempt: this._reconnectionAttempts });
        }
        if (this._reconnectionAttempts === 2) {
            this.onmetric("ggc-debug-history", { history: Logger_1.logger.exportHistory().slice(-10000) });
        }
        var reconnectDelay = Math.min(INITIAL_RECONNECT_DELAY * Math.pow(2, this._reconnectionAttempts), MAX_RECONNECT_DELAY);
        var jitter = 0.25;
        reconnectDelay = reconnectDelay * (1 - jitter + Math.random() * 2 * jitter);
        reconnectDelay = Math.max(INITIAL_RECONNECT_DELAY, reconnectDelay);
        Logger_1.logger.checkpoint("queuing reconnect after ".concat(this._reconnectionAttempts, " recent attempts, ").concat(reconnectDelay, "ms"));
        this._reconnectionAttempts++;
        this.reconnectTimeout = setTimeout(function () {
            _this.reconnectTimeout = null;
            Logger_1.logger.checkpoint("reconnect timer fired, destroying and starting over");
            _this.destroyConnection();
            _this.createConnection();
        }, reconnectDelay);
    };
    Engine.prototype.queueOrExecuteEnter = function (info, spawnToken, targetId) {
        this.wantsToEnter = true;
        if (info) {
            this.tempSpaceUserInfo = info;
        }
        if (spawnToken) {
            this.tempSpawnToken = spawnToken;
        }
        if (targetId) {
            this.tempTargetId = targetId;
        }
        if (this._connected) {
            var enterParams = {};
            if (this.tempSpaceUserInfo) {
                enterParams.info = this.tempSpaceUserInfo;
            }
            if (this.tempSpawnToken) {
                enterParams.spawnToken = this.tempSpawnToken;
            }
            if (this.tempTargetId) {
                enterParams.targetId = this.tempTargetId;
            }
            this.sendAction({
                $case: "enter",
                enter: enterParams
            });
            this.tempSpaceUserInfo = undefined;
            this.tempSpawnToken = undefined;
        }
    };
    Engine.prototype.exit = function () {
        this.wantsToEnter = false;
        this.sendAction({
            $case: "exit",
            exit: {}
        });
    };
    Engine.prototype.processEvent = function (serverClientEvent) {
        var _this = this;
        var _a;
        var event = serverClientEvent.event;
        if (!event) {
            Logger_1.logger.error("Nullish server client event; this shouldn't happen! " + serverClientEvent);
            return;
        }
        this._eventCountsSinceOpen[event.$case] = ((_a = this._eventCountsSinceOpen[event.$case]) !== null && _a !== void 0 ? _a : 0) + 1;
        try {
            switch (event.$case) {
                case "serverHeartbeat":
                    this.sendAction({
                        $case: "clientHeartbeat",
                        clientHeartbeat: {}
                    });
                    break;
                case "ready":
                    this.clientUid = event.ready.id;
                    this._connected = true;
                    this.subscriptionHook();
                    if (this.wantsToEnter) {
                        this.queueOrExecuteEnter();
                    }
                    if (this._sendQ.length >= 20) {
                        this.onmetric("large-sendQ", {
                            sendQLength: this._sendQ.length
                        });
                    }
                    this._sendQ.forEach(function (_a) {
                        var action = _a.action, txnId = _a.txnId;
                        _this.sendAction(action, false, false, txnId);
                    });
                    this._sendQ = [];
                    this.numMoveEventsBuffered = 0;
                    break;
                case "info":
                    Logger_1.logger.log("[info from gs] " + event.info.message);
                    break;
                case "warn":
                    Logger_1.logger.warn("[warn from gs] " + event.warn.message);
                    break;
                case "error":
                    Logger_1.logger.error("[error from gs] ".concat(event.error.code, ": ") + event.error.message);
                    break;
                case "transactionStatus": {
                    this.transactionManager.handleTransactionStatusEvent(event.transactionStatus);
                    break;
                }
            }
            this.onevent(serverClientEvent);
        }
        catch (e) {
            Logger_1.logger.error("Failed to process event ".concat(event.$case, " with error: ").concat(Logger_1.logger.errString(e)));
            this.onmetric("failed-to-process-event", {
                errorMessage: e === null || e === void 0 ? void 0 : e.message,
                eventName: event.$case
            });
        }
    };
    Engine.prototype.sendAction = function (action, bypass, createTxnId, txnId) {
        var _a, _b, _c;
        if (bypass === void 0) { bypass = false; }
        if (createTxnId === void 0) { createTxnId = false; }
        var transaction;
        Logger_1.logger.debug("New action", action.$case);
        if (createTxnId) {
            transaction = this.transactionManager.addTransaction();
            Logger_1.logger.debug("Creating new transaction", transaction.txnId);
            txnId = transaction.txnId;
        }
        if (!this._connected && !bypass) {
            if ((action.$case === "move" && this.numMoveEventsBuffered >= MAX_BUFFERABLE_MOVE_EVENTS) ||
                action.$case === "activelySpeaking") {
                Logger_1.logger.debug("[Engine] dropping ".concat(action.$case, " action because we're not connected"));
            }
            else {
                this._sendQ.push({ action: action, txnId: txnId });
                if (action.$case === "move") {
                    this.numMoveEventsBuffered++;
                }
            }
            return transaction === null || transaction === void 0 ? void 0 : transaction.txnPromise;
        }
        try {
            var serializedAction = events_1.ClientServerAction.encode({
                txnId: txnId,
                action: action
            }).finish();
            this._bufferedAmounts.push((_b = (_a = this.ws) === null || _a === void 0 ? void 0 : _a.bufferedAmount) !== null && _b !== void 0 ? _b : 0);
            if (!this.ws) {
                Logger_1.logger.error("WebSocket not initialized during ".concat(action.$case, ", this should never happen!"));
                this.onmetric("send-action-no-ws", { value: 1, action: action.$case });
            }
            (_c = this.ws) === null || _c === void 0 ? void 0 : _c.send(serializedAction);
            this._bytesSentSinceConnect += serializedAction.byteLength;
            return transaction === null || transaction === void 0 ? void 0 : transaction.txnPromise;
        }
        catch (e) {
            if (txnId) {
                this.transactionManager.rejectTransaction(txnId, e.message);
            }
            Logger_1.logger.error("websocket send error: " + Logger_1.logger.errString(e));
        }
    };
    Engine.prototype.recordHeartbeatTime = function (time) {
        this.onmetric("heartbeat-latency", { value: time });
        this.latencies.push(time);
    };
    Engine.prototype.startHeartbeat = function () {
        var _this = this;
        if (this._heartbeatInterval) {
            return;
        }
        this._heartbeatInterval = setInterval(function () {
            var _a;
            var start = Date.now();
            (_a = _this.sendAction({ $case: "clientBackupHeartbeat", clientBackupHeartbeat: {} }, false, true)) === null || _a === void 0 ? void 0 : _a.then(function () {
                _this.recordHeartbeatTime(Date.now() - start);
            })["catch"](function () {
                _this.recordHeartbeatTime(Date.now() - start);
                _this.onmetric("heartbeat-txn-timed-out", { value: 1 });
            });
            if (_this.lastSignOfLife < Date.now() - HEARTBEAT_TIMEOUT && _this.ws != null) {
                Logger_1.logger.error("t: ".concat(Date.now() - _this.connectionInitTime, " : no heartbeat since ").concat(_this.lastSignOfLife, ", closing connection"));
                _this.onmetric("ws-close-timeout", {
                    lastHeartbeat: _this.lastSignOfLife,
                    readyState: _this.ws.readyState
                });
                _this.cleanUpAndQueueReconnect({
                    code: responseCodes_1.GameWsCloseCode.CONN_TIMED_OUT,
                    reason: "Game Server timed out for ".concat(_this.clientUid, ". No heartbeat since ").concat(_this.lastSignOfLife)
                });
                Logger_1.logger.checkpoint("successfully closed ws connection with TIMEOUT code");
            }
        }, HEARTBEAT_INTERVAL);
    };
    Engine.prototype.stopHeartbeat = function () {
        clearInterval(this._heartbeatInterval);
        this._heartbeatInterval = null;
    };
    Engine.prototype.startByteTracker = function () {
        var _this = this;
        if (!this._byteTrackerInterval) {
            this._byteTrackerInterval = setInterval(function () {
                if (_this._bytesSentSinceConnect === _this._lastBytesSent) {
                    Logger_1.logger.warn("warning: bytes sent hasn't changed in the last 15 seconds, currently ".concat(_this._lastBytesSent));
                    _this.onmetric("no-bytes-sent-recently", { value: 1 });
                }
                if (_this._bytesReceivedSinceConnect === _this._lastBytesReceived) {
                    Logger_1.logger.warn("warning: bytes received hasn't changed in the last 15 seconds, currently ".concat(_this._lastBytesReceived));
                    _this.onmetric("no-bytes-recv-recently", { value: 1 });
                }
                _this._lastBytesSent = _this._bytesSentSinceConnect;
                _this._lastBytesReceived = _this._bytesReceivedSinceConnect;
            }, 15000);
        }
    };
    Engine.prototype.stopByteTracker = function () {
        clearInterval(this._byteTrackerInterval);
        this._byteTrackerInterval = null;
        this._bytesSentSinceConnect = 0;
        this._bytesReceivedSinceConnect = 0;
    };
    Engine.prototype.startRecordingIntentToConnect = function () {
        var _this = this;
        this.onmetric("intend-to-be-connected", { connected: this._connected, first: true });
        this.connectIntentInterval = setInterval(function () { return _this.onmetric("intend-to-be-connected", { connected: _this._connected }); }, this.CONNECT_INTENT_POST_INTERVAL);
    };
    Engine.prototype.stopRecordingIntentToConnect = function () {
        clearInterval(this.connectIntentInterval);
    };
    Engine.prototype.logDisconnectionStart = function () {
        var _this = this;
        if (!this.hasEverFullyConnected || this.disconnectedStartTime) {
            return;
        }
        this.disconnectedStartTime = Date.now();
        this.dcLogTimeout = setTimeout(function () {
            _this.dcLogTimeout = 0;
            _this.onmetric("dc-at-least-".concat(_this.LOG_THRESH_MS, "-ms"), {});
        }, this.LOG_THRESH_MS);
    };
    Engine.prototype.logInitialSyncComplete = function () {
        var _a;
        Logger_1.logger.checkpoint("t: ".concat(Date.now() - this.connectionInitTime, " : successfully subscribed and re-synced"));
        this.hasEverFullyConnected = true;
        if (this.disconnectedStartTime) {
            this.onmetric("dc-length", (_a = {
                    ms: Date.now() - this.disconnectedStartTime
                },
                _a["preTimeout".concat(this.LOG_THRESH_MS)] = !!this.dcLogTimeout,
                _a));
            this._timeSpentDisconnected.push(Date.now() - this.disconnectedStartTime);
            this.disconnectedStartTime = 0;
            this.dcLogTimeout = 0;
        }
    };
    Engine.prototype.getGameServerUrl = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.debugOverrideServer) {
                    return [2, this.debugOverrideServer];
                }
                return [2, (0, Utils_1.fetchGameServerAssignment)(this.spaceId)];
            });
        });
    };
    Engine.prototype.getMetrics = function () {
        return {
            connected: this._connected,
            latency: this.latencies.getMetrics(),
            reconnects: {
                recentAttempts: this._reconnectionAttempts,
                timeSpentDisconnectedMs: this._timeSpentDisconnected.getMetrics()
            },
            bufferedAmount: this._bufferedAmounts.getMetrics(),
            bytesSentSinceConnect: this._bytesSentSinceConnect,
            bytesReceivedSinceConnect: this._bytesReceivedSinceConnect,
            eventCountsSinceOpen: this._eventCountsSinceOpen,
            closeCodeCount: this._closeCounts
        };
    };
    return Engine;
}());
exports.Engine = Engine;
//# sourceMappingURL=Engine.js.map